package codigo;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;
import java.awt.Font;
import javax.swing.JLabel;
import modelos.LabelError;
import modelos.Gramatica;
import java.awt.Color;
//import static javax.swing.JOptionPane.*;

action code
    {:
        Hashtable table = new Hashtable();
        private final int SINTACTICO = 232;
    :};

parser code
{:

    static TablaSimbolos tablaSimbolos = new TablaSimbolos();
    static int verificarTipo = 0;
    JLabel lb = new JLabel();
    private final int SINTACTICO = 232;
    
    static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
        System.out.println("EMPEZAMOS");
		new Sintax(new LexerCup(System.in)).parse();
	}
    
    private Symbol s;
    
    public Symbol getS(){
        return this.s;
    }

    public void syntax_error(Symbol s){                            
        lb.setForeground(new Color(217, 33, 51));
        lb.setFont(new Font("Verdana", Font.PLAIN, 14));
        lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lb.setText("Error en la línea " + (s.right+1) + ". Error sintáctico, cadena inesperada: "+ s.value );                       
        VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico", s.right+1,SINTACTICO));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{       
        lb.setForeground(new Color(217, 33, 51));
        lb.setFont(new Font("Verdana", Font.PLAIN, 14));
        lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lb.setText("Error en la línea " + (s.right+1) + ". Error sintáctico, cadena inesperada: "+ s.value );                       
        VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico", s.right+1,SINTACTICO));
    }

    public void linea(int right){
        System.out.println("Linea: "+right);
    }

:};

terminal String IDENTIFICADOR;
terminal Integer NUMERO;
terminal Double DECIMAL;
terminal String CADENA_TEXTO,TRUE, FALSE;
terminal String BROKEN,JUST, WORD, FLAG;
terminal SETFILAMENTTYPE, FILLRECTANGLE, DRAWRECTANGLE, SLEEP, FILLCIRCLE, DRAWCIRCLE,
FILLTRIANGLE, DRAWTRIANGLE, STOP, GETEXTRUSORX, GETEXTRUSORY, GETEXTRUSORZ, GETFILAMENTTYPE, SETNEWFILAMENT,
GETFILAMENT, GETTEMPERATURE, END, SAME, GET, GIVE, FOR, IF, ELSE, SELECT, EMPTY,
WHILE, CASE,  CUT, BEGIN, MODEL, DEFECT, NEW, DO, GOBACK,  HOME,
PRINTERPORT, METHOD, CHECK, TRAP, CLASS, MAIN, SIGNO_DE_IGUAL, SIGNO_DE_SUMA, SIGNO_DE_RESTA,
SIGNO_DE_MULTIPLICACIÓN, SIGNO_DE_DIVISIÓN, SIGNO_DE_RESIDUO, NOT, AND, OR, MAS_MAS,
MENOS_MENOS, MENOR_QUE, MAYOR_QUE, MENOR_O_IGUAL_QUE, MAYOR_O_IGUAL_QUE, DIFERENTE_QUE,
IGUAL_QUE, PARENTESIS_ABRE, PARENTESIS_CIERRA, LLAVE_ABRE, LLAVE_CIERRA, CORCHETE_ABRE,
CORCHETE_CIERRA, PUNTOYCOMA,  COMA,  PUNTO, 
ERROR;

non terminal String t_dato;
non terminal inicio, declaracion_for, if, if_else,
    while, do_while, for, sentencia_booleana, sentencia_for ,datos_array,continua,cuerpo,
    declaraciones,declaracion,bloquesentencias,sentencias,sentencia,expresion,
    expresion_prima,
    termino,
    termino_prima,
    factor,
    sentif,
    sentelse,
    sentwhile,
    sentasignacion,
    sentcut,
    expresiondos,
    expresiontres,
    expresioncuatro,
    op_rel,
    op_art,
    op_log,
    condicion,
    condiciondos, 
    filltriangle,
    setfilamenttype,
    stop,
    getextrusorx,
    getextrusory,
    getextrusorz,
    getfilamenttype,
    setnewfilament,
    getfilament,
    gettemperature,
    drawtriangle,
    fillrectangle,
    drawrectangle,
    sleep,
    drawcircle,
    fillcircle,
    home,
    printerport,
    constructor,
    metodo,
    metodos_parametros,
    metodo_sin_parametros,
    metodo_un_parametro,
    metodo_cuatro_parametros,
    metodo_nueve_parametros,
    metodo_doce_parametros,
    parametros,
    parametrosa,
    parametro,
    main,
    llamar,
    tryycatch,
    get,
    give,
    parametroa,
    expresioncinco;

start with inicio;
inicio ::=  IDENTIFICADOR:nombre PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END
    {:
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :} |
    declaracion IDENTIFICADOR:nombre PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
    {:
        System.out.println("Linea: "+nombreright);
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    IDENTIFICADOR:nombre PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
    {:
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));
            
            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    error BEGIN;

bloquesentencias::= sentencias |;

sentencias::= sentencia sentencias | sentencia;

sentencia::= declaracion | sentif | sentwhile | sentasignacion | sentcut | metodo |
            home |
            main |
            metodos_parametros|
            metodo_sin_parametros|
            metodo_un_parametro|
            metodo_cuatro_parametros|
            metodo_nueve_parametros|
            metodo_doce_parametros|
            for |
            tryycatch |
            get|
            give|
            error PUNTOYCOMA | error LLAVE_CIERRA 
; 

declaracion ::= 
   
    JUST IDENTIFICADOR:id PUNTOYCOMA   {:
        System.out.println(id+" en la linea: "+(idright+1));
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
        //Si es nulo, devuelvo un error
            if (sim != null) {
                //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
                //RESULT = 0;
                System.out.println("El identificador '"+id+"' ya existe");
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya esta declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya esta declarada.", idright+1,SINTACTICO, 
                new Gramatica("declaracion ::= JUST IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "just","Variable númerica");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    BROKEN IDENTIFICADOR:id PUNTOYCOMA   {:
        System.out.println(id+" en la linea: "+(idright+1));
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
        //Si es nulo, devuelvo un error
            if (sim != null) {
                //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
                //RESULT = 0;
                System.out.println("El identificador '"+id+"' ya existe");    
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya esta declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya esta declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= BROKEN IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "broken","Variable flotante");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    WORD IDENTIFICADOR:id PUNTOYCOMA   {:
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
                //RESULT = 0;
                System.out.println("El identificador '"+id+"' ya existe");    
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya esta declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya esta declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "word","Variable tipo cadena");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);      
            }   
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    FLAG IDENTIFICADOR:id PUNTOYCOMA   {:
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
                //RESULT = 0;
                System.out.println("El identificador '"+id+"' ya existe");    
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya esta declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya esta declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= FLAG IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "flag","Variable booleana");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);     
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    JUST:tipo IDENTIFICADOR:id SIGNO_DE_IGUAL NUMERO:valor PUNTOYCOMA 
    {:
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
                //RESULT = 0;
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya esta declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya esta declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= JUST IDENTIFICADOR = NUMEOR PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "just","Variable númerica");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    :}|
    BROKEN:tipo IDENTIFICADOR:id SIGNO_DE_IGUAL DECIMAL:valor PUNTOYCOMA 
    {:
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
                //RESULT = 0;
                System.out.println("El identificador '"+id+"' ya existe");     
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya esta declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya esta declarada.", idright+1,SINTACTICO, new Gramatica("declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL PUNTOYCOMA ", "Variable repetido")));
            }else{
                TablaSimbolos.crear(id, "broken","Variable flotante");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    :}|
    WORD:tipo IDENTIFICADOR:id SIGNO_DE_IGUAL CADENA_TEXTO:valor PUNTOYCOMA 
    {:
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
                //RESULT = 0;
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya esta declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya esta declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= WORD IDENTIFICADOR = CADENA_TEXTO PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "word","Variable tipo cadena");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);  
            }        
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    :}|
    FLAG:tipo IDENTIFICADOR:id SIGNO_DE_IGUAL TRUE:valor PUNTOYCOMA 
    {:
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
                //RESULT = 0;
                System.out.println("El identificador '"+id+"' ya existe");     
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya esta declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya esta declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= FLAG IDENTIFICADOR = TRUE PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "flag","Variable tipo booleana");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id); 
            }         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    :}|
    FLAG:tipo IDENTIFICADOR:id SIGNO_DE_IGUAL FALSE:valor PUNTOYCOMA 
    {:
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
                //RESULT = 0;
                System.out.println("El identificador '"+id+"' ya existe");       
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya esta declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya esta declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= FLAG IDENTIFICADOR = FALSE PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "flag","Variable tipo booleana");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id); 
            }            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    :}|
    t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL t_dato CORCHETE_ABRE NUMERO CORCHETE_CIERRA PUNTOYCOMA |
    t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL LLAVE_ABRE datos_array LLAVE_CIERRA PUNTOYCOMA |
    IDENTIFICADOR IDENTIFICADOR SIGNO_DE_IGUAL NEW IDENTIFICADOR PARENTESIS_ABRE parametrosa PARENTESIS_CIERRA PUNTOYCOMA
;

t_dato::= BROKEN|
        JUST |
        WORD |
        FLAG 
;

expresion ::= 
    expresion:e SIGNO_DE_SUMA termino:t {:
        if (e instanceof Integer){
            if(t instanceof String){
                String str = ((String) t).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (tright+1) + ". Error sintáctico. No se puede sumar una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. No se puede sumar una variable 'just' y una 'word'", tright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede sumar una variable 'just' y una 'word'")));                          
                }
            }
        }
        if (t instanceof Integer){
            if(e instanceof String){
                String str = ((String) e).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (eright+1) + ". Error sintáctico. No se puede sumar una variable 'word' y una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. No se puede sumar una variable 'word' y una 'just'", eright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede sumar una variable 'word' y una 'just'")));                          
                }
            }
        }

        //System.out.println("EMPIEZA EXPRESION");
        RESULT = e+"+"+t;
        //System.out.println("termino: "+t);
        //System.out.println("exp: "+e);
    :} |
    expresion:e SIGNO_DE_RESTA termino:t {:
        if (e instanceof Integer){
            if(t instanceof String){
                String str = ((String) t).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (tright+1) + ". Error sintáctico. No se puede restar una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. No se puede restar una variable 'just' y una 'word'", tright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede restar una variable 'just' y una 'word'")));                          
                }
            }
        }
        if (t instanceof Integer){
            if(e instanceof String){
                String str = ((String) e).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (eright+1) + ". Error sintáctico. No se puede restar una variable 'word' y una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. No se puede restar una variable 'word' y una 'just'", eright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede restar una variable 'word' y una 'just'")));                          
                }
            }
        }
        //System.out.println("EMPIEZA EXPRESION");
        RESULT = e+"-"+t;
        //System.out.println("termino: "+t);
        //System.out.println("exp: "+e);
    :} |
    termino:t {:
        RESULT = t; 
        //System.out.println("EMPIEZA EXPRESION");        
        //System.out.println("termino: "+t);
        :} 
;
    
termino ::= factor:f1 SIGNO_DE_MULTIPLICACIÓN factor:f2 {:
        RESULT = f1+"*"+f2;
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                String str = ((String) f2).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error sintáctico. No se puede multiplicar una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. No se puede multiplicar una variable 'just' y  una 'word'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede multiplicar una variable 'just' y una 'word'")));          
                }
                else
                    System.out.println("**"+f2+": f2  es varibale");                    
            }
        }
        if (f1 instanceof String){
           if(f2 instanceof Integer){
                String str = ((String) f1).substring(0, 1);
                if(str.equals("\"")){
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error sintáctico. No se puede multiplicar una variable 'word' una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. No se puede multiplicar una variable 'word' una 'just'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede multiplicar una variable 'word' una 'just'")));
                }
            }
        }
        //System.out.println("factor1 "+f1);
        //System.out.println("factor2 "+f2);
    :} |
    factor:f1 SIGNO_DE_DIVISIÓN factor:f2 {:
    System.out.println("EMPIEZA TERMINO");
        RESULT = f1+"/"+f2;
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                String str = ((String) f2).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error sintáctico. No se puede dividir una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. No se puede dividir una variable 'just' y una 'word'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede dividir una variable 'just' y una 'word'")));
                }
                else
                    System.out.println("**"+f2+": f2  es varibale");
            }
        }
        if (f1 instanceof String){
            if(f2 instanceof Integer){
                String str = ((String) f1).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error sintáctico. No se puede dividir una variable 'word' y una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. No se puede dividir una variable 'word' y una 'just'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede dividir una variable 'word' y una 'just'")));
                }
            }
        }
        //System.out.println("factor1 "+f1);
        //System.out.println("factor2 "+f2);
    :} |
    factor:f {:RESULT = f; 
        //System.out.println("EMPIEZA TERMINO");
        //System.out.println("factor "+f);
    :} 
;
    
factor ::= 
    PARENTESIS_ABRE expresion:e PARENTESIS_CIERRA {:
        //System.out.println("EMPIEZA FACTOR");
        RESULT =  "("+e+")";
        //System.out.println("exp: "+e);
    :} |
    IDENTIFICADOR:f  {:
        Simbolo sim = TablaSimbolos.buscar(f);
        //Si es nulo, devuelvo un error
        if (sim == null) {
            JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (fright+1) + ". Error sintáctico. La variable '"+f+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+f+"' no existe", fright+1,SINTACTICO,
                new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA","Error sintáctico. La variable '"+f+"' no existe")));
                System.out.println("El identificador '"+f+"' no existe");
                 
                RESULT = 0; 
        }
        else{
            System.out.println("*****id: "+sim.valor);  
            RESULT = sim.valor; 
        }
        //System.out.println("EMPIEZA FACTOR");
        //System.out.println("factor "+f);:}   | 
    CADENA_TEXTO:f {:RESULT = f; 
        //System.out.println("EMPIEZA FACTOR");
        //System.out.println("factor "+f);:}    | 
    NUMERO:f {:RESULT = f; 
        //System.out.println("EMPIEZA FACTOR");
        //System.out.println("factor "+f);:}   | 
    DECIMAL:f {:RESULT = f; 
        //System.out.println("EMPIEZA FACTOR");
        //System.out.println("factor "+f);:}   | 
    FALSE:f {:RESULT = f; 
        //System.out.println("EMPIEZA FACTOR");
        //System.out.println("factor "+f);:}   | 
    TRUE:f {:RESULT = f; 
        //System.out.println("EMPIEZA FACTOR");
        //System.out.println("factor "+f);:}  ;
/*
expresion ::= NUMERO | IDENTIFICADOR | PARENTESIS_ABRE  expresion op_art expresion PARENTESIS_CIERRA;
*/
op_rel ::= MAYOR_QUE | MENOR_QUE | MAYOR_O_IGUAL_QUE | MENOR_O_IGUAL_QUE | DIFERENTE_QUE | SIGNO_DE_IGUAL;
op_art ::= SIGNO_DE_SUMA | SIGNO_DE_RESTA | SIGNO_DE_DIVISIÓN | SIGNO_DE_MULTIPLICACIÓN ;
op_log ::= OR | AND;


sentif::=  IF PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA sentelse;
sentelse::= ELSE LLAVE_ABRE bloquesentencias LLAVE_CIERRA |;
sentwhile::= WHILE PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA;
sentasignacion::= IDENTIFICADOR:identificador SIGNO_DE_IGUAL expresion:e PUNTOYCOMA{:
        //Buscar variable en la tabla de simbolos
        Simbolo sim = TablaSimbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sim == null) {
            JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (identificadorright+1) + ". Error sintáctico. La variable '"+identificador+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+identificador+"' no existe", identificadorright+1,SINTACTICO,
                new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA","Error sintáctico. La variable '"+identificador+"' no existe")));
            System.out.println("El identificador '"+identificador+"' no existe");
        }
        else{
            if(sim.tipo.equals("just") || sim.tipo.equals("broken"))
                VentanaPrincipal.exp = identificador +"="+(String) e;
            else{ 
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (identificadorright+1) + ". Error semantico. La variable '"+identificador+"' no de algun tipo numérico" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semantico. La variable '"+identificador+"' no de algun tipo numérico", identificadorright+1,SINTACTICO,
                new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA","Error semantico. La variable '"+identificador+"' no de algun tipo numérico")));           
            }
        }
    :};

sentcut::= CUT PUNTOYCOMA;

condicion::= expresion op_rel expresion;

metodos_parametros::=
    metodo_sin_parametros    PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA |
    metodo_un_parametro      PARENTESIS_ABRE NUMERO PARENTESIS_CIERRA PUNTOYCOMA |
    metodo_cuatro_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA |
    metodo_nueve_parametros  PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA |
    metodo_doce_parametros   PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA;

metodo_doce_parametros ::= FILLRECTANGLE | DRAWRECTANGLE;
 
metodo_nueve_parametros ::= FILLTRIANGLE | DRAWTRIANGLE;

metodo_cuatro_parametros ::=  DRAWCIRCLE | FILLCIRCLE;

metodo_un_parametro ::= SETFILAMENTTYPE | SETNEWFILAMENT |  PRINTERPORT; 

metodo_sin_parametros ::= 
    STOP |
    GETEXTRUSORX |
    GETEXTRUSORY |
    GETEXTRUSORZ |
    SLEEP |
    GETFILAMENT |
    GETFILAMENTTYPE |
    HOME |
    GETTEMPERATURE;

metodo::= METHOD IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA | MODEL IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA;

constructor::= IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA;

main::= MAIN PARENTESIS_ABRE PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA;

parametros::= parametro COMA parametros 
            | parametro |;

parametro::= t_dato IDENTIFICADOR;

parametrosa::= parametroa | parametroa COMA parametrosa;

parametroa::= IDENTIFICADOR | NUMERO;


for::= FOR PARENTESIS_ABRE sentencia_for PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA ;


sentencia_for::=
   IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA sentencia_booleana PUNTOYCOMA declaracion_for |
   JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA sentencia_booleana PUNTOYCOMA declaracion_for PUNTOYCOMA ;

declaracion_for::= 
    IDENTIFICADOR SIGNO_DE_IGUAL NUMERO |
    IDENTIFICADOR MAS_MAS | 
    MAS_MAS IDENTIFICADOR
;

sentencia_booleana::= 
    IDENTIFICADOR op_rel TRUE |
    IDENTIFICADOR op_rel FALSE |
    IDENTIFICADOR op_rel NUMERO |
    IDENTIFICADOR op_rel IDENTIFICADOR |
    IDENTIFICADOR PUNTO SAME PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA 
;

tryycatch::= CHECK LLAVE_ABRE bloquesentencias LLAVE_CIERRA TRAP PARENTESIS_ABRE IDENTIFICADOR IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA;
    
get::= GET PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA PUNTOYCOMA;

give::= GIVE PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA PUNTOYCOMA;