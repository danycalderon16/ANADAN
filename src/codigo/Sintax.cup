package codigo;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;

action code
    {:
        Hashtable table = new Hashtable();
    :};

parser code
{:

    static TablaSimbolos tablaSimbolos = new TablaSimbolos();
    static int verificarTipo = 0;
    static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
        System.out.println("EMPEZAMOS");
		new Sintax(new LexerCup(System.in)).parse();
	}
    
    private Symbol s;
    
    //public void syntax_error(Symbol s){
    //    this.s = s;
    //}

    public Symbol getS(){
        return this.s;
    }

    public void syntax_error(Symbol s){
        VentanaPrincipal.notificar_er(">Linea: "+(s.right+1)+" Error de sintaxis, cadena inesperada: "+ s.value );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        VentanaPrincipal.notificar_er(">Linea: "+(s.right+1)+" Error de sintaxis, cadena inesperada: "+ s.value );
    }

:};

terminal String IDENTIFICADOR;
terminal Integer NUMERO;
terminal String CADENA_TEXTO,TRUE, FALSE;
terminal String BROKEN,JUST, WORD, FLAG;
terminal SETFILAMENTTYPE, FILLRECTANGLE, DRAWRECTANGLE, SLEEP, FILLCIRCLE, DRAWCIRCLE,
FILLTRIANGLE, DRAWTRIANGLE, STOP, GETEXTRUSORX, GETEXTRUSORY, GETEXTRUSORZ, GETFILAMENTTYPE, SETNEWFILAMENT,
GETFILAMENT, GETTEMPERATURE, END, SAME, GET, GIVE, FOR, IF, ELSE, SELECT, EMPTY,
WHILE, CASE,  CUT, BEGIN, MODEL, DEFECT, NEW, DO, GOBACK,  HOME,
PRINTERPORT, METHOD, CHECK, TRAP, CLASS, MAIN, SIGNO_DE_IGUAL, SIGNO_DE_SUMA, SIGNO_DE_RESTA,
SIGNO_DE_MULTIPLICACIÓN, SIGNO_DE_DIVISIÓN, SIGNO_DE_RESIDUO, NOT, AND, OR, MAS_MAS,
MENOS_MENOS, MENOR_QUE, MAYOR_QUE, MENOR_O_IGUAL_QUE, MAYOR_O_IGUAL_QUE, DIFERENTE_QUE,
IGUAL_QUE, PARENTESIS_ABRE, PARENTESIS_CIERRA, LLAVE_ABRE, LLAVE_CIERRA, CORCHETE_ABRE,
CORCHETE_CIERRA, PUNTOYCOMA,  COMA,  PUNTO, 
ERROR;

non terminal String t_dato;
non terminal inicio, declaracion_for, if, if_else,
    while, do_while, for, sentencia_booleana, sentencia_for ,datos_array,continua,cuerpo,
    declaraciones,declaracion,bloquesentencias,sentencias,sentencia,expresion,
    termino,
    factor,
    sentif,
    sentelse,
    sentwhile,
    sentasignacion,
    sentcut,
    expresiondos,
    expresiontres,
    expresioncuatro,
    op_rel,
    op_art,
    op_log,
    condicion,
    condiciondos, 
    filltriangle,
    setfilamenttype,
    stop,
    getextrusorx,
    getextrusory,
    getextrusorz,
    getfilamenttype,
    setnewfilament,
    getfilament,
    gettemperature,
    drawtriangle,
    fillrectangle,
    drawrectangle,
    sleep,
    drawcircle,
    fillcircle,
    home,
    printerport,
    constructor,
    metodo,
    metodos_parametros,
    metodo_sin_parametros,
    metodo_un_parametro,
    metodo_cuatro_parametros,
    metodo_nueve_parametros,
    metodo_doce_parametros,
    parametros,
    parametrosa,
    parametro,
    main,
    llamar,
    tryycatch,
    get,
    give,
    parametroa,
    expresioncinco;

start with inicio;
inicio ::= 
    IDENTIFICADOR:nombre PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END
    {:
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :} |
    declaracion IDENTIFICADOR:nombre PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
    {:
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    IDENTIFICADOR:nombre PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
    {:
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));
            
            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    error BEGIN;

bloquesentencias::= sentencias |;

sentencias::= sentencia sentencias | sentencia;

sentencia::= declaracion | sentif | sentwhile | sentasignacion | sentcut | metodo |
            home |
            main |
            metodos_parametros|
            metodo_sin_parametros|
            metodo_un_parametro|
            metodo_cuatro_parametros|
            metodo_nueve_parametros|
            metodo_doce_parametros|
            for |
            tryycatch |
            get|
            give|
            error PUNTOYCOMA | error LLAVE_CIERRA 
; 

declaracion ::= 
   
    JUST IDENTIFICADOR:id PUNTOYCOMA   {:
        try{
            TablaSimbolos.crear(id, "just","Variable númerica");

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(id);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    WORD IDENTIFICADOR:id PUNTOYCOMA   {:
        try{
            TablaSimbolos.crear(id, "word","Variable de texto");

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(id);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    FLAG IDENTIFICADOR:id PUNTOYCOMA   {:
        try{
            TablaSimbolos.crear(id, "flag","Variable boolean");

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(id);        
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    JUST:tipo IDENTIFICADOR:nombre SIGNO_DE_IGUAL NUMERO:valor PUNTOYCOMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable numérica");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    :}|
    WORD:tipo IDENTIFICADOR:nombre SIGNO_DE_IGUAL CADENA_TEXTO:valor PUNTOYCOMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable de texto");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    :}|
    FLAG:tipo IDENTIFICADOR:nombre SIGNO_DE_IGUAL TRUE:valor PUNTOYCOMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable boolena");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    :}|
    FLAG:tipo IDENTIFICADOR:nombre SIGNO_DE_IGUAL FALSE:valor PUNTOYCOMA 
    {:
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable booleana");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    :}|
    t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL t_dato CORCHETE_ABRE NUMERO CORCHETE_CIERRA PUNTOYCOMA |
    t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL LLAVE_ABRE datos_array LLAVE_CIERRA PUNTOYCOMA |
    IDENTIFICADOR IDENTIFICADOR SIGNO_DE_IGUAL NEW IDENTIFICADOR PARENTESIS_ABRE parametrosa PARENTESIS_CIERRA PUNTOYCOMA
;

t_dato::= BROKEN|
        JUST |
        WORD |
        FLAG ;

expresion ::= 
    termino SIGNO_DE_SUMA expresion |
    termino SIGNO_DE_RESTA expresion |
    PARENTESIS_ABRE expresion PARENTESIS_CIERRA |
    termino:t {:RESULT = t; :} ;
    
termino ::= factor SIGNO_DE_MULTIPLICACIÓN factor |
    factor SIGNO_DE_DIVISIÓN factor |
    factor:f {:RESULT = f; :}  ;

factor ::= IDENTIFICADOR:f  {:RESULT = f; :}  | 
    CADENA_TEXTO:f {:RESULT = f; :}   | 
    NUMERO:f {:RESULT = f; :}   | 
    FALSE:f {:RESULT = f; :}   | 
    TRUE:f {:RESULT = f; :}  ;
/*
expresion ::= NUMERO | IDENTIFICADOR | PARENTESIS_ABRE  expresion op_art expresion PARENTESIS_CIERRA;
*/
op_rel ::= MAYOR_QUE | MENOR_QUE | MAYOR_O_IGUAL_QUE | MENOR_O_IGUAL_QUE | DIFERENTE_QUE | SIGNO_DE_IGUAL;
op_art ::= SIGNO_DE_SUMA | SIGNO_DE_RESTA | SIGNO_DE_DIVISIÓN | SIGNO_DE_MULTIPLICACIÓN ;
op_log ::= OR | AND;


sentif::=  IF PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA sentelse;
sentelse::= ELSE LLAVE_ABRE bloquesentencias LLAVE_CIERRA |;
sentwhile::= WHILE PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA;
sentasignacion::= IDENTIFICADOR:identificador SIGNO_DE_IGUAL expresion PUNTOYCOMA{:
        //Buscar variable en la tabla de simbolos
        Simbolo sim = TablaSimbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sim == null) {
            //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
            //RESULT = 0;
            System.out.println("El identificador '"+identificador+"' no existe");
        }
        else{
            //RESULT = sim.valor;
        }
    :};

sentcut::= CUT PUNTOYCOMA;

condicion::= expresion op_rel expresion;

metodos_parametros::=
    metodo_sin_parametros    PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA |
    metodo_un_parametro      PARENTESIS_ABRE NUMERO PARENTESIS_CIERRA PUNTOYCOMA |
    metodo_cuatro_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA |
    metodo_nueve_parametros  PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA |
    metodo_doce_parametros   PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA;

metodo_doce_parametros ::= FILLRECTANGLE | DRAWRECTANGLE;
 
metodo_nueve_parametros ::= FILLTRIANGLE | DRAWTRIANGLE;

metodo_cuatro_parametros ::=  DRAWCIRCLE | FILLCIRCLE;

metodo_un_parametro ::= SETFILAMENTTYPE | SETNEWFILAMENT |  PRINTERPORT; 

metodo_sin_parametros ::= 
    STOP |
    GETEXTRUSORX |
    GETEXTRUSORY |
    GETEXTRUSORZ |
    SLEEP |
    GETFILAMENT |
    GETFILAMENTTYPE |
    HOME |
    GETTEMPERATURE;

metodo::= METHOD IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA | MODEL IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA;

constructor::= IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA;

main::= MAIN PARENTESIS_ABRE PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA;

parametros::= parametro COMA parametros 
            | parametro |;

parametro::= t_dato IDENTIFICADOR;

parametrosa::= parametroa | parametroa COMA parametrosa;

parametroa::= IDENTIFICADOR | NUMERO;


for::= FOR PARENTESIS_ABRE sentencia_for PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA ;


sentencia_for::=
   IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA sentencia_booleana PUNTOYCOMA declaracion_for |
   JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA sentencia_booleana PUNTOYCOMA declaracion_for PUNTOYCOMA ;

declaracion_for::= 
    IDENTIFICADOR SIGNO_DE_IGUAL NUMERO |
    IDENTIFICADOR MAS_MAS | 
    MAS_MAS IDENTIFICADOR
;

sentencia_booleana::= 
    IDENTIFICADOR op_rel TRUE |
    IDENTIFICADOR op_rel FALSE |
    IDENTIFICADOR op_rel NUMERO |
    IDENTIFICADOR op_rel IDENTIFICADOR |
    IDENTIFICADOR PUNTO SAME PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA 
;

tryycatch::= CHECK LLAVE_ABRE bloquesentencias LLAVE_CIERRA TRAP PARENTESIS_ABRE IDENTIFICADOR IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA;
    
get::= GET PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA PUNTOYCOMA;

give::= GIVE PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA PUNTOYCOMA;