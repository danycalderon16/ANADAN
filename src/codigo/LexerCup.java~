/* The following code was generated by JFlex 1.4.3 on 12/09/21 20:20 */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/09/21 20:20 from the specification file
 * <tt>C:/ANADAN/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  0,  0,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4, 39,  6,  0, 51, 38, 40,  0, 44, 45, 37, 35, 32, 36, 33,  5, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 50, 42, 34, 43, 52, 
     0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 48,  0, 49,  0,  1, 
     0, 13, 30, 19, 21,  8, 10, 20, 28, 11, 29, 31, 12, 14, 15, 23, 
    17,  1, 18,  7,  9, 25, 27, 22, 24, 16, 26, 46, 41, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 53, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\17\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\2\1\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\2\1\27\2\30\3\0\1\4"+
    "\1\0\1\31\1\0\14\2\1\32\16\2\1\33\6\2"+
    "\1\34\1\0\1\35\1\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\27\1\3\1\0\7\2\1\44\5\2"+
    "\1\45\3\2\1\46\3\2\1\47\1\2\1\50\12\2"+
    "\1\51\1\0\3\2\1\52\1\2\1\53\1\54\1\2"+
    "\1\55\1\56\1\2\1\57\2\2\1\60\3\2\1\61"+
    "\4\2\1\62\3\2\1\63\1\2\1\64\2\2\2\0"+
    "\3\2\1\65\1\66\3\2\1\67\1\2\1\70\1\2"+
    "\1\71\1\72\7\2\1\73\1\74\1\2\1\51\1\0"+
    "\2\2\1\75\3\2\1\76\4\2\1\77\1\100\3\2"+
    "\1\101\1\30\50\2\1\102\6\2\1\103\4\2\1\104"+
    "\2\2\1\105\4\2\1\106\1\2\1\107\1\110\1\111"+
    "\6\2\1\112\2\2\1\113\1\114\1\2\1\115\1\116"+
    "\1\2\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\66\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\66"+
    "\0\66\0\u04a4\0\u04da\0\u0510\0\u010e\0\66\0\u0546\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\330"+
    "\0\u010e\0\u010e\0\u0762\0\66\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\154\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\154\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\66"+
    "\0\u06c0\0\66\0\u0e8e\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\154\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\154\0\u11ee\0\u1224\0\u125a\0\154\0\u1290\0\u12c6"+
    "\0\u12fc\0\154\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\154\0\u16c8\0\154\0\154\0\u16fe"+
    "\0\154\0\154\0\u1734\0\154\0\u176a\0\u17a0\0\154\0\u17d6"+
    "\0\u180c\0\u1842\0\154\0\u1878\0\u18ae\0\u18e4\0\u191a\0\154"+
    "\0\u1950\0\u1986\0\u19bc\0\154\0\u19f2\0\154\0\u1a28\0\u1a5e"+
    "\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\154\0\154\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\154\0\u1c44\0\154\0\u1c7a\0\154\0\154"+
    "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\154"+
    "\0\154\0\u1e2a\0\u1a94\0\u1e60\0\u1e96\0\u1ecc\0\154\0\u1f02"+
    "\0\u1f38\0\u1f6e\0\154\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\154"+
    "\0\154\0\u207c\0\u20b2\0\u20e8\0\154\0\u211e\0\u2154\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a"+
    "\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea"+
    "\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a"+
    "\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\154\0\u29c4"+
    "\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\154\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\154\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8"+
    "\0\u2cee\0\u2d24\0\154\0\u2d5a\0\154\0\154\0\154\0\u2d90"+
    "\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\154\0\u2ed4\0\u2f0a"+
    "\0\154\0\154\0\u2f40\0\154\0\154\0\u2f76\0\154\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\2\3\1\16\1\17\1\3"+
    "\1\20\1\3\1\21\1\22\1\23\1\24\5\3\1\25"+
    "\1\26\1\27\1\3\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\3\2\67\0"+
    "\1\3\1\53\1\54\3\0\31\3\1\0\1\55\25\0"+
    "\1\56\1\4\4\0\31\56\1\0\1\57\25\0\1\56"+
    "\1\0\1\60\3\0\31\56\26\0\5\61\1\62\37\61"+
    "\1\62\20\61\6\63\1\64\54\63\1\65\2\63\1\0"+
    "\1\3\1\53\1\54\3\0\1\3\1\66\1\67\2\3"+
    "\1\70\1\71\22\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\5\3\1\72\1\3\1\73\1\74\20\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\13\3"+
    "\1\75\15\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\4\3\1\76\1\77\1\100\11\3\1\101\10\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\3\3"+
    "\1\102\25\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\1\3\1\103\4\3\1\104\11\3\1\105\10\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\1\3"+
    "\1\106\27\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\13\3\1\107\15\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\5\3\1\110\1\111\13\3\1\112"+
    "\2\3\1\113\3\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\1\3\1\114\2\3\1\115\13\3\1\116"+
    "\10\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\1\3\1\117\11\3\1\120\4\3\1\121\10\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\20\3\1\122"+
    "\4\3\1\123\3\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\20\3\1\124\10\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\22\3\1\125\6\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\1\3\1\126"+
    "\11\3\1\127\15\3\1\0\1\55\66\0\1\130\24\0"+
    "\1\131\1\4\4\0\31\131\3\0\1\132\1\133\22\0"+
    "\1\131\1\4\4\0\31\131\3\0\1\133\1\134\63\0"+
    "\1\135\73\0\1\136\66\0\1\137\56\0\1\140\65\0"+
    "\1\141\24\0\2\53\4\0\31\53\1\0\1\55\25\0"+
    "\1\142\1\0\1\54\3\0\31\142\27\0\2\55\4\0"+
    "\31\55\1\0\1\55\25\0\2\56\4\0\31\56\30\0"+
    "\1\143\63\0\6\63\1\64\65\63\1\64\41\63\1\144"+
    "\15\63\1\0\1\3\1\53\1\54\3\0\2\3\1\145"+
    "\2\3\1\146\23\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\20\3\1\147\10\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\1\3\1\150\27\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\7\3\1\151"+
    "\21\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\1\152\30\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\12\3\1\153\16\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\16\3\1\154\12\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\6\3\1\155\13\3"+
    "\1\156\6\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\5\3\1\157\23\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\6\3\1\160\22\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\5\3\1\161\23\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\13\3"+
    "\1\162\15\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\2\3\1\163\26\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\4\3\1\164\24\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\16\3\1\165\12\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\17\3"+
    "\1\166\11\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\4\3\1\167\24\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\6\3\1\170\22\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\1\171\30\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\2\3\1\172"+
    "\26\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\1\3\1\173\27\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\2\3\1\174\26\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\24\3\1\175\4\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\27\3\1\176"+
    "\1\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\3\3\1\177\25\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\6\3\1\200\22\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\13\3\1\201\15\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\4\3\1\202"+
    "\24\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\7\3\1\203\21\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\1\204\30\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\15\3\1\205\13\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\20\3\1\206\10\3"+
    "\1\0\1\55\26\0\1\207\64\0\1\142\5\0\31\142"+
    "\27\0\1\55\1\143\4\0\31\55\1\0\1\55\24\0"+
    "\6\63\1\64\55\63\1\210\1\63\1\0\1\3\1\53"+
    "\1\54\3\0\3\3\1\211\4\3\1\212\20\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\1\3\1\213"+
    "\27\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\12\3\1\214\16\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\1\3\1\215\27\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\1\3\1\216\27\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\1\3\1\217"+
    "\27\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\2\3\1\220\26\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\12\3\1\221\16\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\1\3\1\222\27\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\5\3\1\223"+
    "\23\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\15\3\1\224\13\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\1\225\30\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\25\3\1\226\3\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\10\3\1\227\20\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\1\3"+
    "\1\230\27\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\10\3\1\231\20\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\1\232\30\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\1\3\1\233\27\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\14\3\1\234"+
    "\14\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\1\3\1\235\1\236\1\237\25\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\1\3\1\240\27\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\6\3\1\241"+
    "\22\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\1\3\1\242\27\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\17\3\1\243\11\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\16\3\1\244\12\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\5\3\1\245"+
    "\23\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\1\3\1\246\27\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\2\3\1\244\26\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\4\3\1\247\24\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\30\3\1\250"+
    "\1\0\1\55\26\0\1\207\36\0\1\251\24\0\6\63"+
    "\1\64\56\63\1\252\1\0\1\3\1\53\1\54\3\0"+
    "\4\3\1\253\24\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\1\3\1\254\27\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\14\3\1\255\14\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\12\3\1\256"+
    "\16\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\11\3\1\257\17\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\2\3\1\260\10\3\1\261\1\262\14\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\1\3"+
    "\1\263\27\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\20\3\1\264\10\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\5\3\1\265\23\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\2\3\1\266\26\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\1\267"+
    "\30\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\30\3\1\270\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\21\3\1\271\7\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\1\3\1\272\27\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\4\3\1\273\24\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\14\3"+
    "\1\274\14\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\14\3\1\275\14\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\13\3\1\276\1\277\14\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\1\3\1\300"+
    "\27\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\10\3\1\301\20\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\1\3\1\302\27\3\1\0\1\55\26\0"+
    "\1\303\63\0\6\63\1\64\37\63\1\304\17\63\1\0"+
    "\1\3\1\53\1\54\3\0\5\3\1\305\23\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\17\3\1\306"+
    "\11\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\2\3\1\307\26\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\13\3\1\310\15\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\1\3\1\311\27\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\4\3\1\312"+
    "\24\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\16\3\1\313\12\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\1\3\1\314\27\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\2\3\1\315\26\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\7\3\1\316"+
    "\21\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\5\3\1\317\23\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\30\3\1\320\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\2\3\1\321\26\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\1\3\1\322\1\323"+
    "\26\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\4\3\1\324\24\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\10\3\1\325\20\3\1\0\1\55\24\0"+
    "\1\63\1\326\4\63\1\64\31\326\26\63\1\0\1\3"+
    "\1\53\1\54\3\0\6\3\1\327\22\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\3\3\1\330\25\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\4\3"+
    "\1\331\24\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\14\3\1\332\14\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\13\3\1\333\15\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\13\3\1\334\15\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\13\3"+
    "\1\335\15\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\12\3\1\336\16\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\6\3\1\337\22\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\14\3\1\340\14\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\13\3"+
    "\1\341\15\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\13\3\1\342\15\3\1\0\1\55\24\0\1\63"+
    "\2\326\3\63\1\64\31\326\26\63\1\0\1\3\1\53"+
    "\1\54\3\0\7\3\1\343\21\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\4\3\1\344\24\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\6\3\1\345"+
    "\22\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\2\3\1\346\26\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\14\3\1\347\14\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\12\3\1\350\16\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\22\3\1\351"+
    "\6\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\1\3\1\352\27\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\7\3\1\353\21\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\2\3\1\354\26\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\4\3\1\355"+
    "\24\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\14\3\1\356\14\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\1\3\1\357\27\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\5\3\1\360\23\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\10\3\1\361"+
    "\20\3\1\0\1\55\25\0\1\3\1\53\1\54\3\0"+
    "\6\3\1\362\22\3\1\0\1\55\25\0\1\3\1\53"+
    "\1\54\3\0\5\3\1\363\23\3\1\0\1\55\25\0"+
    "\1\3\1\53\1\54\3\0\20\3\1\364\10\3\1\0"+
    "\1\55\25\0\1\3\1\53\1\54\3\0\1\365\30\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\13\3"+
    "\1\366\15\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\1\3\1\367\27\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\6\3\1\370\22\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\6\3\1\371\22\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\5\3"+
    "\1\372\23\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\10\3\1\373\20\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\6\3\1\374\22\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\15\3\1\375\13\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\10\3"+
    "\1\376\20\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\1\3\1\377\27\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\13\3\1\u0100\15\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\20\3\1\u0101\10\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\6\3"+
    "\1\u0102\22\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\10\3\1\u0103\20\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\10\3\1\u0104\20\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\10\3\1\u0105\20\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\1\3"+
    "\1\u0106\27\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\2\3\1\u0107\26\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\7\3\1\u0108\21\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\5\3\1\u0109\23\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\15\3"+
    "\1\u010a\13\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\2\3\1\u010b\26\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\13\3\1\u010c\15\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\2\3\1\u010d\26\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\2\3"+
    "\1\u010e\26\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\15\3\1\u010f\13\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\15\3\1\u0110\13\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\2\3\1\u0111\26\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\1\3"+
    "\1\u0112\27\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\1\3\1\u0113\27\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\5\3\1\u0114\23\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\11\3\1\u0115\7\3"+
    "\1\u0116\1\3\1\u0117\5\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\22\3\1\u0118\6\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\2\3\1\u0119\26\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\5\3"+
    "\1\u011a\23\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\5\3\1\u011b\23\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\11\3\1\u011c\17\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\10\3\1\u011d\20\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\1\3"+
    "\1\u011e\27\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\13\3\1\u011f\15\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\11\3\1\u0120\17\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\1\3\1\u0121\27\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\1\3"+
    "\1\u0122\27\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\12\3\1\u0123\16\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\2\3\1\u0124\26\3\1\0\1\55"+
    "\25\0\1\3\1\53\1\54\3\0\1\3\1\u0125\27\3"+
    "\1\0\1\55\25\0\1\3\1\53\1\54\3\0\12\3"+
    "\1\u0126\16\3\1\0\1\55\25\0\1\3\1\53\1\54"+
    "\3\0\1\3\1\u0127\27\3\1\0\1\55\25\0\1\3"+
    "\1\53\1\54\3\0\1\3\1\u0128\27\3\1\0\1\55"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12204];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\21\1\2\11\4\1\1\11"+
    "\5\1\7\11\4\1\3\0\1\1\1\0\1\11\1\0"+
    "\42\1\1\11\1\0\1\11\1\0\6\11\2\1\1\0"+
    "\43\1\1\0\40\1\2\0\31\1\1\0\144\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return new Symbol(sym.Llave_Abre, yychar, yyline, yytext());
          }
        case 81: break;
        case 35: 
          { return new Symbol(sym.Mayor_o_igual_que, yychar, yyline, yytext());
          }
        case 82: break;
        case 76: 
          { return new Symbol(sym.Drawtriangle, yychar, yyline, yytext());
          }
        case 83: break;
        case 22: 
          { return new Symbol(sym.PuntoYComa, yychar, yyline, yytext());
          }
        case 84: break;
        case 40: 
          { return new Symbol(sym.Get, yychar, yyline, yytext());
          }
        case 85: break;
        case 53: 
          { return new Symbol(sym.Sleep, yychar, yyline, yytext());
          }
        case 86: break;
        case 37: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 87: break;
        case 61: 
          { return new Symbol(sym.Select, yychar, yyline, yytext());
          }
        case 88: break;
        case 50: 
          { return new Symbol(sym.Give, yychar, yyline, yytext());
          }
        case 89: break;
        case 42: 
          { return new Symbol(sym.Stop, yychar, yyline, yytext());
          }
        case 90: break;
        case 14: 
          { return new Symbol(sym.Menor_que, yychar, yyline, yytext());
          }
        case 91: break;
        case 8: 
          { return new Symbol(sym.Signo_de_igual, yychar, yyline, yytext());
          }
        case 92: break;
        case 20: 
          { return new Symbol(sym.Corchete_Abre, yychar, yyline, yytext());
          }
        case 93: break;
        case 77: 
          { return new Symbol(sym.Setnewfilament, yychar, yyline, yytext());
          }
        case 94: break;
        case 70: 
          { return new Symbol(sym.Filltriangle, yychar, yyline, yytext());
          }
        case 95: break;
        case 41: 
          { return new Symbol(sym.NUMERO_ERRONEO, yychar, yyline, yytext());
          }
        case 96: break;
        case 45: 
          { return new Symbol(sym.Trap, yychar, yyline, yytext());
          }
        case 97: break;
        case 29: 
          { return new Symbol(sym.Mas_Mas, yychar, yyline, yytext());
          }
        case 98: break;
        case 30: 
          { return new Symbol(sym.Menos_Menos, yychar, yyline, yytext());
          }
        case 99: break;
        case 6: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 100: break;
        case 48: 
          { return new Symbol(sym.Main, yychar, yyline, yytext());
          }
        case 101: break;
        case 16: 
          { return new Symbol(sym.Parentesis_Abre, yychar, yyline, yytext());
          }
        case 102: break;
        case 72: 
          { return new Symbol(sym.Getextrusorx, yychar, yyline, yytext());
          }
        case 103: break;
        case 4: 
          { /*Ignore*/
          }
        case 104: break;
        case 68: 
          { return new Symbol(sym.Printerport, yychar, yyline, yytext());
          }
        case 105: break;
        case 52: 
          { return new Symbol(sym.Home, yychar, yyline, yytext());
          }
        case 106: break;
        case 56: 
          { return new Symbol(sym.Model, yychar, yyline, yytext());
          }
        case 107: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline,new Integer(yytext()));
          }
        case 108: break;
        case 65: 
          { return new Symbol(sym.Broken, yychar, yyline, yytext());
          }
        case 109: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 110: break;
        case 51: 
          { return new Symbol(sym.Just, yychar, yyline, yytext());
          }
        case 111: break;
        case 47: 
          { return new Symbol(sym.Flag, yychar, yyline, yytext());
          }
        case 112: break;
        case 13: 
          { return new Symbol(sym.NOT, yychar, yyline, yytext());
          }
        case 113: break;
        case 23: 
          { return new Symbol(sym.MAYUSCULAS_EN_CADENA, yychar, yyline, yytext());
          }
        case 114: break;
        case 57: 
          { return new Symbol(sym.Class, yychar, yyline, yytext());
          }
        case 115: break;
        case 49: 
          { return new Symbol(sym.Case, yychar, yyline, yytext());
          }
        case 116: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 117: break;
        case 28: 
          { return new Symbol(sym.Igual_que, yychar, yyline, yytext());
          }
        case 118: break;
        case 44: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 119: break;
        case 71: 
          { return new Symbol(sym.Getextrusory, yychar, yyline, yytext());
          }
        case 120: break;
        case 15: 
          { return new Symbol(sym.Mayor_que, yychar, yyline, yytext());
          }
        case 121: break;
        case 46: 
          { return new Symbol(sym.True, yychar, yyline, yytext());
          }
        case 122: break;
        case 38: 
          { return new Symbol(sym.New, yychar, yyline, yytext());
          }
        case 123: break;
        case 58: 
          { return new Symbol(sym.Check, yychar, yyline, yytext());
          }
        case 124: break;
        case 60: 
          { return new Symbol(sym.Begin, yychar, yyline, yytext());
          }
        case 125: break;
        case 24: 
          { return new Symbol(sym.MAL_NOMBRE_PARA_IDENTIFICADOR, yychar, yyline, yytext());
          }
        case 126: break;
        case 32: 
          { return new Symbol(sym.AND, yychar, yyline, yytext());
          }
        case 127: break;
        case 11: 
          { return new Symbol(sym.Signo_de_Multiplicación, yychar, yyline, yytext());
          }
        case 128: break;
        case 25: 
          { return new Symbol(sym.CADENA_TEXTO,      yychar, yyline, yytext());
          }
        case 129: break;
        case 66: 
          { return new Symbol(sym.Fillcircle, yychar, yyline, yytext());
          }
        case 130: break;
        case 55: 
          { return new Symbol(sym.False, yychar, yyline, yytext());
          }
        case 131: break;
        case 19: 
          { return new Symbol(sym.Llave_Cierra, yychar, yyline, yytext());
          }
        case 132: break;
        case 26: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 133: break;
        case 5: 
          { return new Symbol(sym.Signo_de_División, yychar, yyline, yytext());
          }
        case 134: break;
        case 73: 
          { return new Symbol(sym.Getextrusorz, yychar, yyline, yytext());
          }
        case 135: break;
        case 43: 
          { return new Symbol(sym.Same, yychar, yyline, yytext());
          }
        case 136: break;
        case 74: 
          { return new Symbol(sym.Fillrectangle, yychar, yyline, yytext());
          }
        case 137: break;
        case 7: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 138: break;
        case 64: 
          { return new Symbol(sym.Defect, yychar, yyline, yytext());
          }
        case 139: break;
        case 39: 
          { return new Symbol(sym.Cut, yychar, yyline, yytext());
          }
        case 140: break;
        case 34: 
          { return new Symbol(sym.Menor_o_igual_que, yychar, yyline, yytext());
          }
        case 141: break;
        case 67: 
          { return new Symbol(sym.Drawcircle, yychar, yyline, yytext());
          }
        case 142: break;
        case 69: 
          { return new Symbol(sym.Getfilament, yychar, yyline, yytext());
          }
        case 143: break;
        case 27: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 144: break;
        case 62: 
          { return new Symbol(sym.Method, yychar, yyline, yytext());
          }
        case 145: break;
        case 12: 
          { return new Symbol(sym.Signo_de_Residuo, yychar, yyline, yytext());
          }
        case 146: break;
        case 9: 
          { return new Symbol(sym.Signo_de_Suma, yychar, yyline, yytext());
          }
        case 147: break;
        case 63: 
          { return new Symbol(sym.Goback, yychar, yyline, yytext());
          }
        case 148: break;
        case 17: 
          { return new Symbol(sym.Parentesis_Cierra, yychar, yyline, yytext());
          }
        case 149: break;
        case 79: 
          { return new Symbol(sym.Setfilamenttype, yychar, yyline, yytext());
          }
        case 150: break;
        case 80: 
          { return new Symbol(sym.Getfilamenttype, yychar, yyline, yytext());
          }
        case 151: break;
        case 36: 
          { return new Symbol(sym.End, yychar, yyline, yytext());
          }
        case 152: break;
        case 54: 
          { return new Symbol(sym.Empty, yychar, yyline, yytext());
          }
        case 153: break;
        case 33: 
          { return new Symbol(sym.OR, yychar, yyline, yytext());
          }
        case 154: break;
        case 59: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 155: break;
        case 21: 
          { return new Symbol(sym.Corchete_Cierra, yychar, yyline, yytext());
          }
        case 156: break;
        case 78: 
          { return new Symbol(sym.Gettemperature, yychar, yyline, yytext());
          }
        case 157: break;
        case 75: 
          { return new Symbol(sym.Drawrectangle, yychar, yyline, yytext());
          }
        case 158: break;
        case 10: 
          { return new Symbol(sym.Signo_de_Resta, yychar, yyline, yytext());
          }
        case 159: break;
        case 31: 
          { return new Symbol(sym.Diferente_que, yychar, yyline, yytext());
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
