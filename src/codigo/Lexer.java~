/* The following code was generated by JFlex 1.4.3 on 14/10/21 10:51 PM */

package codigo;
import java.io.*;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/10/21 10:51 PM from the specification file
 * <tt>C:/ANADAN/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\2\0\1\3\22\0\1\3\1\53\1\12\1\0"+
    "\1\13\1\17\1\14\1\0\1\57\1\60\1\52\1\6\1\3\1\7"+
    "\1\10\1\5\12\2\1\0\1\65\1\55\1\51\1\56\1\15\1\0"+
    "\32\4\1\63\1\0\1\64\1\11\1\1\1\0\1\32\1\47\1\37"+
    "\1\23\1\25\1\27\1\40\1\45\1\30\1\46\1\50\1\31\1\33"+
    "\1\34\1\21\1\36\1\1\1\22\1\24\1\26\1\42\1\44\1\20"+
    "\1\41\1\35\1\43\1\61\1\54\1\62\101\0\1\16\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\17\3\1\15"+
    "\1\16\1\17\1\2\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\3\1\31\1\32\2\1"+
    "\1\32\2\0\1\5\1\4\1\33\3\1\1\34\1\1"+
    "\1\0\1\35\1\0\1\36\2\3\1\37\16\3\1\40"+
    "\20\3\1\41\1\42\1\43\1\44\1\45\1\31\1\46"+
    "\2\4\1\0\13\3\1\47\2\3\1\50\6\3\1\51"+
    "\3\3\1\52\2\3\1\53\5\3\2\1\1\0\1\54"+
    "\6\3\1\55\1\3\1\56\1\57\1\3\1\60\1\61"+
    "\1\3\1\62\3\3\1\63\2\3\1\64\5\3\1\65"+
    "\1\66\1\67\2\3\2\4\1\0\1\70\7\3\1\71"+
    "\1\72\3\3\1\73\1\74\2\3\1\75\1\76\5\3"+
    "\1\77\1\1\1\0\3\3\1\100\2\3\1\101\3\3"+
    "\1\102\1\3\1\103\3\3\1\104\1\4\1\32\46\3"+
    "\1\105\4\3\1\106\12\3\1\107\2\3\1\110\1\3"+
    "\1\111\3\3\1\112\1\113\1\114\1\115\2\3\1\116"+
    "\2\3\1\117\3\3\1\120\1\121\1\3\1\122\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\66\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u0144\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u010e\0\u0144\0\u0144\0\u083a\0\u0870\0\u0870\0\u01e6\0\u021c"+
    "\0\u0870\0\u08a6\0\u08dc\0\66\0\u0912\0\66\0\u0948\0\u097e"+
    "\0\154\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\154"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\66\0\66\0\66\0\66\0\66\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\154\0\u1368\0\u139e"+
    "\0\154\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\154"+
    "\0\u1518\0\u154e\0\u1584\0\154\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\154"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\154\0\u1950"+
    "\0\154\0\154\0\u1986\0\154\0\154\0\u19bc\0\154\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\154\0\u1a94\0\u1aca\0\154\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\154\0\154\0\154\0\u1c0e\0\u1c44"+
    "\0\u1c7a\0\u17a0\0\u1cb0\0\154\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\154\0\154\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\154\0\154\0\u1f02\0\u1f38\0\154\0\154\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\u2046\0\154\0\u207c\0\u20b2\0\u20e8\0\u211e"+
    "\0\u2154\0\154\0\u218a\0\u21c0\0\154\0\u21f6\0\u222c\0\u2262"+
    "\0\154\0\u2298\0\154\0\u22ce\0\u2304\0\u233a\0\154\0\u207c"+
    "\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea"+
    "\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a"+
    "\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa"+
    "\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\154"+
    "\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\154\0\u2c82\0\u2cb8\0\u2cee"+
    "\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\154"+
    "\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\154\0\u2f76\0\u2fac\0\u2fe2"+
    "\0\154\0\154\0\154\0\154\0\u3018\0\u304e\0\154\0\u3084"+
    "\0\u30ba\0\154\0\u30f0\0\u3126\0\u315c\0\154\0\154\0\u3192"+
    "\0\154\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\2\2\1\16\1\17"+
    "\2\3\1\20\1\21\1\22\1\23\1\24\1\25\2\3"+
    "\1\26\1\27\1\3\1\30\1\31\1\32\4\3\1\33"+
    "\1\34\1\35\1\3\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\67\0\1\3\1\53\1\0\1\54\13\0\31\3\16\0"+
    "\1\55\1\4\5\0\1\56\1\57\6\0\31\55\20\0"+
    "\1\5\63\0\1\60\2\0\1\61\13\0\31\60\15\0"+
    "\5\62\1\63\44\62\1\63\13\62\2\0\1\64\3\0"+
    "\1\65\1\66\1\67\1\70\56\0\1\64\3\0\1\66"+
    "\1\71\1\67\1\70\56\0\1\67\5\0\2\67\56\0"+
    "\1\70\5\0\1\72\1\70\54\0\12\73\1\74\1\75"+
    "\52\73\14\0\1\76\52\0\1\3\1\53\1\0\1\54"+
    "\13\0\1\3\1\77\23\3\1\100\3\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\1\3\1\101\1\102\2\3"+
    "\1\103\23\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\5\3\1\104\1\105\2\3\1\106\1\107\16\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\11\3\1\110\1\3"+
    "\1\111\1\112\14\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\2\3\1\113\26\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\1\3\1\114\6\3\1\115\1\116\1\117"+
    "\16\3\16\0\1\3\1\53\1\0\1\54\13\0\7\3"+
    "\1\120\21\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\1\3\1\121\3\3\1\122\4\3\1\123\16\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\5\3\1\124\23\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\2\3\1\125"+
    "\26\3\16\0\1\3\1\53\1\0\1\54\13\0\11\3"+
    "\1\126\1\127\7\3\1\130\2\3\1\131\3\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\1\3\1\132\3\3"+
    "\1\133\2\3\1\134\20\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\1\3\1\135\27\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\22\3\1\136\6\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\2\3\1\137\2\3\1\140"+
    "\23\3\66\0\1\141\65\0\1\142\70\0\1\143\62\0"+
    "\1\144\65\0\1\145\15\0\2\53\15\0\31\53\16\0"+
    "\1\146\2\0\1\54\13\0\31\146\16\0\1\55\16\0"+
    "\31\55\16\0\1\147\1\150\5\0\1\67\1\72\6\0"+
    "\31\147\17\0\1\151\5\0\1\72\1\70\55\0\2\60"+
    "\15\0\31\60\17\0\1\64\5\0\1\56\1\57\56\0"+
    "\1\67\3\0\2\66\2\67\55\0\1\147\1\72\5\0"+
    "\1\67\1\72\6\0\31\147\15\0\12\73\1\74\65\73"+
    "\1\74\1\73\1\152\51\73\1\0\1\3\1\53\1\0"+
    "\1\54\13\0\2\3\1\153\26\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\10\3\1\154\20\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\12\3\1\155\16\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\7\3\1\156\21\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\6\3\1\157"+
    "\2\3\1\160\17\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\1\3\1\161\27\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\5\3\1\162\23\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\13\3\1\163\15\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\4\3\1\164\24\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\16\3\1\165\12\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\3\3\1\166"+
    "\25\3\16\0\1\3\1\53\1\0\1\54\13\0\12\3"+
    "\1\167\7\3\1\170\6\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\2\3\1\171\26\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\11\3\1\172\17\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\12\3\1\173\16\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\11\3\1\174\17\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\3\3\1\175"+
    "\25\3\16\0\1\3\1\53\1\0\1\54\13\0\6\3"+
    "\1\176\22\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\10\3\1\177\20\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\1\200\30\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\10\3\1\201\20\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\12\3\1\202\16\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\4\3\1\203\24\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\6\3\1\204\22\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\5\3\1\205\23\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\27\3\1\206"+
    "\1\3\16\0\1\3\1\53\1\0\1\54\13\0\6\3"+
    "\1\207\22\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\24\3\1\210\4\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\13\3\1\211\15\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\4\3\1\212\24\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\1\3\1\213\27\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\20\3\1\214\10\3\16\0"+
    "\1\146\16\0\31\146\16\0\2\147\15\0\31\147\16\0"+
    "\1\147\1\150\5\0\1\67\1\215\6\0\31\147\17\0"+
    "\1\151\5\0\1\216\1\70\54\0\12\73\1\74\2\73"+
    "\1\217\50\73\1\0\1\3\1\53\1\0\1\54\13\0"+
    "\3\3\1\220\25\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\11\3\1\221\17\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\1\222\30\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\5\3\1\223\23\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\7\3\1\224\4\3\1\225\14\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\5\3\1\226"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\16\3"+
    "\1\227\12\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\5\3\1\230\23\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\5\3\1\231\23\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\5\3\1\232\23\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\6\3\1\233\22\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\16\3\1\234\12\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\5\3\1\235\23\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\11\3\1\236"+
    "\17\3\16\0\1\3\1\53\1\0\1\54\13\0\20\3"+
    "\1\237\10\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\4\3\1\240\24\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\5\3\1\241\23\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\25\3\1\242\3\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\14\3\1\243\14\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\14\3\1\244\14\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\4\3\1\245\24\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\5\3\1\246"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\17\3"+
    "\1\247\11\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\12\3\1\250\16\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\5\3\1\251\1\252\1\253\21\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\5\3\1\254\23\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\5\3\1\255\23\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\6\3\1\256"+
    "\22\3\16\0\1\3\1\53\1\0\1\54\13\0\30\3"+
    "\1\257\16\0\1\3\1\53\1\0\1\54\13\0\10\3"+
    "\1\260\20\3\16\0\1\147\1\261\5\0\1\67\1\72"+
    "\6\0\31\147\16\0\1\147\1\262\5\0\1\67\1\72"+
    "\6\0\31\147\15\0\12\73\1\74\3\73\1\263\47\73"+
    "\1\0\1\3\1\53\1\0\1\54\13\0\5\3\1\264"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\2\3"+
    "\1\265\3\3\1\266\10\3\1\267\11\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\17\3\1\270\11\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\10\3\1\271\20\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\5\3\1\272"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\17\3"+
    "\1\273\11\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\16\3\1\274\12\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\15\3\1\275\13\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\2\3\1\276\3\3\1\277\10\3\1\300"+
    "\11\3\16\0\1\3\1\53\1\0\1\54\13\0\5\3"+
    "\1\301\23\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\11\3\1\302\17\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\1\3\1\303\27\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\6\3\1\304\22\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\4\3\1\305\24\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\30\3\1\306\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\17\3\1\307\11\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\21\3\1\310\7\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\5\3\1\311"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\10\3"+
    "\1\312\20\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\5\3\1\313\23\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\14\3\1\314\14\3\16\0\1\147\1\261\5\0"+
    "\1\315\1\72\6\0\31\147\15\0\12\73\1\74\4\73"+
    "\1\316\46\73\1\0\1\3\1\53\1\0\1\54\13\0"+
    "\5\3\1\317\23\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\2\3\1\320\26\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\10\3\1\321\20\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\6\3\1\322\22\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\11\3\1\323\17\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\1\324\30\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\6\3\1\325\22\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\5\3\1\326"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\2\3"+
    "\1\327\26\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\10\3\1\330\20\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\3\3\1\331\25\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\5\3\1\332\23\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\30\3\1\333\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\6\3\1\334\22\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\13\3\1\335\15\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\11\3\1\336\17\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\14\3\1\337"+
    "\14\3\17\0\1\340\5\0\2\67\54\0\1\73\1\341"+
    "\10\73\1\74\5\73\31\341\15\73\1\0\1\3\1\53"+
    "\1\0\1\54\13\0\17\3\1\342\11\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\10\3\1\343\20\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\2\3\1\344\26\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\12\3\1\345"+
    "\16\3\16\0\1\3\1\53\1\0\1\54\13\0\7\3"+
    "\1\346\21\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\17\3\1\347\11\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\10\3\1\350\20\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\2\3\1\351\26\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\2\3\1\352\26\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\2\3\1\353\26\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\16\3\1\354\12\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\12\3\1\355"+
    "\16\3\15\0\1\73\2\341\7\73\1\74\5\73\31\341"+
    "\15\73\1\0\1\3\1\53\1\0\1\54\13\0\6\3"+
    "\1\356\22\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\12\3\1\357\16\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\17\3\1\360\11\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\13\3\1\361\15\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\10\3\1\362\20\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\6\3\1\363\22\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\12\3\1\364\16\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\17\3\1\365"+
    "\11\3\16\0\1\3\1\53\1\0\1\54\13\0\16\3"+
    "\1\366\12\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\22\3\1\367\6\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\5\3\1\370\23\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\13\3\1\371\15\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\12\3\1\372\16\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\14\3\1\373\14\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\11\3\1\374\17\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\5\3\1\375"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\11\3"+
    "\1\376\17\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\12\3\1\377\16\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\14\3\1\u0100\14\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\11\3\1\u0101\17\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\1\3\1\u0102\27\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\4\3\1\u0103\24\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\2\3\1\u0104\26\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\5\3\1\u0105"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\14\3"+
    "\1\u0106\14\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\20\3\1\u0107\10\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\5\3\1\u0108\23\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\14\3\1\u0109\14\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\12\3\1\u010a\16\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\14\3\1\u010b\14\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\20\3\1\u010c\10\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\5\3\1\u010d"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\2\3"+
    "\1\u010e\26\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\1\3\1\u010f\27\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\12\3\1\u0110\16\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\14\3\1\u0111\14\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\20\3\1\u0112\10\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\11\3\1\u0113\17\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\6\3\1\u0114\22\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\13\3\1\u0115"+
    "\15\3\16\0\1\3\1\53\1\0\1\54\13\0\20\3"+
    "\1\u0116\10\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\11\3\1\u0117\17\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\6\3\1\u0118\22\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\2\3\1\u0119\26\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\6\3\1\u011a\22\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\6\3\1\u011b\22\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\11\3\1\u011c\17\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\5\3\1\u011d"+
    "\23\3\16\0\1\3\1\53\1\0\1\54\13\0\6\3"+
    "\1\u011e\22\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\5\3\1\u011f\23\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\11\3\1\u0120\17\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\5\3\1\u0121\23\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\15\3\1\u0122\3\3\1\u0123\1\3"+
    "\1\u0124\5\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\22\3\1\u0125\6\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\6\3\1\u0126\22\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\5\3\1\u0127\23\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\15\3\1\u0128\13\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\14\3\1\u0129\14\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\5\3\1\u012a\23\3"+
    "\16\0\1\3\1\53\1\0\1\54\13\0\2\3\1\u012b"+
    "\26\3\16\0\1\3\1\53\1\0\1\54\13\0\15\3"+
    "\1\u012c\13\3\16\0\1\3\1\53\1\0\1\54\13\0"+
    "\16\3\1\u012d\12\3\16\0\1\3\1\53\1\0\1\54"+
    "\13\0\6\3\1\u012e\22\3\16\0\1\3\1\53\1\0"+
    "\1\54\13\0\5\3\1\u012f\23\3\16\0\1\3\1\53"+
    "\1\0\1\54\13\0\16\3\1\u0130\12\3\16\0\1\3"+
    "\1\53\1\0\1\54\13\0\5\3\1\u0131\23\3\16\0"+
    "\1\3\1\53\1\0\1\54\13\0\5\3\1\u0132\23\3"+
    "\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12744];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\13\1\1\11\25\1\7\11\6\1\2\0"+
    "\10\1\1\0\1\11\1\0\1\11\42\1\5\11\4\1"+
    "\1\0\44\1\1\0\43\1\1\0\32\1\1\0\144\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    InformacionLexema c = new InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return For;
          }
        case 84: break;
        case 43: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Get;
          }
        case 85: break;
        case 6: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_División;
          }
        case 86: break;
        case 21: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Llave_Cierra;
          }
        case 87: break;
        case 22: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Corchete_Abre ;
          }
        case 88: break;
        case 61: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Class;
          }
        case 89: break;
        case 73: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Drawtriangle;
          }
        case 90: break;
        case 15: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return NOT;
          }
        case 91: break;
        case 53: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Give;
          }
        case 92: break;
        case 10: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_Exponente;
          }
        case 93: break;
        case 32: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return If;
          }
        case 94: break;
        case 69: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Drawcircle;
          }
        case 95: break;
        case 71: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Printerport;
          }
        case 96: break;
        case 29: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Cadena;
          }
        case 97: break;
        case 70: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Fillcircle;
          }
        case 98: break;
        case 59: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return False;
          }
        case 99: break;
        case 35: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return OR;
          }
        case 100: break;
        case 4: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Numero;
          }
        case 101: break;
        case 5: 
          { /*Ignore*/
          }
        case 102: break;
        case 68: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Broken;
          }
        case 103: break;
        case 34: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Diferente_que;
          }
        case 104: break;
        case 78: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Drawrectangle;
          }
        case 105: break;
        case 17: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Mayor_que;
          }
        case 106: break;
        case 83: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getfilamenttype;
          }
        case 107: break;
        case 77: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getextrusorz;
          }
        case 108: break;
        case 74: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Filltriangle;
          }
        case 109: break;
        case 39: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return End;
          }
        case 110: break;
        case 82: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Setfilamenttype;
          }
        case 111: break;
        case 7: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_Suma;
          }
        case 112: break;
        case 24: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return PuntoYComa;
          }
        case 113: break;
        case 54: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Home;
          }
        case 114: break;
        case 1: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return NUMERO_ERRONEO_MAS_PUNTOS;
          }
        case 115: break;
        case 9: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Punto;
          }
        case 116: break;
        case 11: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return COMILLAS_DOBLES;
          }
        case 117: break;
        case 2: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return ERROR;
          }
        case 118: break;
        case 30: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return AND;
          }
        case 119: break;
        case 42: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Cut;
          }
        case 120: break;
        case 72: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getfilament;
          }
        case 121: break;
        case 64: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Defect;
          }
        case 122: break;
        case 75: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getextrusory;
          }
        case 123: break;
        case 27: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Mas_Mas;
          }
        case 124: break;
        case 25: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return MAYUSCULAS_EN_CADENA;
          }
        case 125: break;
        case 80: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Setnewfilament;
          }
        case 126: break;
        case 37: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Mayor_o_igual_que;
          }
        case 127: break;
        case 55: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Just;
          }
        case 128: break;
        case 79: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Fillrectangle;
          }
        case 129: break;
        case 63: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Begin;
          }
        case 130: break;
        case 12: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_Residuo;
          }
        case 131: break;
        case 44: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Word;
          }
        case 132: break;
        case 26: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return MAL_NOMBRE_PARA_IDENTIFICADOR;
          }
        case 133: break;
        case 66: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Method;
          }
        case 134: break;
        case 45: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Stop;
          }
        case 135: break;
        case 8: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_Resta;
          }
        case 136: break;
        case 58: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Empty;
          }
        case 137: break;
        case 67: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Goback;
          }
        case 138: break;
        case 76: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getextrusorx;
          }
        case 139: break;
        case 18: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Parentesis_Abre;
          }
        case 140: break;
        case 57: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Sleep;
          }
        case 141: break;
        case 81: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Gettemperature;
          }
        case 142: break;
        case 28: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Menos_Menos;
          }
        case 143: break;
        case 65: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Select;
          }
        case 144: break;
        case 47: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Else;
          }
        case 145: break;
        case 56: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return While;
          }
        case 146: break;
        case 13: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_igual;
          }
        case 147: break;
        case 33: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Igual_que;
          }
        case 148: break;
        case 38: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return NUMERO_ERRONEO;
          }
        case 149: break;
        case 50: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Flag;
          }
        case 150: break;
        case 51: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Main;
          }
        case 151: break;
        case 20: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Llave_Abre;
          }
        case 152: break;
        case 36: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Menor_o_igual_que;
          }
        case 153: break;
        case 41: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return New;
          }
        case 154: break;
        case 62: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Check;
          }
        case 155: break;
        case 60: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Model;
          }
        case 156: break;
        case 52: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Case;
          }
        case 157: break;
        case 19: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Parentesis_Cierra;
          }
        case 158: break;
        case 48: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Trap;
          }
        case 159: break;
        case 31: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Do;
          }
        case 160: break;
        case 3: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Identificador;
          }
        case 161: break;
        case 23: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Corchete_Cierra;
          }
        case 162: break;
        case 14: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_Multiplicación;
          }
        case 163: break;
        case 46: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Same;
          }
        case 164: break;
        case 49: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return True;
          }
        case 165: break;
        case 16: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Menor_que;
          }
        case 166: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
