/* The following code was generated by JFlex 1.4.3 on 12/09/21 20:21 */

package codigo;
import java.io.*;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/09/21 20:21 from the specification file
 * <tt>C:/ANADAN/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\4\2\0\1\4\22\0\1\4\1\46\1\6\1\0"+
    "\1\62\1\45\1\47\1\0\1\53\1\54\1\44\1\42\1\4\1\43"+
    "\1\40\1\5\12\2\1\0\1\61\1\51\1\41\1\52\1\63\1\0"+
    "\32\3\1\57\1\0\1\60\1\0\1\1\1\0\1\21\1\36\1\26"+
    "\1\12\1\14\1\16\1\27\1\34\1\17\1\35\1\37\1\20\1\22"+
    "\1\23\1\10\1\25\1\1\1\11\1\13\1\15\1\31\1\33\1\7"+
    "\1\30\1\24\1\32\1\55\1\50\1\56\101\0\1\64\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\17\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\1\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\2\1\27\2\30\3\0\1\4\1\0"+
    "\1\31\1\0\2\2\1\32\16\2\1\33\20\2\1\34"+
    "\1\0\1\35\1\0\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\27\1\3\1\0\13\2\1\44\2\2\1\45"+
    "\6\2\1\46\3\2\1\47\2\2\1\50\5\2\1\51"+
    "\1\0\1\52\6\2\1\53\1\2\1\54\1\55\1\2"+
    "\1\56\1\57\1\2\1\60\3\2\1\61\2\2\1\62"+
    "\5\2\1\63\1\64\1\65\2\2\2\0\1\66\7\2"+
    "\1\67\1\70\3\2\1\71\1\72\2\2\1\73\1\74"+
    "\5\2\1\75\1\51\1\0\3\2\1\76\2\2\1\77"+
    "\3\2\1\100\1\2\1\101\3\2\1\102\1\30\46\2"+
    "\1\103\4\2\1\104\12\2\1\105\2\2\1\106\1\2"+
    "\1\107\3\2\1\110\1\111\1\112\1\113\2\2\1\114"+
    "\2\2\1\115\3\2\1\116\1\117\1\2\1\120\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\65"+
    "\0\u04c3\0\u04f8\0\u052d\0\u013e\0\65\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\324\0\u013e"+
    "\0\u013e\0\u0774\0\65\0\u07a9\0\u07de\0\u0813\0\152\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\152\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\65\0\u06d5"+
    "\0\65\0\u0e7e\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\152\0\u1199"+
    "\0\u11ce\0\152\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\152\0\u1341\0\u1376\0\u13ab\0\152\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\152"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\152\0\u1730"+
    "\0\152\0\152\0\u1765\0\152\0\152\0\u179a\0\152\0\u17cf"+
    "\0\u1804\0\u1839\0\152\0\u186e\0\u18a3\0\152\0\u18d8\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\152\0\152\0\152\0\u19e1\0\u1a16"+
    "\0\u1a4b\0\u1a80\0\152\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89"+
    "\0\u1bbe\0\u1bf3\0\152\0\152\0\u1c28\0\u1c5d\0\u1c92\0\152"+
    "\0\152\0\u1cc7\0\u1cfc\0\152\0\152\0\u1d31\0\u1d66\0\u1d9b"+
    "\0\u1dd0\0\u1e05\0\152\0\u1a4b\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\152\0\u1f0e\0\u1f43\0\152\0\u1f78\0\u1fad\0\u1fe2\0\152"+
    "\0\u2017\0\152\0\u204c\0\u2081\0\u20b6\0\152\0\u20eb\0\u2120"+
    "\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8"+
    "\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470"+
    "\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618"+
    "\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0"+
    "\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\152\0\u28fe\0\u2933"+
    "\0\u2968\0\u299d\0\152\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\152\0\u2be4\0\u2c19"+
    "\0\u2c4e\0\u2c83\0\152\0\u2cb8\0\u2ced\0\u2d22\0\152\0\152"+
    "\0\152\0\152\0\u2d57\0\u2d8c\0\152\0\u2dc1\0\u2df6\0\152"+
    "\0\u2e2b\0\u2e60\0\u2e95\0\152\0\152\0\u2eca\0\152\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\3\1\12\1\13\1\14\1\15\1\16\1\17\2\3"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\4\3\1\25"+
    "\1\26\1\27\1\3\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\3\2\66\0\1\3"+
    "\1\52\1\53\3\0\31\3\1\54\25\0\1\55\1\4"+
    "\4\0\31\55\1\56\25\0\1\55\1\0\1\57\3\0"+
    "\31\55\31\0\1\6\60\0\5\60\1\61\36\60\1\61"+
    "\20\60\6\62\1\63\53\62\1\64\2\62\1\0\1\3"+
    "\1\52\1\53\3\0\1\3\1\65\23\3\1\66\3\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\1\3\1\67"+
    "\1\70\2\3\1\71\23\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\5\3\1\72\1\73\2\3\1\74\1\75"+
    "\16\3\1\54\25\0\1\3\1\52\1\53\3\0\11\3"+
    "\1\76\1\3\1\77\1\100\14\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\2\3\1\101\26\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\1\3\1\102\6\3\1\103"+
    "\1\104\1\105\16\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\7\3\1\106\21\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\1\3\1\107\3\3\1\110\4\3\1\111"+
    "\16\3\1\54\25\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\112\23\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\2\3\1\113\26\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\11\3\1\114\1\115\7\3\1\116\2\3\1\117"+
    "\3\3\1\54\25\0\1\3\1\52\1\53\3\0\1\3"+
    "\1\120\3\3\1\121\2\3\1\122\20\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\1\3\1\123\27\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\22\3\1\124\6\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\2\3\1\125"+
    "\2\3\1\126\23\3\1\54\65\0\1\127\24\0\1\130"+
    "\1\4\4\0\31\130\2\0\1\131\1\132\22\0\1\130"+
    "\1\4\4\0\31\130\2\0\1\132\1\133\62\0\1\134"+
    "\72\0\1\135\65\0\1\136\55\0\1\137\64\0\1\140"+
    "\24\0\2\52\4\0\31\52\1\54\25\0\1\141\1\0"+
    "\1\53\3\0\31\141\26\0\2\54\4\0\32\54\25\0"+
    "\2\55\4\0\31\55\27\0\1\142\62\0\6\62\1\63"+
    "\64\62\1\63\40\62\1\143\15\62\1\0\1\3\1\52"+
    "\1\53\3\0\2\3\1\144\26\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\10\3\1\145\20\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\12\3\1\146\16\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\7\3\1\147\21\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\6\3\1\150"+
    "\2\3\1\151\17\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\1\3\1\152\27\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\5\3\1\153\23\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\13\3\1\154\15\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\4\3\1\155\24\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\16\3\1\156\12\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\3\3\1\157"+
    "\25\3\1\54\25\0\1\3\1\52\1\53\3\0\12\3"+
    "\1\160\7\3\1\161\6\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\2\3\1\162\26\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\11\3\1\163\17\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\12\3\1\164\16\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\11\3\1\165\17\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\3\3\1\166"+
    "\25\3\1\54\25\0\1\3\1\52\1\53\3\0\6\3"+
    "\1\167\22\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\10\3\1\170\20\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\1\171\30\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\10\3\1\172\20\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\12\3\1\173\16\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\4\3\1\174\24\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\6\3\1\175\22\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\5\3\1\176\23\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\27\3\1\177"+
    "\1\3\1\54\25\0\1\3\1\52\1\53\3\0\6\3"+
    "\1\200\22\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\24\3\1\201\4\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\13\3\1\202\15\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\4\3\1\203\24\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\1\3\1\204\27\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\20\3\1\205\10\3\1\54"+
    "\26\0\1\206\63\0\1\141\5\0\31\141\26\0\1\54"+
    "\1\142\4\0\32\54\24\0\6\62\1\63\54\62\1\207"+
    "\1\62\1\0\1\3\1\52\1\53\3\0\3\3\1\210"+
    "\25\3\1\54\25\0\1\3\1\52\1\53\3\0\11\3"+
    "\1\211\17\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\1\212\30\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\5\3\1\213\23\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\7\3\1\214\4\3\1\215\14\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\5\3\1\216\23\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\16\3\1\217\12\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\5\3\1\220"+
    "\23\3\1\54\25\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\221\23\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\5\3\1\222\23\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\6\3\1\223\22\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\16\3\1\224\12\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\5\3\1\225\23\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\11\3\1\226\17\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\20\3\1\227\10\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\4\3\1\230"+
    "\24\3\1\54\25\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\231\23\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\25\3\1\232\3\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\14\3\1\233\14\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\14\3\1\234\14\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\4\3\1\235\24\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\5\3\1\236\23\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\17\3\1\237\11\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\12\3\1\240"+
    "\16\3\1\54\25\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\241\1\242\1\243\21\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\5\3\1\244\23\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\5\3\1\245\23\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\6\3\1\246\22\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\30\3\1\247\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\10\3\1\250\20\3"+
    "\1\54\26\0\1\206\35\0\1\251\24\0\6\62\1\63"+
    "\55\62\1\252\1\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\253\23\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\2\3\1\254\3\3\1\255\10\3\1\256\11\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\17\3\1\257\11\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\10\3\1\260"+
    "\20\3\1\54\25\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\261\23\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\17\3\1\262\11\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\16\3\1\263\12\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\15\3\1\264\13\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\2\3\1\265\3\3\1\266\10\3"+
    "\1\267\11\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\5\3\1\270\23\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\11\3\1\271\17\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\1\3\1\272\27\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\6\3\1\273\22\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\4\3\1\274\24\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\30\3\1\275\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\17\3\1\276\11\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\21\3\1\277"+
    "\7\3\1\54\25\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\300\23\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\10\3\1\301\20\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\5\3\1\302\23\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\14\3\1\303\14\3\1\54\26\0\1\304"+
    "\62\0\6\62\1\63\36\62\1\305\17\62\1\0\1\3"+
    "\1\52\1\53\3\0\5\3\1\306\23\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\2\3\1\307\26\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\10\3\1\310\20\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\6\3\1\311"+
    "\22\3\1\54\25\0\1\3\1\52\1\53\3\0\11\3"+
    "\1\312\17\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\1\313\30\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\6\3\1\314\22\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\5\3\1\315\23\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\2\3\1\316\26\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\10\3\1\317\20\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\3\3\1\320\25\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\5\3\1\321\23\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\30\3\1\322"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\6\3\1\323"+
    "\22\3\1\54\25\0\1\3\1\52\1\53\3\0\13\3"+
    "\1\324\15\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\11\3\1\325\17\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\14\3\1\326\14\3\1\54\24\0\1\62\1\327"+
    "\4\62\1\63\31\327\25\62\1\0\1\3\1\52\1\53"+
    "\3\0\17\3\1\330\11\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\10\3\1\331\20\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\2\3\1\332\26\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\12\3\1\333\16\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\7\3\1\334\21\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\17\3\1\335"+
    "\11\3\1\54\25\0\1\3\1\52\1\53\3\0\10\3"+
    "\1\336\20\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\2\3\1\337\26\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\2\3\1\340\26\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\2\3\1\341\26\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\16\3\1\342\12\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\12\3\1\343\16\3\1\54"+
    "\24\0\1\62\2\327\3\62\1\63\31\327\25\62\1\0"+
    "\1\3\1\52\1\53\3\0\6\3\1\344\22\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\12\3\1\345\16\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\17\3\1\346"+
    "\11\3\1\54\25\0\1\3\1\52\1\53\3\0\13\3"+
    "\1\347\15\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\10\3\1\350\20\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\6\3\1\351\22\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\12\3\1\352\16\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\17\3\1\353\11\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\16\3\1\354\12\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\22\3\1\355\6\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\5\3\1\356"+
    "\23\3\1\54\25\0\1\3\1\52\1\53\3\0\13\3"+
    "\1\357\15\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\12\3\1\360\16\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\14\3\1\361\14\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\11\3\1\362\17\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\5\3\1\363\23\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\11\3\1\364\17\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\12\3\1\365\16\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\14\3\1\366"+
    "\14\3\1\54\25\0\1\3\1\52\1\53\3\0\11\3"+
    "\1\367\17\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\1\3\1\370\27\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\4\3\1\371\24\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\2\3\1\372\26\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\5\3\1\373\23\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\14\3\1\374\14\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\20\3\1\375\10\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\5\3\1\376"+
    "\23\3\1\54\25\0\1\3\1\52\1\53\3\0\14\3"+
    "\1\377\14\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\12\3\1\u0100\16\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\14\3\1\u0101\14\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\20\3\1\u0102\10\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\5\3\1\u0103\23\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\2\3\1\u0104\26\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\1\3\1\u0105\27\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\12\3\1\u0106"+
    "\16\3\1\54\25\0\1\3\1\52\1\53\3\0\14\3"+
    "\1\u0107\14\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\20\3\1\u0108\10\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\11\3\1\u0109\17\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\6\3\1\u010a\22\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\13\3\1\u010b\15\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\20\3\1\u010c\10\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\11\3\1\u010d\17\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\6\3\1\u010e"+
    "\22\3\1\54\25\0\1\3\1\52\1\53\3\0\2\3"+
    "\1\u010f\26\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\6\3\1\u0110\22\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\6\3\1\u0111\22\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\11\3\1\u0112\17\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\5\3\1\u0113\23\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\6\3\1\u0114\22\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\5\3\1\u0115\23\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\11\3\1\u0116"+
    "\17\3\1\54\25\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\u0117\23\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\15\3\1\u0118\3\3\1\u0119\1\3\1\u011a\5\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\22\3\1\u011b\6\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\6\3\1\u011c"+
    "\22\3\1\54\25\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\u011d\23\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\15\3\1\u011e\13\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\14\3\1\u011f\14\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\5\3\1\u0120\23\3\1\54\25\0\1\3"+
    "\1\52\1\53\3\0\2\3\1\u0121\26\3\1\54\25\0"+
    "\1\3\1\52\1\53\3\0\15\3\1\u0122\13\3\1\54"+
    "\25\0\1\3\1\52\1\53\3\0\16\3\1\u0123\12\3"+
    "\1\54\25\0\1\3\1\52\1\53\3\0\6\3\1\u0124"+
    "\22\3\1\54\25\0\1\3\1\52\1\53\3\0\5\3"+
    "\1\u0125\23\3\1\54\25\0\1\3\1\52\1\53\3\0"+
    "\16\3\1\u0126\12\3\1\54\25\0\1\3\1\52\1\53"+
    "\3\0\5\3\1\u0127\23\3\1\54\25\0\1\3\1\52"+
    "\1\53\3\0\5\3\1\u0128\23\3\1\54\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12031];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\11\4\1\1\11\5\1\7\11"+
    "\4\1\3\0\1\1\1\0\1\11\1\0\42\1\1\11"+
    "\1\0\1\11\1\0\6\11\2\1\1\0\43\1\1\0"+
    "\41\1\2\0\32\1\1\0\143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    InformacionLexema c = new InformacionLexema();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return For;
          }
        case 82: break;
        case 40: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Get;
          }
        case 83: break;
        case 5: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_División;
          }
        case 84: break;
        case 19: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Llave_Cierra;
          }
        case 85: break;
        case 20: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Corchete_Abre ;
          }
        case 86: break;
        case 59: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Class;
          }
        case 87: break;
        case 71: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Drawtriangle;
          }
        case 88: break;
        case 13: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return NOT;
          }
        case 89: break;
        case 51: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Give;
          }
        case 90: break;
        case 27: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return If;
          }
        case 91: break;
        case 67: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Drawcircle;
          }
        case 92: break;
        case 69: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Printerport;
          }
        case 93: break;
        case 25: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Cadena;
          }
        case 94: break;
        case 68: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Fillcircle;
          }
        case 95: break;
        case 57: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return False;
          }
        case 96: break;
        case 33: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return OR;
          }
        case 97: break;
        case 3: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Numero;
          }
        case 98: break;
        case 4: 
          { /*Ignore*/
          }
        case 99: break;
        case 66: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Broken;
          }
        case 100: break;
        case 31: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Diferente_que;
          }
        case 101: break;
        case 76: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Drawrectangle;
          }
        case 102: break;
        case 15: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Mayor_que;
          }
        case 103: break;
        case 81: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getfilamenttype;
          }
        case 104: break;
        case 75: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getextrusorz;
          }
        case 105: break;
        case 72: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Filltriangle;
          }
        case 106: break;
        case 36: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return End;
          }
        case 107: break;
        case 80: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Setfilamenttype;
          }
        case 108: break;
        case 9: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_Suma;
          }
        case 109: break;
        case 22: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return PuntoYComa;
          }
        case 110: break;
        case 52: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Home;
          }
        case 111: break;
        case 7: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Punto;
          }
        case 112: break;
        case 6: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return COMILLAS_DOBLES;
          }
        case 113: break;
        case 1: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return ERROR;
          }
        case 114: break;
        case 32: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return AND;
          }
        case 115: break;
        case 39: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Cut;
          }
        case 116: break;
        case 62: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Defect;
          }
        case 117: break;
        case 70: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getfilament;
          }
        case 118: break;
        case 73: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getextrusory;
          }
        case 119: break;
        case 29: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Mas_Mas;
          }
        case 120: break;
        case 23: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return MAYUSCULAS_EN_CADENA;
          }
        case 121: break;
        case 78: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Setnewfilament;
          }
        case 122: break;
        case 35: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Mayor_o_igual_que;
          }
        case 123: break;
        case 53: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Just;
          }
        case 124: break;
        case 77: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Fillrectangle;
          }
        case 125: break;
        case 61: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Begin;
          }
        case 126: break;
        case 12: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_Residuo;
          }
        case 127: break;
        case 42: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Word;
          }
        case 128: break;
        case 24: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return MAL_NOMBRE_PARA_IDENTIFICADOR;
          }
        case 129: break;
        case 64: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Method;
          }
        case 130: break;
        case 43: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Stop;
          }
        case 131: break;
        case 10: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_Resta;
          }
        case 132: break;
        case 56: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Empty;
          }
        case 133: break;
        case 65: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Goback;
          }
        case 134: break;
        case 74: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Getextrusorx;
          }
        case 135: break;
        case 16: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Parentesis_Abre;
          }
        case 136: break;
        case 55: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Sleep;
          }
        case 137: break;
        case 79: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Gettemperature;
          }
        case 138: break;
        case 30: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Menos_Menos;
          }
        case 139: break;
        case 63: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Select;
          }
        case 140: break;
        case 45: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Else;
          }
        case 141: break;
        case 54: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return While;
          }
        case 142: break;
        case 8: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_igual;
          }
        case 143: break;
        case 28: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Igual_que;
          }
        case 144: break;
        case 41: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return NUMERO_ERRONEO;
          }
        case 145: break;
        case 48: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Flag;
          }
        case 146: break;
        case 49: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Main;
          }
        case 147: break;
        case 18: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Llave_Abre;
          }
        case 148: break;
        case 34: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Menor_o_igual_que;
          }
        case 149: break;
        case 38: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return New;
          }
        case 150: break;
        case 60: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Check;
          }
        case 151: break;
        case 58: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Model;
          }
        case 152: break;
        case 50: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Case;
          }
        case 153: break;
        case 17: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Parentesis_Cierra;
          }
        case 154: break;
        case 46: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Trap;
          }
        case 155: break;
        case 26: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Do;
          }
        case 156: break;
        case 2: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Identificador;
          }
        case 157: break;
        case 21: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Corchete_Cierra;
          }
        case 158: break;
        case 11: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Signo_de_Multiplicación;
          }
        case 159: break;
        case 44: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Same;
          }
        case 160: break;
        case 47: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return True;
          }
        case 161: break;
        case 14: 
          { c.linea=yyline;c.columna=yycolumn;lexeme=yytext(); return Menor_que;
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
