/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juani
 */
public class TablaFija extends javax.swing.JFrame {

    /**
     * Creates new form TablaFija
     */
    public DefaultTableModel model;
    public TablaFija() {
        initComponents();
         this.setLocationRelativeTo(null);
          model =  (DefaultTableModel)tblFija.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmbOpcion = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFija = new javax.swing.JTable();

        setTitle("Tabla Estática");
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        cmbOpcion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elige una opción", "Operadores Relacionales", "Operadores de Agrupación", "Operadores Aritméticos", "Operadores Incrementales", "Palabras Reservadas" }));
        cmbOpcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOpcionActionPerformed(evt);
            }
        });

        tblFija.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LEXEME"
            }
        ));
        jScrollPane1.setViewportView(tblFija);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmbOpcion, 0, 292, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(cmbOpcion, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbOpcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOpcionActionPerformed
        
        model.setRowCount(0);
        switch(cmbOpcion.getSelectedItem().toString()){
            
            case "Operadores Relacionales": Operadores_Relacionales(); break;
            case "Operadores de Agrupación":Operadores_de_Agrupacion(); break;
            case "Operadores Aritméticos": Operadores_Aritmeticos(); break;
            case "Operadores Incrementales": Operadores_Incrementales(); break;
            case "Palabras Reservadas": Palabras_Reservadas(); break;
        
        }
    }//GEN-LAST:event_cmbOpcionActionPerformed
    public void Operadores_Relacionales(){
       
         model.addRow(new Object[]{"<"});
         model.addRow(new Object[]{">"});
         model.addRow(new Object[]{"<="});
         model.addRow(new Object[]{">="});
         model.addRow(new Object[]{"!="});
         model.addRow(new Object[]{"=="});   
    } 
    public void Operadores_de_Agrupacion(){
         model.addRow(new Object[]{"("});
         model.addRow(new Object[]{")"});
         model.addRow(new Object[]{"{"});
         model.addRow(new Object[]{"}"});
         model.addRow(new Object[]{"["});
         model.addRow(new Object[]{"]"});
    } 
    public void Operadores_Aritmeticos(){
         model.addRow(new Object[]{"+"});
         model.addRow(new Object[]{"-"});
         model.addRow(new Object[]{"*"});
         model.addRow(new Object[]{"/"});
         model.addRow(new Object[]{"%"});
    } 
    public void Operadores_Incrementales(){
         model.addRow(new Object[]{"++"});
         model.addRow(new Object[]{"--"});
    }  
    public void Palabras_Reservadas(){
     model.addRow(new Object[]{"begin"});
     model.addRow(new Object[]{"class"});
     model.addRow(new Object[]{"setfilamenttype"});
     model.addRow(new Object[]{"fillrectangle"});
     model.addRow(new Object[]{"drawrentangle"});
     model.addRow(new Object[]{"sleep"});
     model.addRow(new Object[]{"fillcircle"});
     model.addRow(new Object[]{"drawcircle"});
     model.addRow(new Object[]{"drawtriangle"});
     model.addRow(new Object[]{"filltriangle"});
     model.addRow(new Object[]{"stop"});
     model.addRow(new Object[]{"getextrusorx"});
     model.addRow(new Object[]{"getextrusory"});
     model.addRow(new Object[]{"getextrusorz"});
     model.addRow(new Object[]{"getfilamenttype"});
     model.addRow(new Object[]{"setnewfilament"});
     model.addRow(new Object[]{"getfilament"});
     model.addRow(new Object[]{"gettemperature"});
     model.addRow(new Object[]{"end"});
     model.addRow(new Object[]{"same"});
     model.addRow(new Object[]{"for"});
     model.addRow(new Object[]{"if"});
     model.addRow(new Object[]{"get"});
     model.addRow(new Object[]{"give"});
     model.addRow(new Object[]{"select"});
     model.addRow(new Object[]{"empty"});
     model.addRow(new Object[]{"while"});
     model.addRow(new Object[]{"case"});
     model.addRow(new Object[]{"flag"});
     model.addRow(new Object[]{"cut"});
     model.addRow(new Object[]{"just"});
     
     model.addRow(new Object[]{"model"});
     model.addRow(new Object[]{"defect"});
     model.addRow(new Object[]{"new"});
     model.addRow(new Object[]{"do"});
     model.addRow(new Object[]{"else"});
     model.addRow(new Object[]{"goback"});
     model.addRow(new Object[]{"broken"});
     model.addRow(new Object[]{"home"});
     model.addRow(new Object[]{"sleep"});
     model.addRow(new Object[]{"printerport"});
     model.addRow(new Object[]{"new"});
     model.addRow(new Object[]{"method"});
     model.addRow(new Object[]{"check"});
     model.addRow(new Object[]{"trap"});
     
     model.addRow(new Object[]{"main"});
     
     
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TablaFija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TablaFija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TablaFija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TablaFija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TablaFija().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbOpcion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblFija;
    // End of variables declaration//GEN-END:variables
}
