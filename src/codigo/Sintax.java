
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 27 16:46:17 MDT 2021
//----------------------------------------------------

package codigo;

import static codigo.VentanaPrincipal.resolverExp;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;
import java.awt.Font;
import javax.swing.JLabel;
import modelos.LabelError;
import modelos.Gramatica;
import java.awt.Color;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 27 16:46:17 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\003\010\000\002\003" +
    "\011\000\002\003\016\000\002\003\004\000\002\021\004" +
    "\000\002\021\003\000\002\021\004\000\002\021\003\000" +
    "\002\021\004\000\002\021\003\000\002\021\004\000\002" +
    "\021\003\000\002\021\004\000\002\021\003\000\002\021" +
    "\004\000\002\021\003\000\002\021\004\000\002\021\003" +
    "\000\002\021\004\000\002\021\003\000\002\021\004\000" +
    "\002\021\003\000\002\021\004\000\002\021\003\000\002" +
    "\021\004\000\002\021\003\000\002\021\004\000\002\021" +
    "\003\000\002\021\004\000\002\021\003\000\002\021\004" +
    "\000\002\021\003\000\002\021\004\000\002\021\003\000" +
    "\002\021\004\000\002\021\003\000\002\021\004\000\002" +
    "\021\003\000\002\021\004\000\002\021\003\000\002\021" +
    "\004\000\002\021\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\007\000" +
    "\002\020\007\000\002\020\007\000\002\020\007\000\002" +
    "\020\007\000\002\020\007\000\002\020\014\000\002\020" +
    "\013\000\002\020\013\000\002\020\007\000\002\020\007" +
    "\000\002\020\007\000\002\020\007\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\003\000\002\026\005\000\002" +
    "\026\005\000\002\026\003\000\002\030\005\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\003\000\002\043\003\000\002\031\011" +
    "\000\002\112\002\000\002\031\005\000\002\032\006\000" +
    "\002\032\003\000\002\033\011\000\002\034\006\000\002" +
    "\034\006\000\002\034\006\000\002\034\006\000\002\035" +
    "\004\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\002\000\002" +
    "\072\006\000\002\072\007\000\002\072\015\000\002\072" +
    "\027\000\002\072\035\000\002\077\003\000\002\077\003" +
    "\000\002\076\003\000\002\076\003\000\002\075\003\000" +
    "\002\075\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\071\012\000\002\071\007\000\002\070\011\000\002" +
    "\103\010\000\002\100\005\000\002\100\003\000\002\100" +
    "\002\000\002\102\004\000\002\101\003\000\002\101\005" +
    "\000\002\110\003\000\002\110\003\000\002\011\011\000" +
    "\002\013\011\000\002\013\012\000\002\004\002\000\002" +
    "\004\004\000\002\004\004\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\010" +
    "\000\002\105\016\000\002\106\007\000\002\107\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\016\003\012\004\013\012\005\013\011\014" +
    "\014\015\007\001\002\000\004\114\u015b\001\002\000\006" +
    "\004\u0154\114\uffbc\001\002\000\004\002\u0153\001\002\000" +
    "\006\004\u014c\114\uffb9\001\002\000\004\004\u0146\001\002" +
    "\000\006\004\u0139\114\uffbb\001\002\000\004\052\u0138\001" +
    "\002\000\006\004\022\110\023\001\002\000\006\004\015" +
    "\114\uffba\001\002\000\116\003\uffc2\004\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\047\uffc2\051\uffc2\053" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\066\uffc2\067\017" +
    "\113\uffc2\117\016\001\002\000\112\003\uffd4\004\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\047\uffd4\051" +
    "\uffd4\053\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\066\uffd4" +
    "\113\uffd4\001\002\000\004\007\020\001\002\000\114\003" +
    "\uffbd\004\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\047\uffbd\051\uffbd\053\uffbd\060\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\066\uffbd\113\uffbd\117\021\001\002\000\112\003" +
    "\uffcf\004\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\047\uffcf\051\uffcf\053\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\066\uffcf\113\uffcf\001\002\000\004\067\u012c\001" +
    "\002\000\004\111\024\001\002\000\004\052\025\001\002" +
    "\000\106\003\053\004\041\012\005\013\011\014\014\015" +
    "\007\016\076\017\070\020\066\021\031\022\073\023\042" +
    "\024\067\025\102\026\072\027\065\030\063\031\062\032" +
    "\051\033\105\034\050\035\043\040\044\041\100\042\037" +
    "\043\046\047\075\051\064\053\032\060\055\061\061\062" +
    "\052\063\060\066\045\001\002\000\112\003\ufff3\004\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\047\ufff3" +
    "\051\ufff3\053\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\066" +
    "\ufff3\113\ufff3\001\002\000\112\003\ufff9\004\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\047\ufff9\051\ufff9" +
    "\053\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\066\ufff9\113" +
    "\ufff9\001\002\000\112\003\uffed\004\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\047\uffed\051\uffed\053\uffed" +
    "\060\uffed\061\uffed\062\uffed\063\uffed\066\uffed\113\uffed\001" +
    "\002\000\114\003\uff7b\004\uff7b\012\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023" +
    "\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\040\uff7b\041" +
    "\uff7b\042\uff7b\043\uff7b\047\uff7b\051\uff7b\053\uff7b\060\uff7b" +
    "\061\uff7b\062\uff7b\063\uff7b\066\uff7b\110\uff7b\113\uff7b\001" +
    "\002\000\004\004\u0128\001\002\000\114\003\uffe1\004\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\047\uffe1" +
    "\051\uffe1\053\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\066" +
    "\uffe1\110\215\113\uffe1\001\002\000\114\003\uffe5\004\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\047\uffe5" +
    "\051\uffe5\053\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\066" +
    "\uffe5\110\203\113\uffe5\001\002\000\112\003\uffef\004\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\040\uffef\041\uffef\042\uffef\043\uffef\047\uffef" +
    "\051\uffef\053\uffef\060\uffef\061\uffef\062\uffef\063\uffef\066" +
    "\uffef\113\uffef\001\002\000\114\003\uffe7\004\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\047\uffe7\051\uffe7" +
    "\053\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\066\uffe7\110" +
    "\177\113\uffe7\001\002\000\004\110\u010f\001\002\000\112" +
    "\003\uffeb\004\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\047\uffeb\051\uffeb\053\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\066\uffeb\113\uffeb\001\002\000\006\004\022" +
    "\067\365\001\002\000\114\003\uff84\004\uff84\012\uff84\013" +
    "\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84" +
    "\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030" +
    "\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\047\uff84\051\uff84\053" +
    "\uff84\060\uff84\061\uff84\062\uff84\063\uff84\066\uff84\110\uff84" +
    "\113\uff84\001\002\000\114\003\uff77\004\uff77\012\uff77\013" +
    "\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77" +
    "\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030" +
    "\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\047\uff77\051\uff77\053" +
    "\uff77\060\uff77\061\uff77\062\uff77\063\uff77\066\uff77\110\uff77" +
    "\113\uff77\001\002\000\004\110\361\001\002\000\004\110" +
    "\354\001\002\000\004\110\346\001\002\000\114\003\uffe9" +
    "\004\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\047\uffe9\051\uffe9\053\uffe9\060\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\066\uffe9\110\174\113\uffe9\001\002\000\114\003\uff7a" +
    "\004\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017" +
    "\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034" +
    "\uff7a\035\uff7a\036\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a" +
    "\047\uff7a\051\uff7a\053\uff7a\060\uff7a\061\uff7a\062\uff7a\063" +
    "\uff7a\066\uff7a\110\uff7a\113\uff7a\001\002\000\114\003\uff79" +
    "\004\uff79\012\uff79\013\uff79\014\uff79\015\uff79\016\uff79\017" +
    "\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79" +
    "\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034" +
    "\uff79\035\uff79\036\uff79\040\uff79\041\uff79\042\uff79\043\uff79" +
    "\047\uff79\051\uff79\053\uff79\060\uff79\061\uff79\062\uff79\063" +
    "\uff79\066\uff79\110\uff79\113\uff79\001\002\000\004\004\326" +
    "\001\002\000\012\003\uffa0\044\uffa0\113\324\117\325\001" +
    "\002\000\112\003\ufff5\004\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\047\ufff5\051\ufff5\053\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\066\ufff5\113\ufff5\001\002\000" +
    "\114\003\uff78\004\uff78\012\uff78\013\uff78\014\uff78\015\uff78" +
    "\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024" +
    "\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78" +
    "\033\uff78\034\uff78\035\uff78\036\uff78\040\uff78\041\uff78\042" +
    "\uff78\043\uff78\047\uff78\051\uff78\053\uff78\060\uff78\061\uff78" +
    "\062\uff78\063\uff78\066\uff78\110\uff78\113\uff78\001\002\000" +
    "\112\003\uffd9\004\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\047\uffd9\051\uffd9\053\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\066\uffd9\113\uffd9\001\002\000\112\003" +
    "\ufff1\004\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\047\ufff1\051\ufff1\053\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\066\ufff1\113\ufff1\001\002\000\004\112\311\001" +
    "\002\000\114\003\uff80\004\uff80\012\uff80\013\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023" +
    "\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80" +
    "\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\040\uff80\041" +
    "\uff80\042\uff80\043\uff80\047\uff80\051\uff80\053\uff80\060\uff80" +
    "\061\uff80\062\uff80\063\uff80\066\uff80\110\uff80\113\uff80\001" +
    "\002\000\114\003\uff7c\004\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c" +
    "\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\043\uff7c\047\uff7c\051\uff7c\053\uff7c\060\uff7c" +
    "\061\uff7c\062\uff7c\063\uff7c\066\uff7c\110\uff7c\113\uff7c\001" +
    "\002\000\114\003\uff7d\004\uff7d\012\uff7d\013\uff7d\014\uff7d" +
    "\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023" +
    "\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d" +
    "\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\047\uff7d\051\uff7d\053\uff7d\060\uff7d" +
    "\061\uff7d\062\uff7d\063\uff7d\066\uff7d\110\uff7d\113\uff7d\001" +
    "\002\000\004\117\310\001\002\000\114\003\uff7e\004\uff7e" +
    "\012\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020" +
    "\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\036\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\047\uff7e" +
    "\051\uff7e\053\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\066" +
    "\uff7e\110\uff7e\113\uff7e\001\002\000\114\003\uff87\004\uff87" +
    "\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020" +
    "\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\040\uff87\041\uff87\042\uff87\043\uff87\047\uff87" +
    "\051\uff87\053\uff87\060\uff87\061\uff87\062\uff87\063\uff87\066" +
    "\uff87\110\uff87\113\uff87\001\002\000\114\003\uff86\004\uff86" +
    "\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020" +
    "\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86" +
    "\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035" +
    "\uff86\036\uff86\040\uff86\041\uff86\042\uff86\043\uff86\047\uff86" +
    "\051\uff86\053\uff86\060\uff86\061\uff86\062\uff86\063\uff86\066" +
    "\uff86\110\uff86\113\uff86\001\002\000\114\003\uff88\004\uff88" +
    "\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\040\uff88\041\uff88\042\uff88\043\uff88\047\uff88" +
    "\051\uff88\053\uff88\060\uff88\061\uff88\062\uff88\063\uff88\066" +
    "\uff88\110\uff88\113\uff88\001\002\000\112\003\ufff7\004\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\047\ufff7" +
    "\051\ufff7\053\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\066" +
    "\ufff7\113\ufff7\001\002\000\114\003\uff7f\004\uff7f\012\uff7f" +
    "\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\047\uff7f\051\uff7f" +
    "\053\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\066\uff7f\110" +
    "\uff7f\113\uff7f\001\002\000\114\003\uff83\004\uff83\012\uff83" +
    "\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036" +
    "\uff83\040\uff83\041\uff83\042\uff83\043\uff83\047\uff83\051\uff83" +
    "\053\uff83\060\uff83\061\uff83\062\uff83\063\uff83\066\uff83\110" +
    "\uff83\113\uff83\001\002\000\112\003\uffdf\004\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\047\uffdf\051\uffdf" +
    "\053\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\066\uffdf\113" +
    "\uffdf\001\002\000\004\110\253\001\002\000\114\003\uff82" +
    "\004\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82" +
    "\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034" +
    "\uff82\035\uff82\036\uff82\040\uff82\041\uff82\042\uff82\043\uff82" +
    "\047\uff82\051\uff82\053\uff82\060\uff82\061\uff82\062\uff82\063" +
    "\uff82\066\uff82\110\uff82\113\uff82\001\002\000\112\003\uffdb" +
    "\004\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\047\uffdb\051\uffdb\053\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\066\uffdb\113\uffdb\001\002\000\004\110\247\001\002" +
    "\000\112\003\ufffb\004\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\047\ufffb\051\ufffb\053\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\066\ufffb\113\ufffb\001\002\000\114" +
    "\003\uff85\004\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016" +
    "\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85" +
    "\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\035\uff85\036\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\047\uff85\051\uff85\053\uff85\060\uff85\061\uff85\062" +
    "\uff85\063\uff85\066\uff85\110\uff85\113\uff85\001\002\000\110" +
    "\003\144\004\041\012\005\013\011\014\014\015\007\016" +
    "\076\017\070\020\066\021\031\022\073\023\042\024\067" +
    "\025\102\026\072\027\065\030\063\031\062\032\051\033" +
    "\105\034\050\035\043\036\152\040\044\041\100\042\037" +
    "\043\046\047\075\051\064\053\032\060\055\061\061\062" +
    "\052\063\060\066\045\001\002\000\112\003\uffdd\004\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\047\uffdd" +
    "\051\uffdd\053\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\066" +
    "\uffdd\113\uffdd\001\002\000\114\003\uff81\004\uff81\012\uff81" +
    "\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021" +
    "\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036" +
    "\uff81\040\uff81\041\uff81\042\uff81\043\uff81\047\uff81\051\uff81" +
    "\053\uff81\060\uff81\061\uff81\062\uff81\063\uff81\066\uff81\110" +
    "\uff81\113\uff81\001\002\000\114\003\uffe3\004\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\047\uffe3\051\uffe3" +
    "\053\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\066\uffe3\110" +
    "\107\113\uffe3\001\002\000\004\005\110\001\002\000\004" +
    "\120\111\001\002\000\004\005\112\001\002\000\004\120" +
    "\113\001\002\000\004\005\114\001\002\000\004\120\115" +
    "\001\002\000\004\005\116\001\002\000\004\120\117\001" +
    "\002\000\004\005\120\001\002\000\004\120\121\001\002" +
    "\000\004\005\122\001\002\000\004\120\123\001\002\000" +
    "\004\005\124\001\002\000\004\120\125\001\002\000\004" +
    "\005\126\001\002\000\004\120\127\001\002\000\004\005" +
    "\130\001\002\000\004\111\131\001\002\000\004\117\132" +
    "\001\002\000\112\003\uff8a\004\uff8a\012\uff8a\013\uff8a\014" +
    "\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\043\uff8a\047\uff8a\051\uff8a\053\uff8a\060" +
    "\uff8a\061\uff8a\062\uff8a\063\uff8a\066\uff8a\113\uff8a\001\002" +
    "\000\112\003\ufff4\004\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\047\ufff4\051\ufff4\053\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\063\ufff4\066\ufff4\113\ufff4\001\002\000\112" +
    "\003\ufffa\004\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\047\ufffa\051\ufffa\053\ufffa\060\ufffa\061\ufffa\062" +
    "\ufffa\063\ufffa\066\ufffa\113\ufffa\001\002\000\112\003\uffee" +
    "\004\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\047\uffee\051\uffee\053\uffee\060\uffee\061\uffee\062\uffee\063" +
    "\uffee\066\uffee\113\uffee\001\002\000\114\003\uffe2\004\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\047\uffe2" +
    "\051\uffe2\053\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\066" +
    "\uffe2\110\215\113\uffe2\001\002\000\114\003\uffe6\004\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\047\uffe6" +
    "\051\uffe6\053\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\066" +
    "\uffe6\110\203\113\uffe6\001\002\000\112\003\ufff0\004\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\047\ufff0" +
    "\051\ufff0\053\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\066" +
    "\ufff0\113\ufff0\001\002\000\114\003\uffe8\004\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\047\uffe8\051\uffe8" +
    "\053\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\066\uffe8\110" +
    "\177\113\uffe8\001\002\000\112\003\uffec\004\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\040\uffec\041\uffec\042\uffec\043\uffec\047\uffec\051\uffec" +
    "\053\uffec\060\uffec\061\uffec\062\uffec\063\uffec\066\uffec\113" +
    "\uffec\001\002\000\114\003\uffea\004\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\047\uffea\051\uffea\053\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\066\uffea\110\174\113" +
    "\uffea\001\002\000\006\003\uffa0\044\uffa0\001\002\000\112" +
    "\003\ufff6\004\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\047\ufff6\051\ufff6\053\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\066\ufff6\113\ufff6\001\002\000\112\003\uffda" +
    "\004\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\040\uffda\041\uffda\042\uffda\043\uffda" +
    "\047\uffda\051\uffda\053\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\066\uffda\113\uffda\001\002\000\112\003\ufff2\004\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\047\ufff2" +
    "\051\ufff2\053\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\066" +
    "\ufff2\113\ufff2\001\002\000\112\003\ufff8\004\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\047\ufff8\051\ufff8" +
    "\053\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\066\ufff8\113" +
    "\ufff8\001\002\000\112\003\uffe0\004\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\047\uffe0\051\uffe0\053\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\066\uffe0\113\uffe0\001" +
    "\002\000\006\002\000\004\157\001\002\000\112\003\uffdc" +
    "\004\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\047\uffdc\051\uffdc\053\uffdc\060\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\066\uffdc\113\uffdc\001\002\000\112\003\ufffc\004\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\047\ufffc" +
    "\051\ufffc\053\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\066" +
    "\ufffc\113\ufffc\001\002\000\112\003\uffde\004\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\047\uffde\051\uffde" +
    "\053\uffde\060\uffde\061\uffde\062\uffde\063\uffde\066\uffde\113" +
    "\uffde\001\002\000\114\003\uffe4\004\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\047\uffe4\051\uffe4\053\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\063\uffe4\066\uffe4\110\107\113" +
    "\uffe4\001\002\000\004\110\160\001\002\000\004\111\161" +
    "\001\002\000\004\052\162\001\002\000\106\003\053\004" +
    "\041\012\005\013\011\014\014\015\007\016\076\017\070" +
    "\020\066\021\031\022\073\023\042\024\067\025\102\026" +
    "\072\027\065\030\063\031\062\032\051\033\105\034\050" +
    "\035\043\040\044\041\100\042\037\043\046\047\075\051" +
    "\064\053\032\060\055\061\061\062\052\063\060\066\045" +
    "\001\002\000\110\003\144\004\041\012\005\013\011\014" +
    "\014\015\007\016\076\017\070\020\066\021\031\022\073" +
    "\023\042\024\067\025\102\026\072\027\065\030\063\031" +
    "\062\032\051\033\105\034\050\035\043\036\164\040\044" +
    "\041\100\042\037\043\046\047\075\051\064\053\032\060" +
    "\055\061\061\062\052\063\060\066\045\001\002\000\004" +
    "\002\ufffe\001\002\000\006\003\167\044\166\001\002\000" +
    "\004\112\171\001\002\000\112\003\uff9d\004\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\047\uff9d\051\uff9d" +
    "\053\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\066\uff9d\113" +
    "\uff9d\001\002\000\112\003\uff9f\004\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\047\uff9f\051\uff9f\053\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\066\uff9f\113\uff9f\001" +
    "\002\000\106\003\053\004\041\012\005\013\011\014\014" +
    "\015\007\016\076\017\070\020\066\021\031\022\073\023" +
    "\042\024\067\025\102\026\072\027\065\030\063\031\062" +
    "\032\051\033\105\034\050\035\043\040\044\041\100\042" +
    "\037\043\046\047\075\051\064\053\032\060\055\061\061" +
    "\062\052\063\060\066\045\001\002\000\110\003\144\004" +
    "\041\012\005\013\011\014\014\015\007\016\076\017\070" +
    "\020\066\021\031\022\073\023\042\024\067\025\102\026" +
    "\072\027\065\030\063\031\062\032\051\033\105\034\050" +
    "\035\043\040\044\041\100\042\037\043\046\047\075\051" +
    "\064\053\032\060\055\061\061\062\052\063\060\066\045" +
    "\113\173\001\002\000\112\003\uff9e\004\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\047\uff9e\051\uff9e\053" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\066\uff9e\113\uff9e" +
    "\001\002\000\004\111\175\001\002\000\004\117\176\001" +
    "\002\000\112\003\uff8d\004\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\040\uff8d\041" +
    "\uff8d\042\uff8d\043\uff8d\047\uff8d\051\uff8d\053\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\063\uff8d\066\uff8d\113\uff8d\001\002\000" +
    "\004\005\200\001\002\000\004\111\201\001\002\000\004" +
    "\117\202\001\002\000\112\003\uff8c\004\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\043\uff8c\047\uff8c\051\uff8c\053" +
    "\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\066\uff8c\113\uff8c" +
    "\001\002\000\004\005\204\001\002\000\004\120\205\001" +
    "\002\000\004\005\206\001\002\000\004\120\207\001\002" +
    "\000\004\005\210\001\002\000\004\120\211\001\002\000" +
    "\004\005\212\001\002\000\004\111\213\001\002\000\004" +
    "\117\214\001\002\000\112\003\uff8b\004\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030" +
    "\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\047\uff8b\051\uff8b\053" +
    "\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\066\uff8b\113\uff8b" +
    "\001\002\000\004\005\216\001\002\000\004\120\217\001" +
    "\002\000\004\005\220\001\002\000\004\120\221\001\002" +
    "\000\004\005\222\001\002\000\004\120\223\001\002\000" +
    "\004\005\224\001\002\000\004\120\225\001\002\000\004" +
    "\005\226\001\002\000\004\120\227\001\002\000\004\005" +
    "\230\001\002\000\004\120\231\001\002\000\004\005\232" +
    "\001\002\000\004\120\233\001\002\000\004\005\234\001" +
    "\002\000\004\120\235\001\002\000\004\005\236\001\002" +
    "\000\004\120\237\001\002\000\004\005\240\001\002\000" +
    "\004\120\241\001\002\000\004\005\242\001\002\000\004" +
    "\120\243\001\002\000\004\005\244\001\002\000\004\111" +
    "\245\001\002\000\004\117\246\001\002\000\112\003\uff89" +
    "\004\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017" +
    "\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034" +
    "\uff89\035\uff89\036\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\047\uff89\051\uff89\053\uff89\060\uff89\061\uff89\062\uff89\063" +
    "\uff89\066\uff89\113\uff89\001\002\000\004\004\250\001\002" +
    "\000\004\111\251\001\002\000\004\117\252\001\002\000" +
    "\112\003\uff5d\004\uff5d\012\uff5d\013\uff5d\014\uff5d\015\uff5d" +
    "\016\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\024" +
    "\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d" +
    "\033\uff5d\034\uff5d\035\uff5d\036\uff5d\040\uff5d\041\uff5d\042" +
    "\uff5d\043\uff5d\047\uff5d\051\uff5d\053\uff5d\060\uff5d\061\uff5d" +
    "\062\uff5d\063\uff5d\066\uff5d\113\uff5d\001\002\000\014\004" +
    "\256\005\254\010\255\011\260\111\uff8e\001\002\000\016" +
    "\102\270\103\267\104\274\105\273\106\275\107\304\001" +
    "\002\000\004\107\302\001\002\000\016\102\270\103\267" +
    "\104\274\105\273\106\275\107\272\001\002\000\004\111" +
    "\263\001\002\000\004\107\261\001\002\000\004\004\262" +
    "\001\002\000\006\111\uff94\117\uff94\001\002\000\004\112" +
    "\264\001\002\000\106\003\053\004\041\012\005\013\011" +
    "\014\014\015\007\016\076\017\070\020\066\021\031\022" +
    "\073\023\042\024\067\025\102\026\072\027\065\030\063" +
    "\031\062\032\051\033\105\034\050\035\043\040\044\041" +
    "\100\042\037\043\046\047\075\051\064\053\032\060\055" +
    "\061\061\062\052\063\060\066\045\001\002\000\110\003" +
    "\144\004\041\012\005\013\011\014\014\015\007\016\076" +
    "\017\070\020\066\021\031\022\073\023\042\024\067\025" +
    "\102\026\072\027\065\030\063\031\062\032\051\033\105" +
    "\034\050\035\043\040\044\041\100\042\037\043\046\047" +
    "\075\051\064\053\032\060\055\061\061\062\052\063\060" +
    "\066\045\113\266\001\002\000\112\003\uff9c\004\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c" +
    "\036\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\047\uff9c\051" +
    "\uff9c\053\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c" +
    "\113\uff9c\001\002\000\006\004\uffad\005\uffad\001\002\000" +
    "\006\004\uffac\005\uffac\001\002\000\006\004\301\005\300" +
    "\001\002\000\012\004\uffa8\005\uffa8\010\276\011\277\001" +
    "\002\000\006\004\uffab\005\uffab\001\002\000\006\004\uffaa" +
    "\005\uffaa\001\002\000\006\004\uffa9\005\uffa9\001\002\000" +
    "\006\111\uff95\117\uff95\001\002\000\006\111\uff96\117\uff96" +
    "\001\002\000\006\111\uff92\117\uff92\001\002\000\006\111" +
    "\uff90\117\uff90\001\002\000\004\004\303\001\002\000\006" +
    "\111\uff93\117\uff93\001\002\000\006\004\uffa8\005\uffa8\001" +
    "\002\000\006\004\307\005\306\001\002\000\006\111\uff8f" +
    "\117\uff8f\001\002\000\006\111\uff91\117\uff91\001\002\000" +
    "\112\003\uff97\004\uff97\012\uff97\013\uff97\014\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\047\uff97\051\uff97\053\uff97\060\uff97\061\uff97" +
    "\062\uff97\063\uff97\066\uff97\113\uff97\001\002\000\106\003" +
    "\053\004\041\012\005\013\011\014\014\015\007\016\076" +
    "\017\070\020\066\021\031\022\073\023\042\024\067\025" +
    "\102\026\072\027\065\030\063\031\062\032\051\033\105" +
    "\034\050\035\043\040\044\041\100\042\037\043\046\047" +
    "\075\051\064\053\032\060\055\061\061\062\052\063\060" +
    "\066\045\001\002\000\110\003\144\004\041\012\005\013" +
    "\011\014\014\015\007\016\076\017\070\020\066\021\031" +
    "\022\073\023\042\024\067\025\102\026\072\027\065\030" +
    "\063\031\062\032\051\033\105\034\050\035\043\040\044" +
    "\041\100\042\037\043\046\047\075\051\064\053\032\060" +
    "\055\061\061\062\052\063\060\066\045\113\313\001\002" +
    "\000\004\064\314\001\002\000\004\110\315\001\002\000" +
    "\004\004\316\001\002\000\004\004\317\001\002\000\004" +
    "\111\320\001\002\000\004\112\321\001\002\000\106\003" +
    "\053\004\041\012\005\013\011\014\014\015\007\016\076" +
    "\017\070\020\066\021\031\022\073\023\042\024\067\025" +
    "\102\026\072\027\065\030\063\031\062\032\051\033\105" +
    "\034\050\035\043\040\044\041\100\042\037\043\046\047" +
    "\075\051\064\053\032\060\055\061\061\062\052\063\060" +
    "\066\045\001\002\000\110\003\144\004\041\012\005\013" +
    "\011\014\014\015\007\016\076\017\070\020\066\021\031" +
    "\022\073\023\042\024\067\025\102\026\072\027\065\030" +
    "\063\031\062\032\051\033\105\034\050\035\043\040\044" +
    "\041\100\042\037\043\046\047\075\051\064\053\032\060" +
    "\055\061\061\062\052\063\060\066\045\113\323\001\002" +
    "\000\112\003\uff5f\004\uff5f\012\uff5f\013\uff5f\014\uff5f\015" +
    "\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f" +
    "\024\uff5f\025\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f\032" +
    "\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\040\uff5f\041\uff5f" +
    "\042\uff5f\043\uff5f\047\uff5f\051\uff5f\053\uff5f\060\uff5f\061" +
    "\uff5f\062\uff5f\063\uff5f\066\uff5f\113\uff5f\001\002\000\112" +
    "\003\uffd7\004\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\047\uffd7\051\uffd7\053\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\066\uffd7\113\uffd7\001\002\000\112\003\uffd8" +
    "\004\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\047\uffd8\051\uffd8\053\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\066\uffd8\113\uffd8\001\002\000\004\110\327\001\002" +
    "\000\014\012\331\013\332\014\330\015\334\111\uff70\001" +
    "\002\000\006\004\uffba\114\uffba\001\002\000\006\004\uffbc" +
    "\114\uffbc\001\002\000\006\004\uffbb\114\uffbb\001\002\000" +
    "\004\111\342\001\002\000\006\004\uffb9\114\uffb9\001\002" +
    "\000\006\111\uff71\120\340\001\002\000\004\004\337\001" +
    "\002\000\006\111\uff6f\120\uff6f\001\002\000\014\012\331" +
    "\013\332\014\330\015\334\111\uff70\001\002\000\004\111" +
    "\uff72\001\002\000\004\112\343\001\002\000\106\003\053" +
    "\004\041\012\005\013\011\014\014\015\007\016\076\017" +
    "\070\020\066\021\031\022\073\023\042\024\067\025\102" +
    "\026\072\027\065\030\063\031\062\032\051\033\105\034" +
    "\050\035\043\040\044\041\100\042\037\043\046\047\075" +
    "\051\064\053\032\060\055\061\061\062\052\063\060\066" +
    "\045\001\002\000\110\003\144\004\041\012\005\013\011" +
    "\014\014\015\007\016\076\017\070\020\066\021\031\022" +
    "\073\023\042\024\067\025\102\026\072\027\065\030\063" +
    "\031\062\032\051\033\105\034\050\035\043\040\044\041" +
    "\100\042\037\043\046\047\075\051\064\053\032\060\055" +
    "\061\061\062\052\063\060\066\045\113\345\001\002\000" +
    "\112\003\uff76\004\uff76\012\uff76\013\uff76\014\uff76\015\uff76" +
    "\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\036\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\047\uff76\051\uff76\053\uff76\060\uff76\061\uff76" +
    "\062\uff76\063\uff76\066\uff76\113\uff76\001\002\000\014\004" +
    "\256\005\254\010\255\011\260\111\uff8e\001\002\000\004" +
    "\111\350\001\002\000\004\112\351\001\002\000\106\003" +
    "\053\004\041\012\005\013\011\014\014\015\007\016\076" +
    "\017\070\020\066\021\031\022\073\023\042\024\067\025" +
    "\102\026\072\027\065\030\063\031\062\032\051\033\105" +
    "\034\050\035\043\040\044\041\100\042\037\043\046\047" +
    "\075\051\064\053\032\060\055\061\061\062\052\063\060" +
    "\066\045\001\002\000\110\003\144\004\041\012\005\013" +
    "\011\014\014\015\007\016\076\017\070\020\066\021\031" +
    "\022\073\023\042\024\067\025\102\026\072\027\065\030" +
    "\063\031\062\032\051\033\105\034\050\035\043\040\044" +
    "\041\100\042\037\043\046\047\075\051\064\053\032\060" +
    "\055\061\061\062\052\063\060\066\045\113\353\001\002" +
    "\000\112\003\uffa1\004\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\047\uffa1\051\uffa1\053\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\066\uffa1\113\uffa1\001\002\000\004" +
    "\111\355\001\002\000\004\112\356\001\002\000\106\003" +
    "\053\004\041\012\005\013\011\014\014\015\007\016\076" +
    "\017\070\020\066\021\031\022\073\023\042\024\067\025" +
    "\102\026\072\027\065\030\063\031\062\032\051\033\105" +
    "\034\050\035\043\040\044\041\100\042\037\043\046\047" +
    "\075\051\064\053\032\060\055\061\061\062\052\063\060" +
    "\066\045\001\002\000\110\003\144\004\041\012\005\013" +
    "\011\014\014\015\007\016\076\017\070\020\066\021\031" +
    "\022\073\023\042\024\067\025\102\026\072\027\065\030" +
    "\063\031\062\032\051\033\105\034\050\035\043\040\044" +
    "\041\100\042\037\043\046\047\075\051\064\053\032\060" +
    "\055\061\061\062\052\063\060\066\045\113\360\001\002" +
    "\000\112\003\uff73\004\uff73\012\uff73\013\uff73\014\uff73\015" +
    "\uff73\016\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73" +
    "\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032" +
    "\uff73\033\uff73\034\uff73\035\uff73\036\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\047\uff73\051\uff73\053\uff73\060\uff73\061" +
    "\uff73\062\uff73\063\uff73\066\uff73\113\uff73\001\002\000\004" +
    "\007\362\001\002\000\004\111\363\001\002\000\004\117" +
    "\364\001\002\000\112\003\uff5e\004\uff5e\012\uff5e\013\uff5e" +
    "\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022" +
    "\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e" +
    "\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\040" +
    "\uff5e\041\uff5e\042\uff5e\043\uff5e\047\uff5e\051\uff5e\053\uff5e" +
    "\060\uff5e\061\uff5e\062\uff5e\063\uff5e\066\uff5e\113\uff5e\001" +
    "\002\000\022\003\377\004\u0100\005\372\006\366\007\373" +
    "\010\370\011\375\110\371\001\002\000\016\070\uffaf\071" +
    "\uffaf\072\uffaf\073\uffaf\111\uffaf\117\uffaf\001\002\000\012" +
    "\070\uffb6\071\uffb6\111\uffb6\117\uffb6\001\002\000\004\117" +
    "\u010e\001\002\000\014\003\377\004\u0100\005\372\006\366" +
    "\110\371\001\002\000\016\070\uffb0\071\uffb0\072\uffb0\073" +
    "\uffb0\111\uffb0\117\uffb0\001\002\000\004\117\u010b\001\002" +
    "\000\010\070\u0108\071\u0107\117\u0106\001\002\000\004\117" +
    "\u0105\001\002\000\016\070\uffb3\071\uffb3\072\u0101\073\u0102" +
    "\111\uffb3\117\uffb3\001\002\000\016\070\uffae\071\uffae\072" +
    "\uffae\073\uffae\111\uffae\117\uffae\001\002\000\016\070\uffb1" +
    "\071\uffb1\072\uffb1\073\uffb1\111\uffb1\117\uffb1\001\002\000" +
    "\014\003\377\004\u0100\005\372\006\366\110\371\001\002" +
    "\000\014\003\377\004\u0100\005\372\006\366\110\371\001" +
    "\002\000\012\070\uffb4\071\uffb4\111\uffb4\117\uffb4\001\002" +
    "\000\012\070\uffb5\071\uffb5\111\uffb5\117\uffb5\001\002\000" +
    "\112\003\uff9a\004\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\047\uff9a\051\uff9a\053\uff9a\060\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\066\uff9a\113\uff9a\001\002\000\112\003" +
    "\uff98\004\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\047\uff98\051\uff98\053\uff98\060\uff98\061\uff98\062\uff98" +
    "\063\uff98\066\uff98\113\uff98\001\002\000\014\003\377\004" +
    "\u0100\005\372\006\366\110\371\001\002\000\014\003\377" +
    "\004\u0100\005\372\006\366\110\371\001\002\000\012\070" +
    "\uffb8\071\uffb8\111\uffb8\117\uffb8\001\002\000\012\070\uffb7" +
    "\071\uffb7\111\uffb7\117\uffb7\001\002\000\112\003\uff9b\004" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\047" +
    "\uff9b\051\uff9b\053\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\066\uff9b\113\uff9b\001\002\000\010\070\u0108\071\u0107\111" +
    "\u010d\001\002\000\016\070\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\111\uffb2\117\uffb2\001\002\000\112\003\uff99\004\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\040\uff99\041\uff99\042\uff99\043\uff99\047\uff99\051" +
    "\uff99\053\uff99\060\uff99\061\uff99\062\uff99\063\uff99\066\uff99" +
    "\113\uff99\001\002\000\006\004\u0111\013\u0110\001\002\000" +
    "\004\004\u0121\001\002\000\004\067\u0117\001\002\000\004" +
    "\111\u0113\001\002\000\004\112\u0114\001\002\000\106\003" +
    "\053\004\041\012\005\013\011\014\014\015\007\016\076" +
    "\017\070\020\066\021\031\022\073\023\042\024\067\025" +
    "\102\026\072\027\065\030\063\031\062\032\051\033\105" +
    "\034\050\035\043\040\044\041\100\042\037\043\046\047" +
    "\075\051\064\053\032\060\055\061\061\062\052\063\060" +
    "\066\045\001\002\000\110\003\144\004\041\012\005\013" +
    "\011\014\014\015\007\016\076\017\070\020\066\021\031" +
    "\022\073\023\042\024\067\025\102\026\072\027\065\030" +
    "\063\031\062\032\051\033\105\034\050\035\043\040\044" +
    "\041\100\042\037\043\046\047\075\051\064\053\032\060" +
    "\055\061\061\062\052\063\060\066\045\113\u0116\001\002" +
    "\000\112\003\uff6a\004\uff6a\012\uff6a\013\uff6a\014\uff6a\015" +
    "\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a" +
    "\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032" +
    "\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\040\uff6a\041\uff6a" +
    "\042\uff6a\043\uff6a\047\uff6a\051\uff6a\053\uff6a\060\uff6a\061" +
    "\uff6a\062\uff6a\063\uff6a\066\uff6a\113\uff6a\001\002\000\004" +
    "\005\u0118\001\002\000\004\117\u0119\001\002\000\014\004" +
    "\256\005\254\010\255\011\260\117\uff8e\001\002\000\004" +
    "\117\u011b\001\002\000\010\004\u011d\100\u011e\111\uff67\001" +
    "\002\000\004\111\uff69\001\002\000\004\100\u0120\001\002" +
    "\000\004\004\u011f\001\002\000\004\111\uff65\001\002\000" +
    "\004\111\uff66\001\002\000\004\067\u0122\001\002\000\004" +
    "\005\u0123\001\002\000\004\117\u0124\001\002\000\014\004" +
    "\256\005\254\010\255\011\260\117\uff8e\001\002\000\004" +
    "\117\u0126\001\002\000\010\004\u011d\100\u011e\111\uff67\001" +
    "\002\000\004\111\uff68\001\002\000\004\110\u0129\001\002" +
    "\000\004\111\u012a\001\002\000\004\117\u012b\001\002\000" +
    "\112\003\uff75\004\uff75\012\uff75\013\uff75\014\uff75\015\uff75" +
    "\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024" +
    "\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75" +
    "\033\uff75\034\uff75\035\uff75\036\uff75\040\uff75\041\uff75\042" +
    "\uff75\043\uff75\047\uff75\051\uff75\053\uff75\060\uff75\061\uff75" +
    "\062\uff75\063\uff75\066\uff75\113\uff75\001\002\000\004\055" +
    "\u012d\001\002\000\004\004\u012e\001\002\000\004\110\u012f" +
    "\001\002\000\006\004\u0131\005\u0130\001\002\000\006\111" +
    "\uff6b\120\uff6b\001\002\000\006\111\uff6c\120\uff6c\001\002" +
    "\000\004\111\u0136\001\002\000\006\111\uff6e\120\u0134\001" +
    "\002\000\006\004\u0131\005\u0130\001\002\000\004\111\uff6d" +
    "\001\002\000\004\117\u0137\001\002\000\112\003\uffca\004" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\040\uffca\041\uffca\042\uffca\043\uffca\047" +
    "\uffca\051\uffca\053\uffca\060\uffca\061\uffca\062\uffca\063\uffca" +
    "\066\uffca\113\uffca\001\002\000\004\002\ufffd\001\002\000" +
    "\116\003\uffc5\004\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\047\uffc5\051\uffc5\053\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\066\uffc5\067\u013b\113\uffc5\117\u013a\001" +
    "\002\000\112\003\uffd6\004\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\047\uffd6\051\uffd6\053\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\066\uffd6\113\uffd6\001\002\000" +
    "\014\005\u013d\006\u0140\007\u013c\010\u013e\011\u013f\001\002" +
    "\000\004\117\u0145\001\002\000\114\003\uffc1\004\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\047\uffc1\051" +
    "\uffc1\053\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\066\uffc1" +
    "\113\uffc1\117\u0144\001\002\000\004\117\u0143\001\002\000" +
    "\004\117\u0142\001\002\000\004\117\u0141\001\002\000\112" +
    "\003\uffc9\004\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\047\uffc9\051\uffc9\053\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\066\uffc9\113\uffc9\001\002\000\112\003\uffc6" +
    "\004\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\047\uffc6\051\uffc6\053\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\066\uffc6\113\uffc6\001\002\000\112\003\uffc7\004\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7" +
    "\051\uffc7\053\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\066" +
    "\uffc7\113\uffc7\001\002\000\112\003\uffd2\004\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\047\uffd2\051\uffd2" +
    "\053\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\066\uffd2\113" +
    "\uffd2\001\002\000\112\003\uffc8\004\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\047\uffc8\051\uffc8\053\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\066\uffc8\113\uffc8\001" +
    "\002\000\004\110\u0147\001\002\000\004\111\u0148\001\002" +
    "\000\004\052\u0149\001\002\000\106\003\053\004\041\012" +
    "\005\013\011\014\014\015\007\016\076\017\070\020\066" +
    "\021\031\022\073\023\042\024\067\025\102\026\072\027" +
    "\065\030\063\031\062\032\051\033\105\034\050\035\043" +
    "\040\044\041\100\042\037\043\046\047\075\051\064\053" +
    "\032\060\055\061\061\062\052\063\060\066\045\001\002" +
    "\000\110\003\144\004\041\012\005\013\011\014\014\015" +
    "\007\016\076\017\070\020\066\021\031\022\073\023\042" +
    "\024\067\025\102\026\072\027\065\030\063\031\062\032" +
    "\051\033\105\034\050\035\043\036\u014b\040\044\041\100" +
    "\042\037\043\046\047\075\051\064\053\032\060\055\061" +
    "\061\062\052\063\060\066\045\001\002\000\004\002\uffff" +
    "\001\002\000\116\003\uffc3\004\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\047\uffc3\051\uffc3\053\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\066\uffc3\067\u014e\113\uffc3" +
    "\117\u014d\001\002\000\112\003\uffd3\004\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\047\uffd3\051\uffd3\053" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\066\uffd3\113\uffd3" +
    "\001\002\000\006\010\u014f\011\u0150\001\002\000\114\003" +
    "\uffbf\004\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\047\uffbf\051\uffbf\053\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\066\uffbf\113\uffbf\117\u0152\001\002\000\114\003" +
    "\uffbe\004\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\047\uffbe\051\uffbe\053\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\066\uffbe\113\uffbe\117\u0151\001\002\000\112\003" +
    "\uffcd\004\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\047\uffcd\051\uffcd\053\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\063\uffcd\066\uffcd\113\uffcd\001\002\000\112\003\uffce\004" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\040\uffce\041\uffce\042\uffce\043\uffce\047" +
    "\uffce\051\uffce\053\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\066\uffce\113\uffce\001\002\000\004\002\001\001\002\000" +
    "\116\003\uffc4\004\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\047\uffc4\051\uffc4\053\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\066\uffc4\067\u0156\113\uffc4\117\u0155\001" +
    "\002\000\112\003\uffd5\004\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\047\uffd5\051\uffd5\053\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\066\uffd5\113\uffd5\001\002\000" +
    "\006\005\u0157\006\u0158\001\002\000\004\117\u015a\001\002" +
    "\000\114\003\uffc0\004\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\047\uffc0\051\uffc0\053\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\066\uffc0\113\uffc0\117\u0159\001\002" +
    "\000\112\003\uffd0\004\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\047\uffd0\051\uffd0\053\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\066\uffd0\113\uffd0\001\002\000\112" +
    "\003\uffd1\004\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\047\uffd1\051\uffd1\053\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\066\uffd1\113\uffd1\001\002\000\004\116\u015c" +
    "\001\002\000\004\004\u015d\001\002\000\004\067\u015e\001" +
    "\002\000\014\012\331\013\332\014\330\015\334\112\u015f" +
    "\001\002\000\002\001\002\000\004\114\u0161\001\002\000" +
    "\004\005\u0162\001\002\000\004\116\u0163\001\002\000\004" +
    "\117\u0164\001\002\000\112\003\uffcc\004\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\047\uffcc\051\uffcc\053" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\066\uffcc\113\uffcc" +
    "\001\002\000\004\113\u0166\001\002\000\004\117\u0167\001" +
    "\002\000\112\003\uffcb\004\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\047\uffcb\051\uffcb\053\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\066\uffcb\113\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\010\002\003\003\005\020\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\003\011\073\020\100\021\102\031" +
    "\026\033\070\034\053\035\025\066\034\071\056\072\037" +
    "\073\046\074\035\075\033\076\105\077\032\103\027\105" +
    "\103\106\076\107\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\112\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\003\011\150" +
    "\020\153\031\133\033\147\034\144\035\132\066\137\071" +
    "\146\072\141\073\142\074\140\075\136\076\155\077\135" +
    "\103\134\105\154\106\152\107\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\112\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\002\003\011\073\020\100\021\162\031\026" +
    "\033\070\034\053\035\025\066\034\071\056\072\037\073" +
    "\046\074\035\075\033\076\105\077\032\103\027\105\103" +
    "\106\076\107\055\001\001\000\050\002\003\011\150\020" +
    "\153\031\133\033\147\034\144\035\132\066\137\071\146" +
    "\072\141\073\142\074\140\075\136\076\155\077\135\103" +
    "\134\105\154\106\152\107\145\001\001\000\002\001\001" +
    "\000\004\032\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\002\003\011\073\020\100" +
    "\021\171\031\026\033\070\034\053\035\025\066\034\071" +
    "\056\072\037\073\046\074\035\075\033\076\105\077\032" +
    "\103\027\105\103\106\076\107\055\001\001\000\050\002" +
    "\003\011\150\020\153\031\133\033\147\034\144\035\132" +
    "\066\137\071\146\072\141\073\142\074\140\075\136\076" +
    "\155\077\135\103\134\105\154\106\152\107\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\256\001\001\000\004\041\304\001\001\000\002\001\001" +
    "\000\004\041\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\002\003\011\073\020\100\021\264\031\026\033" +
    "\070\034\053\035\025\066\034\071\056\072\037\073\046" +
    "\074\035\075\033\076\105\077\032\103\027\105\103\106" +
    "\076\107\055\001\001\000\050\002\003\011\150\020\153" +
    "\031\133\033\147\034\144\035\132\066\137\071\146\072" +
    "\141\073\142\074\140\075\136\076\155\077\135\103\134" +
    "\105\154\106\152\107\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\002\003\011\073\020" +
    "\100\021\311\031\026\033\070\034\053\035\025\066\034" +
    "\071\056\072\037\073\046\074\035\075\033\076\105\077" +
    "\032\103\027\105\103\106\076\107\055\001\001\000\050" +
    "\002\003\011\150\020\153\031\133\033\147\034\144\035" +
    "\132\066\137\071\146\072\141\073\142\074\140\075\136" +
    "\076\155\077\135\103\134\105\154\106\152\107\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\002\003\011\073\020\100\021\321\031\026\033\070" +
    "\034\053\035\025\066\034\071\056\072\037\073\046\074" +
    "\035\075\033\076\105\077\032\103\027\105\103\106\076" +
    "\107\055\001\001\000\050\002\003\011\150\020\153\031" +
    "\133\033\147\034\144\035\132\066\137\071\146\072\141" +
    "\073\142\074\140\075\136\076\155\077\135\103\134\105" +
    "\154\106\152\107\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\335\100\332\102\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\335\100\340\102\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\002\003\011\073\020\100" +
    "\021\343\031\026\033\070\034\053\035\025\066\034\071" +
    "\056\072\037\073\046\074\035\075\033\076\105\077\032" +
    "\103\027\105\103\106\076\107\055\001\001\000\050\002" +
    "\003\011\150\020\153\031\133\033\147\034\144\035\132" +
    "\066\137\071\146\072\141\073\142\074\140\075\136\076" +
    "\155\077\135\103\134\105\154\106\152\107\145\001\001" +
    "\000\002\001\001\000\004\044\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\002\003\011\073\020\100" +
    "\021\351\031\026\033\070\034\053\035\025\066\034\071" +
    "\056\072\037\073\046\074\035\075\033\076\105\077\032" +
    "\103\027\105\103\106\076\107\055\001\001\000\050\002" +
    "\003\011\150\020\153\031\133\033\147\034\144\035\132" +
    "\066\137\071\146\072\141\073\142\074\140\075\136\076" +
    "\155\077\135\103\134\105\154\106\152\107\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\002\003\011\073\020\100\021\356\031\026\033\070" +
    "\034\053\035\025\066\034\071\056\072\037\073\046\074" +
    "\035\075\033\076\105\077\032\103\027\105\103\106\076" +
    "\107\055\001\001\000\050\002\003\011\150\020\153\031" +
    "\133\033\147\034\144\035\132\066\137\071\146\072\141" +
    "\073\142\074\140\075\136\076\155\077\135\103\134\105" +
    "\154\106\152\107\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\373\026\366\030\375\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\u010b\026\366\030\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u0103" +
    "\001\001\000\004\030\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\u0109\030\375\001\001\000\006\026\u0108\030\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\002\003\011" +
    "\073\020\100\021\u0114\031\026\033\070\034\053\035\025" +
    "\066\034\071\056\072\037\073\046\074\035\075\033\076" +
    "\105\077\032\103\027\105\103\106\076\107\055\001\001" +
    "\000\050\002\003\011\150\020\153\031\133\033\147\034" +
    "\144\035\132\066\137\071\146\072\141\073\142\074\140" +
    "\075\136\076\155\077\135\103\134\105\154\106\152\107" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u0119\001\001\000\002\001\001\000" +
    "\004\004\u011b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u0124\001\001\000\002\001\001\000\004\004\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\101\u0131\110\u0132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\101\u0134\110\u0132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\003\011\073\020\100\021\u0149\031" +
    "\026\033\070\034\053\035\025\066\034\071\056\072\037" +
    "\073\046\074\035\075\033\076\105\077\032\103\027\105" +
    "\103\106\076\107\055\001\001\000\050\002\003\011\150" +
    "\020\153\031\133\033\147\034\144\035\132\066\137\071" +
    "\146\072\141\073\142\074\140\075\136\076\155\077\135" +
    "\103\134\105\154\106\152\107\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\u015f\001" +
    "\001\000\004\014\u0164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static TablaSimbolos tablaSimbolos = new TablaSimbolos();
    static int verificarTipo = 0;
    private final int SINTACTICO = 232;
    
    static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
        System.out.println("EMPEZAMOS");
		new Sintax(new LexerCup(System.in)).parse();
	}
    
    private Symbol s;
    
    public Symbol getS(){
        return this.s;
    }

    public void syntax_error(Symbol s){     
        JLabel lb = new JLabel();                       
        lb.setForeground(new Color(217, 33, 51));
        lb.setFont(new Font("Verdana", Font.PLAIN, 14));
        lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lb.setText("Error en la línea " + (s.right+1) + ". Error sintáctico, cadena inesperada: "+ s.value );                       
        VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico", s.right+1,SINTACTICO));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        JLabel lb = new JLabel();       
        lb.setForeground(new Color(217, 33, 51));
        lb.setFont(new Font("Verdana", Font.PLAIN, 14));
        lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lb.setText("Error en la línea " + (s.right+1) + ". Error sintáctico, cadena inesperada: "+ s.value );                       
        VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico", s.right+1,SINTACTICO));
    }

    public void linea(int right){
        System.out.println("Linea: "+right);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


        Hashtable table = new Hashtable();
        private final int SINTACTICO = 232;
    
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // give ::= GIVE PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("give",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // get ::= GET PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // tryycatch ::= CHECK LLAVE_ABRE bloquesentencias LLAVE_CIERRA TRAP PARENTESIS_ABRE IDENTIFICADOR IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tryycatch",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sentencia_booleana ::= IDENTIFICADOR PUNTO SAME PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentencia_booleana ::= IDENTIFICADOR op_rel IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentencia_booleana ::= IDENTIFICADOR op_rel NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentencia_booleana ::= IDENTIFICADOR op_rel FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentencia_booleana ::= IDENTIFICADOR op_rel TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // declaracion_for ::= MAS_MAS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // declaracion_for ::= IDENTIFICADOR MAS_MAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declaracion_for ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentencia_for ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA condicion PUNTOYCOMA declaracion_for 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("IDENTIFICADOR:id SIGNO_DE_IGUAL NUMERO:valor PUNTOYCOMA condicion PUNTOYCOMA declaracion_for", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "just","Variable númerica en ciclo for");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentencia_for ::= IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA condicion PUNTOYCOMA declaracion_for 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim == null) {
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' no existe." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' no existe.", idright+1,SINTACTICO,
                new Gramatica("IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA condicion PUNTOYCOMA declaracion_for", "Variable repetida")));
            }else{
                //TablaSimbolos.crear(id, "just","Variable númerica en ciclo for");
                //TablaSimbolos.insertar(id, String.valueOf(valor));
                sim.setValor(valor);
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // for ::= FOR PARENTESIS_ABRE sentencia_for PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametroa ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parametroa ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parametrosa ::= parametroa COMA parametrosa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosa",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // parametrosa ::= parametroa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosa",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // parametro ::= t_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error semantico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semantico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA ", "semantico repetido")));
            }else{
                if(td.equals("word"))
                    TablaSimbolos.crear(id, "word","Variable tipo cadena en parmetro");
                if(td.equals("just"))
                    TablaSimbolos.crear(id, "just","Variable tipo númerica en parmetro");
                if(td.equals("flag"))
                    TablaSimbolos.crear(id, "word","Variable tipo booleana en parmetro");
                if(td.equals("broken"))
                    TablaSimbolos.crear(id, "word","Variable tipo flotante en parmetro");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);      
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametro",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // main ::= MAIN PARENTESIS_ABRE PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // constructor ::= IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constructor",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // metodo ::= MODEL IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // metodo ::= METHOD IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // metodo_sin_parametros ::= GETTEMPERATURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // metodo_sin_parametros ::= HOME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // metodo_sin_parametros ::= GETFILAMENTTYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // metodo_sin_parametros ::= GETFILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // metodo_sin_parametros ::= SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // metodo_sin_parametros ::= GETEXTRUSORZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // metodo_sin_parametros ::= GETEXTRUSORY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // metodo_sin_parametros ::= GETEXTRUSORX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // metodo_sin_parametros ::= STOP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // metodo_un_parametro ::= PRINTERPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_un_parametro",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // metodo_un_parametro ::= SETNEWFILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_un_parametro",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // metodo_un_parametro ::= SETFILAMENTTYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_un_parametro",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // metodo_cuatro_parametros ::= FILLCIRCLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_cuatro_parametros",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // metodo_cuatro_parametros ::= DRAWCIRCLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_cuatro_parametros",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // metodo_nueve_parametros ::= DRAWTRIANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_nueve_parametros",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // metodo_nueve_parametros ::= FILLTRIANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_nueve_parametros",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // metodo_doce_parametros ::= DRAWRECTANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_doce_parametros",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // metodo_doce_parametros ::= FILLRECTANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_doce_parametros",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // metodos_parametros ::= metodo_doce_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // metodos_parametros ::= metodo_nueve_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // metodos_parametros ::= metodo_cuatro_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // metodos_parametros ::= metodo_un_parametro PARENTESIS_ABRE NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // metodos_parametros ::= metodo_sin_parametros PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condicion ::= NUMERO op_rel NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condicion ::= IDENTIFICADOR op_rel IDENTIFICADOR 
            {
              Object RESULT =null;
		int id_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id_1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int id_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id_2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim_1 = TablaSimbolos.buscar(id_1);
            Simbolo sim_2 = TablaSimbolos.buscar(id_2);
        
            if (sim_1 == null) {
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (id_1right+1) + ". Error sintáctico. La variable '"+id_1+"' no existe" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id_1+"' no existe", id_1right+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IFENTIFICADOR","Error sintáctico. La variable '"+id_1+"' no existe")));
            }
            else{
                if (sim_2 == null) {
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (id_2right+1) + ". Error sintáctico. La variable '"+id_2+"' no existe" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id_2+"' no existe", id_2right+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IFENTIFICADOR","Error sintáctico. La variable '"+id_2+"' no existe")));
                }else
                    if(sim_1.tipo.equals("just") && !sim_2.tipo.equals("cad")){ 
                        JLabel lb = new JLabel();
                        lb.setForeground(new Color(217, 33, 51));
                        lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                        lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                        lb.setText("Error en la línea " + (id_1right+1) + ". Error semántico. La variable '"+id_1+"' es del tipo "+sim_1.tipo+" y la varibale '"+id_2+"' es del tipo "+sim_2+".");   
                        VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id_1+"' es del tipo "+sim_1.tipo+" y la varibale '"+id_2+"' es del tipo "+sim_2+".", id_1right+1,SINTACTICO,
                        new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id_1+"' es del tipo "+sim_1.tipo+" y la varibale '"+id_2+"' es del tipo "+id_2+".")));           
                    }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condicion ::= NUMERO op_rel IDENTIFICADOR 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);        
            if (sim == null) {
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error sintáctico. La variable '"+id+"' no existe")));
            }
            else{
                if(!sim.tipo.equals("just")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo just" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo just", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id+"' no es de tipo just")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicion ::= IDENTIFICADOR op_rel NUMERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error sintáctico. La variable '"+id+"' no existe")));
            }
            else{
                if(!sim.tipo.equals("just")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo just" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo just", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id+"' no es de tipo just")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicion ::= TRUE IGUAL_QUE IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error sintáctico. La variable '"+id+"' no existe")));
                System.out.println("El identificador '"+id+"' no existe");
            }
            else{
                if(!sim.tipo.equals("flag")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo flag" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo flag", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id+"' no es de tipo flag")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condicion ::= FALSE IGUAL_QUE IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                new Gramatica("condicion::= FALSE IGUAL_QUE IDENTIFICADOR","Error sintáctico. La variable '"+id+"' no existe")));
                System.out.println("El identificador '"+id+"' no existe");
            }
            else{
                if(!sim.tipo.equals("flag")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo flag" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo flag", idright+1,SINTACTICO,
                    new Gramatica("condicion::= FALSE IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id+"' no es de tipo flag")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicion ::= IDENTIFICADOR IGUAL_QUE TRUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE TRUE","Error sintáctico. La variable '"+id+"' no existe")));
                System.out.println("El identificador '"+id+"' no existe");
            }
            else{
                if(!sim.tipo.equals("flag")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo flag" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo flag", idright+1,SINTACTICO,
                    new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE TRUE","Error semántico. La variable '"+id+"' no es de tipo flag")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condicion ::= IDENTIFICADOR IGUAL_QUE FALSE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE FALSE","Error sintáctico. La variable '"+id+"' no existe")));
                System.out.println("El identificador '"+id+"' no existe");
            }
            else{
                if(!sim.tipo.equals("flag")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo flag" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo flag", idright+1,SINTACTICO,
                    new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE FALSE","Error semántico. La variable '"+id+"' no es de tipo flag")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentcut ::= CUT PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentcut",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentasignacion ::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        //Buscar variable en la tabla de simbolos
        Simbolo sim = TablaSimbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sim == null) {
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (identificadorright+1) + ". Error semántico. La variable '"+identificador+"' no existe" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+identificador+"' no existe", identificadorright+1,SINTACTICO,
            new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA","Error semántico. La variable '"+identificador+"' no existe")));
            System.out.println("El identificador '"+identificador+"' no existe");
        }
        else{
            if(sim.tipo.equals("just") || sim.tipo.equals("broken")){
                VentanaPrincipal.exp = identificador +"="+ String.valueOf(e);
                resolverExp(VentanaPrincipal.exp);
            }
            else{ 
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (identificadorright+1) + ". Error semántico. La variable '"+identificador+"' no es de algún tipo numérico" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+identificador+"' no es de algún tipo numérico", identificadorright+1,SINTACTICO,
                new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA","Error semántico. La variable '"+identificador+"' no es de algún tipo numérico")));           
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentasignacion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentasignacion ::= IDENTIFICADOR SIGNO_DE_IGUAL TRUE PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Simbolo sim = TablaSimbolos.buscar(identificador);
            //Si es nulo, devuelvo un error
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (vright+1) + ". Error semántico. La variable '"+identificador+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+identificador+"' no existe", vright+1,SINTACTICO,
                new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL TRUE PUNTOYCOMA","Error semántico. La variable '"+identificador+"' no existe")));
                System.out.println("El identificador '"+identificador+"' no existe");
            }else{
                sim.setValor("true");
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentasignacion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentasignacion ::= IDENTIFICADOR SIGNO_DE_IGUAL FALSE PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Simbolo sim = TablaSimbolos.buscar(identificador);
            //Si es nulo, devuelvo un error
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (vright+1) + ". Error semántico. La variable '"+identificador+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+identificador+"' no existe", vright+1,SINTACTICO,
                new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL FALSE PUNTOYCOMA","Error semántico. La variable '"+identificador+"' no existe")));
                System.out.println("El identificador '"+identificador+"' no existe");
            }else{
                sim.setValor("false");
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentasignacion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentasignacion ::= IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            Simbolo sim = TablaSimbolos.buscar(identificador);
            //Si es nulo, devuelvo un error
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (vright+1) + ". Error semántico. La variable '"+identificador+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+identificador+"' no existe", vright+1,SINTACTICO,
                new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO PUNTOYCOMA","Error semántico. La variable '"+identificador+"' no existe")));
                System.out.println("El identificador '"+identificador+"' no existe");
            }else{
                sim.setValor(v);
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentasignacion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentwhile ::= WHILE PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentwhile",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentelse ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (eright+1) + ". Error sintáctico. El bloque 'else' no está bien escrito" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. El bloque 'else' no está bien escrito", eright+1,SINTACTICO,
            new Gramatica("factor::= expresion | NUMERO | DECIMAL | IDENTIFICADOR","Error sintáctico. El bloque 'else' no está bien escrito")));;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentelse",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentelse ::= ELSE LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentelse",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentif ::= error NT$0 sentelse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentif",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (eright+1) + ". Error sintáctico. El bloque 'if' no está bien escrito" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. El bloque 'if' no está bien escrito", eright+1,SINTACTICO,
            new Gramatica("factor::= expresion | NUMERO | DECIMAL | IDENTIFICADOR","Error sintáctico. El bloque 'if' no está bien escrito")));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentif ::= IF PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentif",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // op_log ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_log",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // op_log ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_log",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op_art ::= SIGNO_DE_MULTIPLICACIÓN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op_art ::= SIGNO_DE_DIVISIÓN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op_art ::= SIGNO_DE_RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_art ::= SIGNO_DE_SUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op_rel ::= IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_rel ::= DIFERENTE_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op_rel ::= MENOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op_rel ::= MAYOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_rel ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op_rel ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
       JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (eright+1) + ". Error sintáctico. La expresión no esta bien escrita" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La expresión no esta bien escrita", eright+1,SINTACTICO,
            new Gramatica("factor::= expresion | NUMERO | DECIMAL | IDENTIFICADOR","Error sintáctico. La expresión no esta bien escrita")));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= DECIMAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= NUMERO 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Simbolo sim = TablaSimbolos.buscar(f);
        //Si es nulo, devuelvo un error
        if (sim == null) {
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (fright+1) + ". Error semántico. La variable '"+f+"' no existe" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+f+"' no existe", fright+1,SINTACTICO,
            new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA","Error semántico. La variable '"+f+"' no existe")));
            System.out.println("El identificador '"+f+"' no existe");
                
            RESULT = 0; 
        }
        else{
            System.out.println("*****id: "+sim.valor);  
            RESULT = sim.valor; 
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        //System.out.println("EMPIEZA FACTOR");
        RESULT =  "("+e+")";
        //System.out.println("exp: "+e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; 
        //System.out.println("EMPIEZA TERMINO");
        //System.out.println("factor "+f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termino ::= factor SIGNO_DE_DIVISIÓN factor 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    System.out.println("EMPIEZA TERMINO");
        RESULT = f1+"/"+f2;
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                String str = ((String) f2).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error semántico. No se puede dividir una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede dividir una variable 'just' y una 'word'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede dividir una variable 'just' y una 'word'")));
                }
                else
                    System.out.println("**"+f2+": f2  es varibale");
            }
        }
        if (f1 instanceof String){
            if(f2 instanceof Integer){
                String str = ((String) f1).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error semántico. No se puede dividir una variable 'word' y una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede dividir una variable 'word' y una 'just'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede dividir una variable 'word' y una 'just'")));
                }
            }
        }
        //System.out.println("factor1 "+f1);
        //System.out.println("factor2 "+f2);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // termino ::= factor SIGNO_DE_MULTIPLICACIÓN factor 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = f1+"*"+f2;
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                String str = ((String) f2).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error semántico. No se puede multiplicar una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede multiplicar una variable 'just' y  una 'word'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede multiplicar una variable 'just' y una 'word'")));          
                }
                else
                    System.out.println("**"+f2+": f2  es varibale");                    
            }
        }
        if (f1 instanceof String){
           if(f2 instanceof Integer){
                String str = ((String) f1).substring(0, 1);
                if(str.equals("\"")){
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error semántico. No se puede multiplicar una variable 'word' una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede multiplicar una variable 'word' una 'just'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede multiplicar una variable 'word' una 'just'")));
                }
            }
        }
        //System.out.println("factor1 "+f1);
        //System.out.println("factor2 "+f2);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = t; 
        //System.out.println("EMPIEZA EXPRESION");        
        //System.out.println("termino: "+t);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion SIGNO_DE_RESTA termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (e instanceof Integer){
            if(t instanceof String){
                String str = ((String) t).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (tright+1) + ". Error semántico. No se puede restar una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede restar una variable 'just' y una 'word'", tright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede restar una variable 'just' y una 'word'")));                          
                }
            }
        }
        if (t instanceof Integer){
            if(e instanceof String){
                String str = ((String) e).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (eright+1) + ". Error semántico. No se puede restar una variable 'word' y una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede restar una variable 'word' y una 'just'", eright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede restar una variable 'word' y una 'just'")));                          
                }
            }
        }
        //System.out.println("EMPIEZA EXPRESION");
        RESULT = e+"-"+t;
        //System.out.println("termino: "+t);
        //System.out.println("exp: "+e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion SIGNO_DE_SUMA termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (e instanceof Integer){
            if(t instanceof String){
                String str = ((String) t).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (tright+1) + ". Error semántico. No se puede sumar una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede sumar una variable 'just' y una 'word'", tright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede sumar una variable 'just' y una 'word'")));                          
                }
            }
        }
        if (t instanceof Integer){
            if(e instanceof String){
                String str = ((String) e).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (eright+1) + ". Error semántico. No se puede sumar una variable 'word' y una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede sumar una variable 'word' y una 'just'", eright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede sumar una variable 'word' y una 'just'")));                          
                }
            }
        }

        //System.out.println("EMPIEZA EXPRESION");
        RESULT = e+"+"+t;
        //System.out.println("termino: "+t);
        //System.out.println("exp: "+e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // t_dato ::= FLAG 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT =  td;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // t_dato ::= WORD 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT =  td;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // t_dato ::= JUST 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT =  td;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // t_dato ::= BROKEN 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT =  td;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion ::= WORD IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: WORD "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: WORD "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= WORD IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO PUNTOYCOMA ", "Falta punto y coma en declaración: WORD "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL FALSE 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: FLAG "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: FLAG "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL FALSE PUNTOYCOMA ", "Falta punto y coma en declaración: FLAG "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL TRUE 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: FLAG "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: FLAG "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL TRUE PUNTOYCOMA ", "Falta punto y coma en declaración: FLAG "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: BROKEN "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: BROKEN "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL PUNTOYCOMA ", "Falta punto y coma en declaración: BROKEN "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: JUST "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: JUST "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA", "Falta punto y coma en declaración: JUST "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion ::= WORD IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: WORD "+id );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: WORD "+id, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA ", "Falta punto y coma en declaración: WORD "+id)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion ::= FLAG IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: FLAG "+id );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: FLAG "+id, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= FLAG IDENTIFICADOR PUNTOYCOMA ", "Falta punto y coma en declaración: FLAG "+id)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion ::= BROKEN IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: BROKEN "+id );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: BROKEN "+id, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= BROKEN IDENTIFICADOR PUNTOYCOMA ", "Falta punto y coma en declaración: BROKEN "+id)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion ::= JUST IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: declaración: JUST "+id);   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: JUST "+id, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= JUST IDENTIFICADOR PUNTOYCOMA", "Falta punto y coma en declaración: JUST "+id)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL FALSE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error semántico, el valor '"+valor+"' no corresponde con el tipo de dato." );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico, el valor '"+valor+"' no corresponde con el tipo de dato.", idright+1,SINTACTICO,
            new Gramatica("declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA", "Falta punto y coma en declaración: JUST "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL TRUE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error semántico, el valor '"+valor+"' no corresponde con el tipo de dato." );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico, el valor '"+valor+"' no corresponde con el tipo de dato.", idright+1,SINTACTICO,
            new Gramatica("declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA", "Falta punto y coma en declaración: JUST "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error semántico, el valor '"+valor+"' no corresponde con el tipo de dato." );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico, el valor '"+valor+"' no corresponde con el tipo de dato.", idright+1,SINTACTICO,
            new Gramatica("declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA", "Falta punto y coma en declaración: JUST "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error semántico, el valor '"+valor+"' no corresponde con el tipo de dato." );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico, el valor '"+valor+"' no corresponde con el tipo de dato.", idright+1,SINTACTICO,
            new Gramatica("declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA", "Falta punto y coma en declaración: JUST "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion ::= IDENTIFICADOR IDENTIFICADOR SIGNO_DE_IGUAL NEW IDENTIFICADOR PARENTESIS_ABRE parametrosa PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion ::= t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL LLAVE_ABRE datos_array LLAVE_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion ::= t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL t_dato CORCHETE_ABRE NUMERO CORCHETE_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL FALSE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");       
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= FLAG IDENTIFICADOR = FALSE PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "flag","Variable tipo booleana");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id); 
            }            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL TRUE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");     
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= FLAG IDENTIFICADOR = TRUE PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "flag","Variable tipo booleana");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id); 
            }         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion ::= WORD IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= WORD IDENTIFICADOR = CADENA_TEXTO PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "word","Variable tipo cadena");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);  
            }        
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");     
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO, new Gramatica("declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL PUNTOYCOMA ", "Variable repetido")));
            }else{
                TablaSimbolos.crear(id, "broken","Variable flotante");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");     
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO, new Gramatica("declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL PUNTOYCOMA ", "Variable repetido")));
            }else{
                TablaSimbolos.crear(id, "broken","Variable flotante");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= JUST IDENTIFICADOR = NUMERO PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "just","Variable númerica");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= FLAG IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");    
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= FLAG IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "flag","Variable booleana");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);     
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");    
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "word","Variable tipo cadena");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);      
            }   
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= BROKEN IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        System.out.println(id+" en la linea: "+(idright+1));
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
        //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");    
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= BROKEN IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "broken","Variable flotante");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= JUST IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        System.out.println(id+" en la linea: "+(idright+1));
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
            //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO, 
                new Gramatica("declaracion ::= JUST IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "just","Variable númerica");
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloquesentencias ::= error LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloquesentencias ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloquesentencias ::= give 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloquesentencias ::= bloquesentencias give 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloquesentencias ::= get 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloquesentencias ::= bloquesentencias get 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloquesentencias ::= tryycatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloquesentencias ::= bloquesentencias tryycatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloquesentencias ::= for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloquesentencias ::= bloquesentencias for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloquesentencias ::= metodo_doce_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloquesentencias ::= bloquesentencias metodo_doce_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloquesentencias ::= metodo_nueve_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloquesentencias ::= bloquesentencias metodo_nueve_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloquesentencias ::= metodo_cuatro_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloquesentencias ::= bloquesentencias metodo_cuatro_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloquesentencias ::= metodo_un_parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloquesentencias ::= bloquesentencias metodo_un_parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloquesentencias ::= metodo_sin_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloquesentencias ::= bloquesentencias metodo_sin_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloquesentencias ::= metodos_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloquesentencias ::= bloquesentencias metodos_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloquesentencias ::= main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloquesentencias ::= bloquesentencias main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloquesentencias ::= home 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloquesentencias ::= bloquesentencias home 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloquesentencias ::= metodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloquesentencias ::= bloquesentencias metodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloquesentencias ::= sentcut 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloquesentencias ::= bloquesentencias sentcut 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloquesentencias ::= sentasignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloquesentencias ::= bloquesentencias sentasignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloquesentencias ::= sentwhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloquesentencias ::= bloquesentencias sentwhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloquesentencias ::= sentif 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloquesentencias ::= bloquesentencias sentif 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloquesentencias ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloquesentencias ::= bloquesentencias declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));
            
            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= declaracion IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        System.out.println("Linea: "+nombreright);
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

