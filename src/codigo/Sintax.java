
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 28 19:41:42 MDT 2021
//----------------------------------------------------

package codigo;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 28 19:41:42 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\003\010\000\002\003" +
    "\011\000\002\003\016\000\002\003\004\000\002\021\003" +
    "\000\002\021\002\000\002\022\004\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\004\000\002\023\004\000\002\023\003\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\007" +
    "\000\002\020\007\000\002\020\007\000\002\020\007\000" +
    "\002\020\014\000\002\020\013\000\002\020\013\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\027\012\000\002\030" +
    "\006\000\002\030\002\000\002\031\011\000\002\032\006" +
    "\000\002\033\004\000\002\042\005\000\002\070\006\000" +
    "\002\070\007\000\002\070\015\000\002\070\027\000\002" +
    "\070\035\000\002\075\003\000\002\075\003\000\002\074" +
    "\003\000\002\074\003\000\002\073\003\000\002\073\003" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\067\012" +
    "\000\002\067\007\000\002\066\011\000\002\101\010\000" +
    "\002\076\005\000\002\076\003\000\002\076\002\000\002" +
    "\100\004\000\002\077\003\000\002\077\005\000\002\106" +
    "\003\000\002\106\003\000\002\011\011\000\002\013\011" +
    "\000\002\013\013\000\002\004\005\000\002\004\004\000" +
    "\002\004\004\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\010\000\002\103" +
    "\016\000\002\104\007\000\002\105\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\016\003\012\004\013\011\005\012\011\013" +
    "\014\014\007\001\002\000\004\113\365\001\002\000\006" +
    "\004\uffce\113\uffce\001\002\000\004\002\364\001\002\000" +
    "\006\004\355\113\uffcb\001\002\000\004\004\347\001\002" +
    "\000\006\004\342\113\uffcd\001\002\000\004\051\341\001" +
    "\002\000\006\004\022\107\023\001\002\000\006\004\015" +
    "\113\uffcc\001\002\000\006\066\017\115\016\001\002\000" +
    "\046\003\uffd7\004\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\035\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\046\uffd7\050" +
    "\uffd7\052\uffd7\061\uffd7\062\uffd7\065\uffd7\112\uffd7\001\002" +
    "\000\004\006\020\001\002\000\004\115\021\001\002\000" +
    "\046\003\uffd4\004\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\046\uffd4\050" +
    "\uffd4\052\uffd4\061\uffd4\062\uffd4\065\uffd4\112\uffd4\001\002" +
    "\000\004\066\325\001\002\000\004\110\024\001\002\000" +
    "\004\051\025\001\002\000\044\003\055\004\044\011\005" +
    "\012\011\013\014\014\007\035\ufffb\037\047\040\077\041" +
    "\042\042\052\046\073\050\066\052\037\061\054\062\061" +
    "\065\050\001\002\000\046\003\uffe3\004\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\046\uffe3\050\uffe3\052\uffe3\061\uffe3\062\uffe3\065" +
    "\uffe3\112\uffe3\001\002\000\046\003\uffe5\004\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\035\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\046\uffe5\050\uffe5\052\uffe5\061\uffe5\062\uffe5" +
    "\065\uffe5\112\uffe5\001\002\000\046\003\ufff4\004\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\035\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\046\ufff4\050\ufff4\052\ufff4\061\ufff4\062" +
    "\ufff4\065\ufff4\112\ufff4\001\002\000\046\003\uffe1\004\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\035\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\046\uffe1\050\uffe1\052\uffe1\061\uffe1" +
    "\062\uffe1\065\uffe1\112\uffe1\001\002\000\046\003\uffed\004" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\035\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\046\uffed\050\uffed\052\uffed\061" +
    "\uffed\062\uffed\065\uffed\112\uffed\001\002\000\046\003\uffee" +
    "\004\uffee\011\uffee\012\uffee\013\uffee\014\uffee\035\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\046\uffee\050\uffee\052\uffee" +
    "\061\uffee\062\uffee\065\uffee\112\uffee\001\002\000\046\003" +
    "\uffef\004\uffef\011\uffef\012\uffef\013\uffef\014\uffef\035\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\046\uffef\050\uffef\052" +
    "\uffef\061\uffef\062\uffef\065\uffef\112\uffef\001\002\000\046" +
    "\003\ufff7\004\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\035" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\046\ufff7\050\ufff7" +
    "\052\ufff7\061\ufff7\062\ufff7\065\ufff7\112\ufff7\001\002\000" +
    "\046\003\uffe0\004\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\046\uffe0\050" +
    "\uffe0\052\uffe0\061\uffe0\062\uffe0\065\uffe0\112\uffe0\001\002" +
    "\000\004\004\321\001\002\000\046\003\ufff2\004\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\035\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\046\ufff2\050\ufff2\052\ufff2\061\ufff2\062" +
    "\ufff2\065\ufff2\112\ufff2\001\002\000\046\003\uffe2\004\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\035\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\046\uffe2\050\uffe2\052\uffe2\061\uffe2" +
    "\062\uffe2\065\uffe2\112\uffe2\001\002\000\004\107\252\001" +
    "\002\000\046\003\uffeb\004\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\046" +
    "\uffeb\050\uffeb\052\uffeb\061\uffeb\062\uffeb\065\uffeb\112\uffeb" +
    "\001\002\000\010\004\022\066\241\107\242\001\002\000" +
    "\046\003\uffec\004\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec\046\uffec\050" +
    "\uffec\052\uffec\061\uffec\062\uffec\065\uffec\112\uffec\001\002" +
    "\000\046\003\ufff0\004\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\035\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\046\ufff0" +
    "\050\ufff0\052\ufff0\061\ufff0\062\ufff0\065\ufff0\112\ufff0\001" +
    "\002\000\004\107\235\001\002\000\004\107\230\001\002" +
    "\000\046\003\uffe8\004\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\046\uffe8" +
    "\050\uffe8\052\uffe8\061\uffe8\062\uffe8\065\uffe8\112\uffe8\001" +
    "\002\000\004\107\215\001\002\000\006\035\ufffc\112\ufffc" +
    "\001\002\000\004\004\176\001\002\000\006\112\174\115" +
    "\175\001\002\000\046\003\uffe6\004\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\046\uffe6\050\uffe6\052\uffe6\061\uffe6\062\uffe6\065\uffe6" +
    "\112\uffe6\001\002\000\046\003\ufff5\004\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\046\ufff5\050\ufff5\052\ufff5\061\ufff5\062\ufff5\065" +
    "\ufff5\112\ufff5\001\002\000\046\003\uffdc\004\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\035\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\046\uffdc\050\uffdc\052\uffdc\061\uffdc\062\uffdc" +
    "\065\uffdc\112\uffdc\001\002\000\004\111\161\001\002\000" +
    "\046\003\ufff3\004\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\035\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\046\ufff3\050" +
    "\ufff3\052\ufff3\061\ufff3\062\ufff3\065\ufff3\112\ufff3\001\002" +
    "\000\046\003\uffe7\004\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\046\uffe7" +
    "\050\uffe7\052\uffe7\061\uffe7\062\uffe7\065\uffe7\112\uffe7\001" +
    "\002\000\046\003\uffe4\004\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\046" +
    "\uffe4\050\uffe4\052\uffe4\061\uffe4\062\uffe4\065\uffe4\112\uffe4" +
    "\001\002\000\046\003\uffe9\004\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\046\uffe9\050\uffe9\052\uffe9\061\uffe9\062\uffe9\065\uffe9\112" +
    "\uffe9\001\002\000\004\115\160\001\002\000\046\003\ufff1" +
    "\004\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\035\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\046\ufff1\050\ufff1\052\ufff1" +
    "\061\ufff1\062\ufff1\065\ufff1\112\ufff1\001\002\000\046\003" +
    "\ufff6\004\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\035\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\046\ufff6\050\ufff6\052" +
    "\ufff6\061\ufff6\062\ufff6\065\ufff6\112\ufff6\001\002\000\046" +
    "\003\uffea\004\uffea\011\uffea\012\uffea\013\uffea\014\uffea\035" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\046\uffea\050\uffea" +
    "\052\uffea\061\uffea\062\uffea\065\uffea\112\uffea\001\002\000" +
    "\046\003\uffdf\004\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\046\uffdf\050" +
    "\uffdf\052\uffdf\061\uffdf\062\uffdf\065\uffdf\112\uffdf\001\002" +
    "\000\004\107\117\001\002\000\046\003\055\004\044\011" +
    "\005\012\011\013\014\014\007\035\ufff9\037\047\040\077" +
    "\041\042\042\052\046\073\050\066\052\037\061\054\062" +
    "\061\065\050\112\ufff9\001\002\000\046\003\uffd9\004\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\035\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\046\uffd9\050\uffd9\052\uffd9\061\uffd9" +
    "\062\uffd9\065\uffd9\112\uffd9\001\002\000\046\003\uffdd\004" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\035\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\046\uffdd\050\uffdd\052\uffdd\061" +
    "\uffdd\062\uffdd\065\uffdd\112\uffdd\001\002\000\004\107\112" +
    "\001\002\000\046\003\ufff8\004\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\046\ufff8\050\ufff8\052\ufff8\061\ufff8\062\ufff8\065\ufff8\112" +
    "\ufff8\001\002\000\046\003\uffde\004\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\035\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\046\uffde\050\uffde\052\uffde\061\uffde\062\uffde\065\uffde" +
    "\112\uffde\001\002\000\004\035\103\001\002\000\006\002" +
    "\000\004\104\001\002\000\004\107\105\001\002\000\004" +
    "\110\106\001\002\000\004\051\107\001\002\000\044\003" +
    "\055\004\044\011\005\012\011\013\014\014\007\035\ufffb" +
    "\037\047\040\077\041\042\042\052\046\073\050\066\052" +
    "\037\061\054\062\061\065\050\001\002\000\004\035\111" +
    "\001\002\000\004\002\ufffe\001\002\000\004\004\113\001" +
    "\002\000\004\110\114\001\002\000\004\115\115\001\002" +
    "\000\046\003\uff7b\004\uff7b\011\uff7b\012\uff7b\013\uff7b\014" +
    "\uff7b\035\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\046\uff7b" +
    "\050\uff7b\052\uff7b\061\uff7b\062\uff7b\065\uff7b\112\uff7b\001" +
    "\002\000\006\035\ufffa\112\ufffa\001\002\000\016\004\131" +
    "\005\123\006\124\007\121\010\126\107\122\001\002\000" +
    "\026\066\uffc7\067\155\070\154\101\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\110\uffc7\115\uffc7\001\002\000\032\066" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\101\uffbf\102\uffbf" +
    "\103\uffbf\104\uffbf\105\uffbf\110\uffbf\115\uffbf\001\002\000" +
    "\016\004\131\005\123\006\124\007\121\010\126\107\122" +
    "\001\002\000\032\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072" +
    "\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\110\uffc1" +
    "\115\uffc1\001\002\000\032\066\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2" +
    "\110\uffc2\115\uffc2\001\002\000\016\066\146\101\144\102" +
    "\142\103\147\104\145\105\150\001\002\000\032\066\uffc0" +
    "\067\uffc0\070\uffc0\071\uffc0\072\uffc0\101\uffc0\102\uffc0\103" +
    "\uffc0\104\uffc0\105\uffc0\110\uffc0\115\uffc0\001\002\000\004" +
    "\110\136\001\002\000\032\066\uffc4\067\uffc4\070\uffc4\071" +
    "\132\072\133\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\110\uffc4\115\uffc4\001\002\000\032\066\uffc3\067\uffc3\070" +
    "\uffc3\071\uffc3\072\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\110\uffc3\115\uffc3\001\002\000\014\004\131\005" +
    "\123\006\124\007\121\010\126\001\002\000\014\004\131" +
    "\005\123\006\124\007\121\010\126\001\002\000\026\066" +
    "\uffc5\067\uffc5\070\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5" +
    "\105\uffc5\110\uffc5\115\uffc5\001\002\000\026\066\uffc6\067" +
    "\uffc6\070\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6" +
    "\110\uffc6\115\uffc6\001\002\000\004\111\137\001\002\000" +
    "\044\003\055\004\044\011\005\012\011\013\014\014\007" +
    "\037\047\040\077\041\042\042\052\046\073\050\066\052" +
    "\037\061\054\062\061\065\050\112\ufffb\001\002\000\004" +
    "\112\141\001\002\000\046\003\uffaf\004\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\046\uffaf\050\uffaf\052\uffaf\061\uffaf\062\uffaf\065" +
    "\uffaf\112\uffaf\001\002\000\016\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\107\uffbe\001\002\000\016\004\131\005" +
    "\123\006\124\007\121\010\126\107\122\001\002\000\016" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\107\uffbd\001" +
    "\002\000\016\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\107\uffbc\001\002\000\016\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\107\uffb9\001\002\000\016\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\107\uffbb\001\002\000\016\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\107\uffba\001\002" +
    "\000\004\110\uffac\001\002\000\004\110\153\001\002\000" +
    "\022\066\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8" +
    "\110\uffc8\115\uffc8\001\002\000\016\004\131\005\123\006" +
    "\124\007\121\010\126\107\122\001\002\000\016\004\131" +
    "\005\123\006\124\007\121\010\126\107\122\001\002\000" +
    "\022\066\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca" +
    "\110\uffca\115\uffca\001\002\000\022\066\uffc9\101\uffc9\102" +
    "\uffc9\103\uffc9\104\uffc9\105\uffc9\110\uffc9\115\uffc9\001\002" +
    "\000\046\003\uffad\004\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\035\uffad\037\uffad\040\uffad\041\uffad\042\uffad\046\uffad" +
    "\050\uffad\052\uffad\061\uffad\062\uffad\065\uffad\112\uffad\001" +
    "\002\000\044\003\055\004\044\011\005\012\011\013\014" +
    "\014\007\037\047\040\077\041\042\042\052\046\073\050" +
    "\066\052\037\061\054\062\061\065\050\112\ufffb\001\002" +
    "\000\004\112\163\001\002\000\004\063\164\001\002\000" +
    "\004\107\165\001\002\000\004\004\166\001\002\000\004" +
    "\004\167\001\002\000\004\110\170\001\002\000\004\111" +
    "\171\001\002\000\044\003\055\004\044\011\005\012\011" +
    "\013\014\014\007\037\047\040\077\041\042\042\052\046" +
    "\073\050\066\052\037\061\054\062\061\065\050\112\ufffb" +
    "\001\002\000\004\112\173\001\002\000\046\003\uff7d\004" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\035\uff7d\037\uff7d" +
    "\040\uff7d\041\uff7d\042\uff7d\046\uff7d\050\uff7d\052\uff7d\061" +
    "\uff7d\062\uff7d\065\uff7d\112\uff7d\001\002\000\046\003\uffda" +
    "\004\uffda\011\uffda\012\uffda\013\uffda\014\uffda\035\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\046\uffda\050\uffda\052\uffda" +
    "\061\uffda\062\uffda\065\uffda\112\uffda\001\002\000\046\003" +
    "\uffdb\004\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\035\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\046\uffdb\050\uffdb\052" +
    "\uffdb\061\uffdb\062\uffdb\065\uffdb\112\uffdb\001\002\000\004" +
    "\107\177\001\002\000\014\011\005\012\202\013\200\014" +
    "\204\110\uff8e\001\002\000\006\004\uffcc\113\uffcc\001\002" +
    "\000\004\110\211\001\002\000\006\004\uffcd\113\uffcd\001" +
    "\002\000\006\110\uff8f\116\207\001\002\000\006\004\uffcb" +
    "\113\uffcb\001\002\000\004\004\206\001\002\000\006\110" +
    "\uff8d\116\uff8d\001\002\000\014\011\005\012\202\013\200" +
    "\014\204\110\uff8e\001\002\000\004\110\uff90\001\002\000" +
    "\004\111\212\001\002\000\044\003\055\004\044\011\005" +
    "\012\011\013\014\014\007\037\047\040\077\041\042\042" +
    "\052\046\073\050\066\052\037\061\054\062\061\065\050" +
    "\112\ufffb\001\002\000\004\112\214\001\002\000\046\003" +
    "\uff94\004\uff94\011\uff94\012\uff94\013\uff94\014\uff94\035\uff94" +
    "\037\uff94\040\uff94\041\uff94\042\uff94\046\uff94\050\uff94\052" +
    "\uff94\061\uff94\062\uff94\065\uff94\112\uff94\001\002\000\016" +
    "\004\131\005\123\006\124\007\121\010\126\107\122\001" +
    "\002\000\004\110\217\001\002\000\004\111\220\001\002" +
    "\000\044\003\055\004\044\011\005\012\011\013\014\014" +
    "\007\037\047\040\077\041\042\042\052\046\073\050\066" +
    "\052\037\061\054\062\061\065\050\112\ufffb\001\002\000" +
    "\004\112\222\001\002\000\050\003\uffb0\004\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\035\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\223\046\uffb0\050\uffb0\052\uffb0\061\uffb0" +
    "\062\uffb0\065\uffb0\112\uffb0\001\002\000\004\111\225\001" +
    "\002\000\046\003\uffb2\004\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\046" +
    "\uffb2\050\uffb2\052\uffb2\061\uffb2\062\uffb2\065\uffb2\112\uffb2" +
    "\001\002\000\044\003\055\004\044\011\005\012\011\013" +
    "\014\014\007\037\047\040\077\041\042\042\052\046\073" +
    "\050\066\052\037\061\054\062\061\065\050\112\ufffb\001" +
    "\002\000\004\112\227\001\002\000\046\003\uffb1\004\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\035\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\046\uffb1\050\uffb1\052\uffb1\061\uffb1" +
    "\062\uffb1\065\uffb1\112\uffb1\001\002\000\004\110\231\001" +
    "\002\000\004\111\232\001\002\000\044\003\055\004\044" +
    "\011\005\012\011\013\014\014\007\037\047\040\077\041" +
    "\042\042\052\046\073\050\066\052\037\061\054\062\061" +
    "\065\050\112\ufffb\001\002\000\004\112\234\001\002\000" +
    "\046\003\uff91\004\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\035\uff91\037\uff91\040\uff91\041\uff91\042\uff91\046\uff91\050" +
    "\uff91\052\uff91\061\uff91\062\uff91\065\uff91\112\uff91\001\002" +
    "\000\004\006\236\001\002\000\004\110\237\001\002\000" +
    "\004\115\240\001\002\000\046\003\uff7c\004\uff7c\011\uff7c" +
    "\012\uff7c\013\uff7c\014\uff7c\035\uff7c\037\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\046\uff7c\050\uff7c\052\uff7c\061\uff7c\062\uff7c" +
    "\065\uff7c\112\uff7c\001\002\000\016\004\131\005\123\006" +
    "\124\007\121\010\126\107\122\001\002\000\014\011\005" +
    "\012\202\013\200\014\204\110\uff8e\001\002\000\004\110" +
    "\244\001\002\000\004\111\245\001\002\000\044\003\055" +
    "\004\044\011\005\012\011\013\014\014\007\037\047\040" +
    "\077\041\042\042\052\046\073\050\066\052\037\061\054" +
    "\062\061\065\050\112\ufffb\001\002\000\004\112\247\001" +
    "\002\000\046\003\uff92\004\uff92\011\uff92\012\uff92\013\uff92" +
    "\014\uff92\035\uff92\037\uff92\040\uff92\041\uff92\042\uff92\046" +
    "\uff92\050\uff92\052\uff92\061\uff92\062\uff92\065\uff92\112\uff92" +
    "\001\002\000\004\115\251\001\002\000\046\003\uffae\004" +
    "\uffae\011\uffae\012\uffae\013\uffae\014\uffae\035\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\046\uffae\050\uffae\052\uffae\061" +
    "\uffae\062\uffae\065\uffae\112\uffae\001\002\000\006\004\254" +
    "\012\253\001\002\000\004\004\311\001\002\000\004\066" +
    "\262\001\002\000\004\110\256\001\002\000\004\111\257" +
    "\001\002\000\044\003\055\004\044\011\005\012\011\013" +
    "\014\014\007\037\047\040\077\041\042\042\052\046\073" +
    "\050\066\052\037\061\054\062\061\065\050\112\ufffb\001" +
    "\002\000\004\112\261\001\002\000\046\003\uff88\004\uff88" +
    "\011\uff88\012\uff88\013\uff88\014\uff88\035\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\046\uff88\050\uff88\052\uff88\061\uff88" +
    "\062\uff88\065\uff88\112\uff88\001\002\000\004\005\263\001" +
    "\002\000\004\115\264\001\002\000\004\004\266\001\002" +
    "\000\004\115\301\001\002\000\020\066\146\101\144\102" +
    "\142\103\147\104\145\105\150\117\267\001\002\000\004" +
    "\036\275\001\002\000\012\004\273\005\271\007\272\010" +
    "\274\001\002\000\004\115\uff80\001\002\000\004\115\uff82" +
    "\001\002\000\004\115\uff7f\001\002\000\004\115\uff81\001" +
    "\002\000\004\107\276\001\002\000\004\006\277\001\002" +
    "\000\004\110\300\001\002\000\004\115\uff7e\001\002\000" +
    "\006\004\303\077\304\001\002\000\004\110\uff87\001\002" +
    "\000\006\066\307\077\306\001\002\000\004\004\305\001" +
    "\002\000\006\110\uff83\115\uff83\001\002\000\006\110\uff84" +
    "\115\uff84\001\002\000\004\005\310\001\002\000\006\110" +
    "\uff85\115\uff85\001\002\000\004\066\312\001\002\000\004" +
    "\005\313\001\002\000\004\115\314\001\002\000\004\004" +
    "\266\001\002\000\004\115\316\001\002\000\006\004\303" +
    "\077\304\001\002\000\004\115\320\001\002\000\004\110" +
    "\uff86\001\002\000\004\107\322\001\002\000\004\110\323" +
    "\001\002\000\004\115\324\001\002\000\046\003\uff93\004" +
    "\uff93\011\uff93\012\uff93\013\uff93\014\uff93\035\uff93\037\uff93" +
    "\040\uff93\041\uff93\042\uff93\046\uff93\050\uff93\052\uff93\061" +
    "\uff93\062\uff93\065\uff93\112\uff93\001\002\000\004\054\326" +
    "\001\002\000\004\004\327\001\002\000\004\107\330\001" +
    "\002\000\006\004\332\005\331\001\002\000\006\110\uff89" +
    "\116\uff89\001\002\000\006\110\uff8a\116\uff8a\001\002\000" +
    "\004\110\337\001\002\000\006\110\uff8c\116\335\001\002" +
    "\000\006\004\332\005\331\001\002\000\004\110\uff8b\001" +
    "\002\000\004\115\340\001\002\000\046\003\uffcf\004\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\035\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\046\uffcf\050\uffcf\052\uffcf\061\uffcf" +
    "\062\uffcf\065\uffcf\112\uffcf\001\002\000\004\002\ufffd\001" +
    "\002\000\006\066\344\115\343\001\002\000\046\003\uffd8" +
    "\004\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\035\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\046\uffd8\050\uffd8\052\uffd8" +
    "\061\uffd8\062\uffd8\065\uffd8\112\uffd8\001\002\000\004\005" +
    "\345\001\002\000\004\115\346\001\002\000\046\003\uffd5" +
    "\004\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\035\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\046\uffd5\050\uffd5\052\uffd5" +
    "\061\uffd5\062\uffd5\065\uffd5\112\uffd5\001\002\000\004\107" +
    "\350\001\002\000\004\110\351\001\002\000\004\051\352" +
    "\001\002\000\044\003\055\004\044\011\005\012\011\013" +
    "\014\014\007\035\ufffb\037\047\040\077\041\042\042\052" +
    "\046\073\050\066\052\037\061\054\062\061\065\050\001" +
    "\002\000\004\035\354\001\002\000\004\002\uffff\001\002" +
    "\000\006\066\357\115\356\001\002\000\046\003\uffd6\004" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\035\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\046\uffd6\050\uffd6\052\uffd6\061" +
    "\uffd6\062\uffd6\065\uffd6\112\uffd6\001\002\000\006\007\360" +
    "\010\361\001\002\000\004\115\363\001\002\000\004\115" +
    "\362\001\002\000\046\003\uffd2\004\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\046\uffd2\050\uffd2\052\uffd2\061\uffd2\062\uffd2\065\uffd2" +
    "\112\uffd2\001\002\000\046\003\uffd3\004\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\046\uffd3\050\uffd3\052\uffd3\061\uffd3\062\uffd3\065" +
    "\uffd3\112\uffd3\001\002\000\004\002\001\001\002\000\004" +
    "\114\366\001\002\000\004\004\367\001\002\000\004\066" +
    "\370\001\002\000\014\011\005\012\202\013\200\014\204" +
    "\111\371\001\002\000\002\001\002\000\004\113\373\001" +
    "\002\000\004\005\374\001\002\000\004\114\375\001\002" +
    "\000\004\115\376\001\002\000\046\003\uffd1\004\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\035\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\046\uffd1\050\uffd1\052\uffd1\061\uffd1\062" +
    "\uffd1\065\uffd1\112\uffd1\001\002\000\004\112\u0100\001\002" +
    "\000\004\115\u0101\001\002\000\046\003\uffd0\004\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\035\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\046\uffd0\050\uffd0\052\uffd0\061\uffd0\062" +
    "\uffd0\065\uffd0\112\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\010\002\003\003\005\020\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\002\003\011\071\020\077\021\101\022" +
    "\052\023\073\027\034\031\067\032\056\033\027\044\037" +
    "\045\066\046\045\047\033\050\032\051\031\052\044\053" +
    "\042\054\070\055\064\056\050\057\062\060\055\061\026" +
    "\062\063\063\025\064\040\065\074\066\030\067\061\101" +
    "\035\103\100\104\075\105\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\002\003\011\071\020\077" +
    "\022\115\023\073\027\034\031\067\032\056\033\027\044" +
    "\037\045\066\046\045\047\033\050\032\051\031\052\044" +
    "\053\042\054\070\055\064\056\050\057\062\060\055\061" +
    "\026\062\063\063\025\064\040\065\074\066\030\067\061" +
    "\101\035\103\100\104\075\105\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\002\003\011\071\020\077\021\107\022\052\023\073\027" +
    "\034\031\067\032\056\033\027\044\037\045\066\046\045" +
    "\047\033\050\032\051\031\052\044\053\042\054\070\055" +
    "\064\056\050\057\062\060\055\061\026\062\063\063\025" +
    "\064\040\065\074\066\030\067\061\101\035\103\100\104" +
    "\075\105\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\124\025\117" +
    "\026\127\042\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\151\025\117\026\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\134\001\001\000\004\026\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\106\002\003\011\071\020\077\021\137\022\052\023" +
    "\073\027\034\031\067\032\056\033\027\044\037\045\066" +
    "\046\045\047\033\050\032\051\031\052\044\053\042\054" +
    "\070\055\064\056\050\057\062\060\055\061\026\062\063" +
    "\063\025\064\040\065\074\066\030\067\061\101\035\103" +
    "\100\104\075\105\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\150\025\117\026" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\156" +
    "\025\117\026\127\001\001\000\010\024\155\025\117\026" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\002\003\011\071\020\077\021\161\022" +
    "\052\023\073\027\034\031\067\032\056\033\027\044\037" +
    "\045\066\046\045\047\033\050\032\051\031\052\044\053" +
    "\042\054\070\055\064\056\050\057\062\060\055\061\026" +
    "\062\063\063\025\064\040\065\074\066\030\067\061\101" +
    "\035\103\100\104\075\105\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\002\003\011\071\020\077\021\171\022\052\023\073\027" +
    "\034\031\067\032\056\033\027\044\037\045\066\046\045" +
    "\047\033\050\032\051\031\052\044\053\042\054\070\055" +
    "\064\056\050\057\062\060\055\061\026\062\063\063\025" +
    "\064\040\065\074\066\030\067\061\101\035\103\100\104" +
    "\075\105\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\204\076\200\100\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\204\076\207\100\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\106\002\003\011\071\020\077\021\212" +
    "\022\052\023\073\027\034\031\067\032\056\033\027\044" +
    "\037\045\066\046\045\047\033\050\032\051\031\052\044" +
    "\053\042\054\070\055\064\056\050\057\062\060\055\061" +
    "\026\062\063\063\025\064\040\065\074\066\030\067\061" +
    "\101\035\103\100\104\075\105\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\124\025\117\026\127" +
    "\042\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\106\002\003\011\071\020\077\021\220\022\052\023\073" +
    "\027\034\031\067\032\056\033\027\044\037\045\066\046" +
    "\045\047\033\050\032\051\031\052\044\053\042\054\070" +
    "\055\064\056\050\057\062\060\055\061\026\062\063\063" +
    "\025\064\040\065\074\066\030\067\061\101\035\103\100" +
    "\104\075\105\057\001\001\000\002\001\001\000\004\030" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\002\003\011\071\020\077\021\225\022\052\023\073\027" +
    "\034\031\067\032\056\033\027\044\037\045\066\046\045" +
    "\047\033\050\032\051\031\052\044\053\042\054\070\055" +
    "\064\056\050\057\062\060\055\061\026\062\063\063\025" +
    "\064\040\065\074\066\030\067\061\101\035\103\100\104" +
    "\075\105\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\002\003\011" +
    "\071\020\077\021\232\022\052\023\073\027\034\031\067" +
    "\032\056\033\027\044\037\045\066\046\045\047\033\050" +
    "\032\051\031\052\044\053\042\054\070\055\064\056\050" +
    "\057\062\060\055\061\026\062\063\063\025\064\040\065" +
    "\074\066\030\067\061\101\035\103\100\104\075\105\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\247\025\117\026\127\001\001\000\010\002" +
    "\204\076\242\100\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\002\003\011\071\020\077\021\245\022" +
    "\052\023\073\027\034\031\067\032\056\033\027\044\037" +
    "\045\066\046\045\047\033\050\032\051\031\052\044\053" +
    "\042\054\070\055\064\056\050\057\062\060\055\061\026" +
    "\062\063\063\025\064\040\065\074\066\030\067\061\101" +
    "\035\103\100\104\075\105\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\002\003\011" +
    "\071\020\077\021\257\022\052\023\073\027\034\031\067" +
    "\032\056\033\027\044\037\045\066\046\045\047\033\050" +
    "\032\051\031\052\044\053\042\054\070\055\064\056\050" +
    "\057\062\060\055\061\026\062\063\063\025\064\040\065" +
    "\074\066\030\067\061\101\035\103\100\104\075\105\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\264\001\001\000\002" +
    "\001\001\000\004\037\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\314\001\001\000\002\001\001" +
    "\000\004\004\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\077\332\106\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\077\335\106\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\106\002\003\011\071\020\077" +
    "\021\352\022\052\023\073\027\034\031\067\032\056\033" +
    "\027\044\037\045\066\046\045\047\033\050\032\051\031" +
    "\052\044\053\042\054\070\055\064\056\050\057\062\060" +
    "\055\061\026\062\063\063\025\064\040\065\074\066\030" +
    "\067\061\101\035\103\100\104\075\105\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\371\001\001\000\004\014\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static TablaSimbolos tablaSimbolos = new TablaSimbolos();
    static int verificarTipo = 0;
    static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
        System.out.println("EMPEZAMOS");
		new Sintax(new LexerCup(System.in)).parse();
	}
    
    private Symbol s;
    
    //public void syntax_error(Symbol s){
    //    this.s = s;
    //}

    public Symbol getS(){
        return this.s;
    }

    public void syntax_error(Symbol s){
        VentanaPrincipal.notificar_er(">Linea: "+(s.right+1)+" Error de sintaxis, cadena inesperada: "+ s.value );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        VentanaPrincipal.notificar_er(">Linea: "+(s.right+1)+" Error de sintaxis, cadena inesperada: "+ s.value );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


        Hashtable table = new Hashtable();
    
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // give ::= GIVE PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("give",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // get ::= GET PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tryycatch ::= CHECK LLAVE_ABRE bloquesentencias LLAVE_CIERRA TRAP PARENTESIS_ABRE IDENTIFICADOR IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tryycatch",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_booleana ::= IDENTIFICADOR PUNTO SAME PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_booleana ::= IDENTIFICADOR op_rel IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia_booleana ::= IDENTIFICADOR op_rel NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia_booleana ::= IDENTIFICADOR op_rel FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia_booleana ::= IDENTIFICADOR op_rel TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // declaracion_for ::= MAS_MAS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // declaracion_for ::= IDENTIFICADOR MAS_MAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // declaracion_for ::= IDENTIFICADOR SIGNO_DE_IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia_for ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA sentencia_booleana PUNTOYCOMA declaracion_for PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_for ::= IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA sentencia_booleana PUNTOYCOMA declaracion_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for ::= FOR PARENTESIS_ABRE sentencia_for PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametroa ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametroa ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametrosa ::= parametroa COMA parametrosa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosa",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametrosa ::= parametroa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosa",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametro ::= t_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametro",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // main ::= MAIN PARENTESIS_ABRE PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // constructor ::= IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constructor",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // metodo ::= MODEL IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // metodo ::= METHOD IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // metodo_sin_parametros ::= GETTEMPERATURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // metodo_sin_parametros ::= HOME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // metodo_sin_parametros ::= GETFILAMENTTYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // metodo_sin_parametros ::= GETFILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // metodo_sin_parametros ::= SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // metodo_sin_parametros ::= GETEXTRUSORZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // metodo_sin_parametros ::= GETEXTRUSORY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // metodo_sin_parametros ::= GETEXTRUSORX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // metodo_sin_parametros ::= STOP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // metodo_un_parametro ::= PRINTERPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_un_parametro",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // metodo_un_parametro ::= SETNEWFILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_un_parametro",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // metodo_un_parametro ::= SETFILAMENTTYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_un_parametro",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // metodo_cuatro_parametros ::= FILLCIRCLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_cuatro_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // metodo_cuatro_parametros ::= DRAWCIRCLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_cuatro_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // metodo_nueve_parametros ::= DRAWTRIANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_nueve_parametros",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // metodo_nueve_parametros ::= FILLTRIANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_nueve_parametros",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // metodo_doce_parametros ::= DRAWRECTANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_doce_parametros",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // metodo_doce_parametros ::= FILLRECTANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_doce_parametros",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // metodos_parametros ::= metodo_doce_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // metodos_parametros ::= metodo_nueve_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // metodos_parametros ::= metodo_cuatro_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // metodos_parametros ::= metodo_un_parametro PARENTESIS_ABRE NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // metodos_parametros ::= metodo_sin_parametros PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicion ::= expresion op_rel expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentcut ::= CUT PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentcut",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentasignacion ::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        //Buscar variable en la tabla de simbolos
        Simbolo sim = TablaSimbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sim == null) {
            //Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
            //RESULT = 0;
            System.out.println("El:"+identificador+" Variable no existe");
        }
        else{
            //RESULT = sim.valor;
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentasignacion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentwhile ::= WHILE PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentwhile",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentelse ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentelse",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentelse ::= ELSE LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentelse",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentif ::= IF PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA sentelse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentif",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op_log ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_log",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op_log ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_log",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op_art ::= SIGNO_DE_MULTIPLICACIÓN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op_art ::= SIGNO_DE_DIVISIÓN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op_art ::= SIGNO_DE_RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op_art ::= SIGNO_DE_SUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op_rel ::= SIGNO_DE_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op_rel ::= DIFERENTE_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_rel ::= MENOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_rel ::= MAYOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_rel ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_rel ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= TRUE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= NUMERO 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= CADENA_TEXTO 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // termino ::= factor SIGNO_DE_DIVISIÓN factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // termino ::= factor SIGNO_DE_MULTIPLICACIÓN factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = t; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= termino SIGNO_DE_RESTA expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= termino SIGNO_DE_SUMA expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // t_dato ::= FLAG 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // t_dato ::= WORD 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // t_dato ::= JUST 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // t_dato ::= BROKEN 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion ::= IDENTIFICADOR IDENTIFICADOR SIGNO_DE_IGUAL NEW IDENTIFICADOR PARENTESIS_ABRE parametrosa PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL LLAVE_ABRE datos_array LLAVE_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL t_dato CORCHETE_ABRE NUMERO CORCHETE_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL FALSE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable booleana");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL TRUE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable boolena");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= WORD IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable de texto");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable numérica");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= FLAG IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(id, "flag","Variable boolean");

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(id);        
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(id, "word","Variable de texto");

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(id);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion ::= JUST IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(id, "just","Variable númerica");

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(id);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= printerport 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= error LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= give 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= get 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= tryycatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= constructor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= home 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= fillcircle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= drawcircle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= sleep 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= drawrectangle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= fillrectangle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= drawtriangle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= gettemperature 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= getfilament 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= setnewfilament 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= getfilamenttype 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= getextrusorz 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= getextrusory 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= getextrusorx 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= stop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= setfilamenttype 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= filltriangle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= metodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= sentcut 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= sentasignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= sentwhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= sentif 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencias",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencias",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloquesentencias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloquesentencias ::= sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));
            
            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= declaracion IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

