
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 25 19:27:14 CDT 2021
//----------------------------------------------------

package codigo;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 25 19:27:14 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\003\010\000\002\003" +
    "\011\000\002\003\016\000\002\003\004\000\002\021\003" +
    "\000\002\021\002\000\002\022\004\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\004\000\002\023\004\000\002\023\003\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\007" +
    "\000\002\020\007\000\002\020\007\000\002\020\007\000" +
    "\002\020\014\000\002\020\013\000\002\020\013\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\007" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\003\000\002\037\003\000\002\025\012" +
    "\000\002\026\006\000\002\026\002\000\002\027\011\000" +
    "\002\030\006\000\002\031\004\000\002\040\005\000\002" +
    "\042\027\000\002\043\007\000\002\044\006\000\002\045" +
    "\006\000\002\046\006\000\002\047\006\000\002\050\006" +
    "\000\002\051\007\000\002\052\006\000\002\053\006\000" +
    "\002\054\027\000\002\055\035\000\002\056\035\000\002" +
    "\057\006\000\002\060\015\000\002\061\015\000\002\062" +
    "\006\000\002\063\007\000\002\065\012\000\002\065\007" +
    "\000\002\064\011\000\002\071\010\000\002\066\005\000" +
    "\002\066\003\000\002\066\002\000\002\070\004\000\002" +
    "\067\003\000\002\067\005\000\002\076\003\000\002\076" +
    "\003\000\002\011\011\000\002\013\011\000\002\013\013" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\010\000\002\073\016\000\002\074" +
    "\007\000\002\075\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\016\003\012\004\013\011\005\012\011\013" +
    "\014\014\007\001\002\000\004\113\u0197\001\002\000\006" +
    "\004\uffce\113\uffce\001\002\000\004\002\u0196\001\002\000" +
    "\006\004\u018f\113\uffcb\001\002\000\004\004\u0189\001\002" +
    "\000\006\004\u0184\113\uffcd\001\002\000\004\051\u0183\001" +
    "\002\000\006\004\022\107\023\001\002\000\006\004\015" +
    "\113\uffcc\001\002\000\006\066\017\115\016\001\002\000" +
    "\112\003\uffd7\004\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\046\uffd7\050\uffd7\052\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\065\uffd7\112\uffd7\001\002\000\004\006" +
    "\020\001\002\000\004\115\021\001\002\000\112\003\uffd4" +
    "\004\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\046\uffd4\050\uffd4\052\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\065\uffd4\112\uffd4\001\002\000\004\066\u0177\001\002" +
    "\000\004\110\024\001\002\000\004\051\025\001\002\000" +
    "\110\003\062\004\045\011\005\012\011\013\014\014\007" +
    "\015\114\016\105\017\101\020\037\021\110\022\046\023" +
    "\103\024\121\025\106\026\100\027\077\030\072\031\060" +
    "\032\124\033\057\034\047\035\ufffb\037\052\040\117\041" +
    "\043\042\055\046\112\050\075\052\040\057\065\060\071" +
    "\061\061\062\070\065\054\001\002\000\112\003\uffe3\004" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\046" +
    "\uffe3\050\uffe3\052\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\065\uffe3\112\uffe3\001\002\000\112\003\uffe5\004\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\046\uffe5\050" +
    "\uffe5\052\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\065\uffe5" +
    "\112\uffe5\001\002\000\112\003\uffe1\004\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\046\uffe1\050\uffe1\052" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\065\uffe1\112\uffe1" +
    "\001\002\000\112\003\ufff4\004\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\046\ufff4\050\ufff4\052\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\065\ufff4\112\ufff4\001\002" +
    "\000\112\003\uffed\004\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\046\uffed\050\uffed\052\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\065\uffed\112\uffed\001\002\000\112" +
    "\003\uffee\004\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\046\uffee\050\uffee\052\uffee\057\uffee\060\uffee\061" +
    "\uffee\062\uffee\065\uffee\112\uffee\001\002\000\112\003\uffe0" +
    "\004\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\046\uffe0\050\uffe0\052\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\065\uffe0\112\uffe0\001\002\000\112\003\uffef\004\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\037\uffef\040\uffef\041\uffef\042\uffef\046\uffef" +
    "\050\uffef\052\uffef\057\uffef\060\uffef\061\uffef\062\uffef\065" +
    "\uffef\112\uffef\001\002\000\112\003\ufff7\004\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\046\ufff7\050\ufff7" +
    "\052\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\065\ufff7\112" +
    "\ufff7\001\002\000\004\107\u0174\001\002\000\004\004\u0170" +
    "\001\002\000\112\003\ufff2\004\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\046\ufff2\050\ufff2\052\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\065\ufff2\112\ufff2\001\002" +
    "\000\112\003\uffe2\004\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\046\uffe2\050\uffe2\052\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\065\uffe2\112\uffe2\001\002\000\004" +
    "\107\u0149\001\002\000\112\003\uffeb\004\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\046\uffeb\050\uffeb\052" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb\112\uffeb" +
    "\001\002\000\010\004\022\066\u0140\107\u0141\001\002\000" +
    "\004\107\u0136\001\002\000\004\107\u0133\001\002\000\112" +
    "\003\uffec\004\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\046\uffec\050\uffec\052\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\065\uffec\112\uffec\001\002\000\112\003\ufff0" +
    "\004\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\046\ufff0\050\ufff0\052\ufff0\057\ufff0\060\ufff0\061\ufff0\062" +
    "\ufff0\065\ufff0\112\ufff0\001\002\000\004\107\u012f\001\002" +
    "\000\112\003\uffe8\004\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\046\uffe8\050\uffe8\052\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\065\uffe8\112\uffe8\001\002\000\004" +
    "\107\u012a\001\002\000\004\107\u011f\001\002\000\006\035" +
    "\ufffc\112\ufffc\001\002\000\004\107\u011c\001\002\000\004" +
    "\107\u0119\001\002\000\004\004\u010a\001\002\000\006\112" +
    "\u0108\115\u0109\001\002\000\112\003\uffe6\004\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\046\uffe6\050\uffe6" +
    "\052\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\065\uffe6\112" +
    "\uffe6\001\002\000\112\003\ufff5\004\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\046\ufff5\050\ufff5\052\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\062\ufff5\065\ufff5\112\ufff5\001" +
    "\002\000\004\107\u0105\001\002\000\112\003\uffdc\004\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\046\uffdc" +
    "\050\uffdc\052\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\065" +
    "\uffdc\112\uffdc\001\002\000\112\003\ufff3\004\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\046\ufff3\050\ufff3" +
    "\052\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\065\ufff3\112" +
    "\ufff3\001\002\000\004\111\372\001\002\000\004\107\366" +
    "\001\002\000\004\107\363\001\002\000\112\003\uffe7\004" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\046" +
    "\uffe7\050\uffe7\052\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\065\uffe7\112\uffe7\001\002\000\112\003\uffe9\004\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\046\uffe9\050" +
    "\uffe9\052\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\065\uffe9" +
    "\112\uffe9\001\002\000\004\115\362\001\002\000\112\003" +
    "\uffe4\004\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\046\uffe4\050\uffe4\052\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\065\uffe4\112\uffe4\001\002\000\004\107\357\001" +
    "\002\000\004\107\354\001\002\000\004\107\322\001\002" +
    "\000\112\003\ufff1\004\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\046\ufff1\050\ufff1\052\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\065\ufff1\112\ufff1\001\002\000\004" +
    "\107\276\001\002\000\112\003\ufff6\004\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\046\ufff6\050\ufff6\052" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\065\ufff6\112\ufff6" +
    "\001\002\000\004\107\244\001\002\000\004\107\241\001" +
    "\002\000\112\003\uffea\004\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\046\uffea\050\uffea\052\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\065\uffea\112\uffea\001\002\000" +
    "\004\107\227\001\002\000\112\003\uffdf\004\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\046\uffdf\050\uffdf" +
    "\052\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\065\uffdf\112" +
    "\uffdf\001\002\000\004\107\175\001\002\000\112\003\062" +
    "\004\045\011\005\012\011\013\014\014\007\015\114\016" +
    "\105\017\101\020\037\021\110\022\046\023\103\024\121" +
    "\025\106\026\100\027\077\030\072\031\060\032\124\033" +
    "\057\034\047\035\ufff9\037\052\040\117\041\043\042\055" +
    "\046\112\050\075\052\040\057\065\060\071\061\061\062" +
    "\070\065\054\112\ufff9\001\002\000\004\107\170\001\002" +
    "\000\112\003\uffd9\004\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\046\uffd9\050\uffd9\052\uffd9\057\uffd9\060" +
    "\uffd9\061\uffd9\062\uffd9\065\uffd9\112\uffd9\001\002\000\112" +
    "\003\uffdd\004\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\046\uffdd\050\uffdd\052\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\065\uffdd\112\uffdd\001\002\000\004\107\164" +
    "\001\002\000\112\003\ufff8\004\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\046\ufff8\050\ufff8\052\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\065\ufff8\112\ufff8\001\002" +
    "\000\004\107\140\001\002\000\004\035\131\001\002\000" +
    "\112\003\uffde\004\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\046\uffde\050\uffde\052\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\065\uffde\112\uffde\001\002\000\004\107" +
    "\125\001\002\000\004\005\126\001\002\000\004\110\127" +
    "\001\002\000\004\115\130\001\002\000\112\003\uffad\004" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\037\uffad\040\uffad\041\uffad\042\uffad\046" +
    "\uffad\050\uffad\052\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\065\uffad\112\uffad\001\002\000\006\002\000\004\132\001" +
    "\002\000\004\107\133\001\002\000\004\110\134\001\002" +
    "\000\004\051\135\001\002\000\110\003\062\004\045\011" +
    "\005\012\011\013\014\014\007\015\114\016\105\017\101" +
    "\020\037\021\110\022\046\023\103\024\121\025\106\026" +
    "\100\027\077\030\072\031\060\032\124\033\057\034\047" +
    "\035\ufffb\037\052\040\117\041\043\042\055\046\112\050" +
    "\075\052\040\057\065\060\071\061\061\062\070\065\054" +
    "\001\002\000\004\035\137\001\002\000\004\002\ufffe\001" +
    "\002\000\004\005\141\001\002\000\004\116\142\001\002" +
    "\000\004\005\143\001\002\000\004\116\144\001\002\000" +
    "\004\005\145\001\002\000\004\116\146\001\002\000\004" +
    "\005\147\001\002\000\004\116\150\001\002\000\004\005" +
    "\151\001\002\000\004\116\152\001\002\000\004\005\153" +
    "\001\002\000\004\116\154\001\002\000\004\005\155\001" +
    "\002\000\004\116\156\001\002\000\004\005\157\001\002" +
    "\000\004\116\160\001\002\000\004\005\161\001\002\000" +
    "\004\110\162\001\002\000\004\115\163\001\002\000\112" +
    "\003\uffaa\004\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\046\uffaa\050\uffaa\052\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\062\uffaa\065\uffaa\112\uffaa\001\002\000\004\004\165" +
    "\001\002\000\004\110\166\001\002\000\004\115\167\001" +
    "\002\000\112\003\uff89\004\uff89\011\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\046\uff89\050\uff89\052\uff89\057\uff89" +
    "\060\uff89\061\uff89\062\uff89\065\uff89\112\uff89\001\002\000" +
    "\004\005\171\001\002\000\004\110\172\001\002\000\004" +
    "\115\173\001\002\000\112\003\uffb3\004\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\046\uffb3\050\uffb3\052" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\065\uffb3\112\uffb3" +
    "\001\002\000\006\035\ufffa\112\ufffa\001\002\000\010\004" +
    "\177\005\176\107\201\001\002\000\032\066\uffca\067\uffca" +
    "\070\uffca\071\uffca\072\uffca\101\uffca\102\uffca\103\uffca\104" +
    "\uffca\105\uffca\110\uffca\115\uffca\001\002\000\032\066\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\072\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\104\uffc9\105\uffc9\110\uffc9\115\uffc9\001\002\000\004" +
    "\110\223\001\002\000\010\004\177\005\176\107\201\001" +
    "\002\000\016\066\207\101\204\102\203\103\210\104\206" +
    "\105\211\001\002\000\014\004\uffc7\005\uffc7\007\uffc7\010" +
    "\uffc7\107\uffc7\001\002\000\014\004\uffc6\005\uffc6\007\uffc6" +
    "\010\uffc6\107\uffc6\001\002\000\010\004\177\005\176\107" +
    "\201\001\002\000\014\004\uffc5\005\uffc5\007\uffc5\010\uffc5" +
    "\107\uffc5\001\002\000\014\004\uffc2\005\uffc2\007\uffc2\010" +
    "\uffc2\107\uffc2\001\002\000\014\004\uffc4\005\uffc4\007\uffc4" +
    "\010\uffc4\107\uffc4\001\002\000\014\004\uffc3\005\uffc3\007" +
    "\uffc3\010\uffc3\107\uffc3\001\002\000\004\110\uffb5\001\002" +
    "\000\012\067\220\070\215\071\216\072\217\001\002\000" +
    "\010\004\177\005\176\107\201\001\002\000\010\004\uffc0" +
    "\005\uffc0\107\uffc0\001\002\000\010\004\uffbe\005\uffbe\107" +
    "\uffbe\001\002\000\010\004\uffbf\005\uffbf\107\uffbf\001\002" +
    "\000\010\004\uffc1\005\uffc1\107\uffc1\001\002\000\004\110" +
    "\222\001\002\000\032\066\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\072\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\110" +
    "\uffc8\115\uffc8\001\002\000\004\111\224\001\002\000\110" +
    "\003\062\004\045\011\005\012\011\013\014\014\007\015" +
    "\114\016\105\017\101\020\037\021\110\022\046\023\103" +
    "\024\121\025\106\026\100\027\077\030\072\031\060\032" +
    "\124\033\057\034\047\037\052\040\117\041\043\042\055" +
    "\046\112\050\075\052\040\057\065\060\071\061\061\062" +
    "\070\065\054\112\ufffb\001\002\000\004\112\226\001\002" +
    "\000\112\003\uffb8\004\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\046\uffb8\050\uffb8\052\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\062\uffb8\065\uffb8\112\uffb8\001\002\000\004" +
    "\005\230\001\002\000\004\116\231\001\002\000\004\005" +
    "\232\001\002\000\004\116\233\001\002\000\004\005\234" +
    "\001\002\000\004\116\235\001\002\000\004\005\236\001" +
    "\002\000\004\110\237\001\002\000\004\115\240\001\002" +
    "\000\112\003\uffa5\004\uffa5\011\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\046\uffa5\050\uffa5\052\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\062\uffa5\065\uffa5\112\uffa5\001\002\000\004" +
    "\110\242\001\002\000\004\115\243\001\002\000\112\003" +
    "\uffb2\004\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\046\uffb2\050\uffb2\052\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\065\uffb2\112\uffb2\001\002\000\004\005\245\001" +
    "\002\000\004\116\246\001\002\000\004\005\247\001\002" +
    "\000\004\116\250\001\002\000\004\005\251\001\002\000" +
    "\004\116\252\001\002\000\004\005\253\001\002\000\004" +
    "\116\254\001\002\000\004\005\255\001\002\000\004\116" +
    "\256\001\002\000\004\005\257\001\002\000\004\116\260" +
    "\001\002\000\004\005\261\001\002\000\004\116\262\001" +
    "\002\000\004\005\263\001\002\000\004\116\264\001\002" +
    "\000\004\005\265\001\002\000\004\116\266\001\002\000" +
    "\004\005\267\001\002\000\004\116\270\001\002\000\004" +
    "\005\271\001\002\000\004\116\272\001\002\000\004\005" +
    "\273\001\002\000\004\110\274\001\002\000\004\115\275" +
    "\001\002\000\112\003\uffa9\004\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\046\uffa9\050\uffa9\052\uffa9\057" +
    "\uffa9\060\uffa9\061\uffa9\062\uffa9\065\uffa9\112\uffa9\001\002" +
    "\000\004\005\277\001\002\000\004\116\300\001\002\000" +
    "\004\005\301\001\002\000\004\116\302\001\002\000\004" +
    "\005\303\001\002\000\004\116\304\001\002\000\004\005" +
    "\305\001\002\000\004\116\306\001\002\000\004\005\307" +
    "\001\002\000\004\116\310\001\002\000\004\005\311\001" +
    "\002\000\004\116\312\001\002\000\004\005\313\001\002" +
    "\000\004\116\314\001\002\000\004\005\315\001\002\000" +
    "\004\116\316\001\002\000\004\005\317\001\002\000\004" +
    "\110\320\001\002\000\004\115\321\001\002\000\112\003" +
    "\uffb4\004\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\046\uffb4\050\uffb4\052\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\065\uffb4\112\uffb4\001\002\000\004\005\323\001" +
    "\002\000\004\116\324\001\002\000\004\005\325\001\002" +
    "\000\004\116\326\001\002\000\004\005\327\001\002\000" +
    "\004\116\330\001\002\000\004\005\331\001\002\000\004" +
    "\116\332\001\002\000\004\005\333\001\002\000\004\116" +
    "\334\001\002\000\004\005\335\001\002\000\004\116\336" +
    "\001\002\000\004\005\337\001\002\000\004\116\340\001" +
    "\002\000\004\005\341\001\002\000\004\116\342\001\002" +
    "\000\004\005\343\001\002\000\004\116\344\001\002\000" +
    "\004\005\345\001\002\000\004\116\346\001\002\000\004" +
    "\005\347\001\002\000\004\116\350\001\002\000\004\005" +
    "\351\001\002\000\004\110\352\001\002\000\004\115\353" +
    "\001\002\000\112\003\uffa8\004\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\046\uffa8\050\uffa8\052\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\065\uffa8\112\uffa8\001\002" +
    "\000\004\110\355\001\002\000\004\115\356\001\002\000" +
    "\112\003\uffb1\004\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\046\uffb1\050\uffb1\052\uffb1\057\uffb1\060\uffb1" +
    "\061\uffb1\062\uffb1\065\uffb1\112\uffb1\001\002\000\004\110" +
    "\360\001\002\000\004\115\361\001\002\000\112\003\uffb0" +
    "\004\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\046\uffb0\050\uffb0\052\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\065\uffb0\112\uffb0\001\002\000\112\003\uffb6\004\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\046\uffb6" +
    "\050\uffb6\052\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\065" +
    "\uffb6\112\uffb6\001\002\000\004\110\364\001\002\000\004" +
    "\115\365\001\002\000\112\003\uffaf\004\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\046\uffaf\050\uffaf\052" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\065\uffaf\112\uffaf" +
    "\001\002\000\004\005\367\001\002\000\004\110\370\001" +
    "\002\000\004\115\371\001\002\000\112\003\uffa3\004\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\046\uffa3" +
    "\050\uffa3\052\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\065" +
    "\uffa3\112\uffa3\001\002\000\110\003\062\004\045\011\005" +
    "\012\011\013\014\014\007\015\114\016\105\017\101\020" +
    "\037\021\110\022\046\023\103\024\121\025\106\026\100" +
    "\027\077\030\072\031\060\032\124\033\057\034\047\037" +
    "\052\040\117\041\043\042\055\046\112\050\075\052\040" +
    "\057\065\060\071\061\061\062\070\065\054\112\ufffb\001" +
    "\002\000\004\112\374\001\002\000\004\063\375\001\002" +
    "\000\004\107\376\001\002\000\004\004\377\001\002\000" +
    "\004\004\u0100\001\002\000\004\110\u0101\001\002\000\004" +
    "\111\u0102\001\002\000\110\003\062\004\045\011\005\012" +
    "\011\013\014\014\007\015\114\016\105\017\101\020\037" +
    "\021\110\022\046\023\103\024\121\025\106\026\100\027" +
    "\077\030\072\031\060\032\124\033\057\034\047\037\052" +
    "\040\117\041\043\042\055\046\112\050\075\052\040\057" +
    "\065\060\071\061\061\062\070\065\054\112\ufffb\001\002" +
    "\000\004\112\u0104\001\002\000\112\003\uff8b\004\uff8b\011" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b" +
    "\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\046\uff8b\050" +
    "\uff8b\052\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\065\uff8b" +
    "\112\uff8b\001\002\000\004\110\u0106\001\002\000\004\115" +
    "\u0107\001\002\000\112\003\uffa4\004\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\046\uffa4\050\uffa4\052\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\065\uffa4\112\uffa4\001" +
    "\002\000\112\003\uffda\004\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\046\uffda\050\uffda\052\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\065\uffda\112\uffda\001\002\000" +
    "\112\003\uffdb\004\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\046\uffdb\050\uffdb\052\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\062\uffdb\065\uffdb\112\uffdb\001\002\000\004\107" +
    "\u010b\001\002\000\014\011\005\012\u010d\013\u010c\014\u010f" +
    "\110\uff9c\001\002\000\006\004\uffcc\113\uffcc\001\002\000" +
    "\006\004\uffcd\113\uffcd\001\002\000\004\110\u0115\001\002" +
    "\000\006\004\uffcb\113\uffcb\001\002\000\006\110\uff9d\116" +
    "\u0113\001\002\000\004\004\u0112\001\002\000\006\110\uff9b" +
    "\116\uff9b\001\002\000\014\011\005\012\u010d\013\u010c\014" +
    "\u010f\110\uff9c\001\002\000\004\110\uff9e\001\002\000\004" +
    "\111\u0116\001\002\000\110\003\062\004\045\011\005\012" +
    "\011\013\014\014\007\015\114\016\105\017\101\020\037" +
    "\021\110\022\046\023\103\024\121\025\106\026\100\027" +
    "\077\030\072\031\060\032\124\033\057\034\047\037\052" +
    "\040\117\041\043\042\055\046\112\050\075\052\040\057" +
    "\065\060\071\061\061\062\070\065\054\112\ufffb\001\002" +
    "\000\004\112\u0118\001\002\000\112\003\uffa2\004\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\046\uffa2\050" +
    "\uffa2\052\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\065\uffa2" +
    "\112\uffa2\001\002\000\004\110\u011a\001\002\000\004\115" +
    "\u011b\001\002\000\112\003\uffae\004\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\046\uffae\050\uffae\052\uffae" +
    "\057\uffae\060\uffae\061\uffae\062\uffae\065\uffae\112\uffae\001" +
    "\002\000\004\110\u011d\001\002\000\004\115\u011e\001\002" +
    "\000\112\003\uffac\004\uffac\011\uffac\012\uffac\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\046\uffac\050\uffac\052\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\065\uffac\112\uffac\001\002\000\010" +
    "\004\177\005\176\107\201\001\002\000\004\110\u0121\001" +
    "\002\000\004\111\u0122\001\002\000\110\003\062\004\045" +
    "\011\005\012\011\013\014\014\007\015\114\016\105\017" +
    "\101\020\037\021\110\022\046\023\103\024\121\025\106" +
    "\026\100\027\077\030\072\031\060\032\124\033\057\034" +
    "\047\037\052\040\117\041\043\042\055\046\112\050\075" +
    "\052\040\057\065\060\071\061\061\062\070\065\054\112" +
    "\ufffb\001\002\000\004\112\u0124\001\002\000\114\003\uffb9" +
    "\004\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\u0126\046\uffb9\050\uffb9\052\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\065\uffb9\112\uffb9\001\002\000\112\003\uffbb" +
    "\004\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\046\uffbb\050\uffbb\052\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\065\uffbb\112\uffbb\001\002\000\004\111\u0127\001\002" +
    "\000\110\003\062\004\045\011\005\012\011\013\014\014" +
    "\007\015\114\016\105\017\101\020\037\021\110\022\046" +
    "\023\103\024\121\025\106\026\100\027\077\030\072\031" +
    "\060\032\124\033\057\034\047\037\052\040\117\041\043" +
    "\042\055\046\112\050\075\052\040\057\065\060\071\061" +
    "\061\062\070\065\054\112\ufffb\001\002\000\004\112\u0129" +
    "\001\002\000\112\003\uffba\004\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\046\uffba\050\uffba\052\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\065\uffba\112\uffba\001\002" +
    "\000\004\110\u012b\001\002\000\004\111\u012c\001\002\000" +
    "\110\003\062\004\045\011\005\012\011\013\014\014\007" +
    "\015\114\016\105\017\101\020\037\021\110\022\046\023" +
    "\103\024\121\025\106\026\100\027\077\030\072\031\060" +
    "\032\124\033\057\034\047\037\052\040\117\041\043\042" +
    "\055\046\112\050\075\052\040\057\065\060\071\061\061" +
    "\062\070\065\054\112\ufffb\001\002\000\004\112\u012e\001" +
    "\002\000\112\003\uff9f\004\uff9f\011\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\046\uff9f\050\uff9f\052\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\065\uff9f\112\uff9f\001\002\000" +
    "\004\006\u0130\001\002\000\004\110\u0131\001\002\000\004" +
    "\115\u0132\001\002\000\112\003\uff8a\004\uff8a\011\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\042\uff8a\046\uff8a\050\uff8a\052" +
    "\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\065\uff8a\112\uff8a" +
    "\001\002\000\004\110\u0134\001\002\000\004\115\u0135\001" +
    "\002\000\112\003\uffab\004\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\046\uffab\050\uffab\052\uffab\057\uffab" +
    "\060\uffab\061\uffab\062\uffab\065\uffab\112\uffab\001\002\000" +
    "\004\005\u0137\001\002\000\004\116\u0138\001\002\000\004" +
    "\005\u0139\001\002\000\004\116\u013a\001\002\000\004\005" +
    "\u013b\001\002\000\004\116\u013c\001\002\000\004\005\u013d" +
    "\001\002\000\004\110\u013e\001\002\000\004\115\u013f\001" +
    "\002\000\112\003\uffa6\004\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\046\uffa6\050\uffa6\052\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\065\uffa6\112\uffa6\001\002\000" +
    "\010\004\177\005\176\107\201\001\002\000\014\011\005" +
    "\012\u010d\013\u010c\014\u010f\110\uff9c\001\002\000\004\110" +
    "\u0143\001\002\000\004\111\u0144\001\002\000\110\003\062" +
    "\004\045\011\005\012\011\013\014\014\007\015\114\016" +
    "\105\017\101\020\037\021\110\022\046\023\103\024\121" +
    "\025\106\026\100\027\077\030\072\031\060\032\124\033" +
    "\057\034\047\037\052\040\117\041\043\042\055\046\112" +
    "\050\075\052\040\057\065\060\071\061\061\062\070\065" +
    "\054\112\ufffb\001\002\000\004\112\u0146\001\002\000\112" +
    "\003\uffa0\004\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\046\uffa0\050\uffa0\052\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\065\uffa0\112\uffa0\001\002\000\004\115\u0148" +
    "\001\002\000\112\003\uffb7\004\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\046\uffb7\050\uffb7\052\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\065\uffb7\112\uffb7\001\002" +
    "\000\006\004\u014b\012\u014a\001\002\000\004\004\u0168\001" +
    "\002\000\004\066\u0151\001\002\000\004\110\u014d\001\002" +
    "\000\004\111\u014e\001\002\000\110\003\062\004\045\011" +
    "\005\012\011\013\014\014\007\015\114\016\105\017\101" +
    "\020\037\021\110\022\046\023\103\024\121\025\106\026" +
    "\100\027\077\030\072\031\060\032\124\033\057\034\047" +
    "\037\052\040\117\041\043\042\055\046\112\050\075\052" +
    "\040\057\065\060\071\061\061\062\070\065\054\112\ufffb" +
    "\001\002\000\004\112\u0150\001\002\000\112\003\uff96\004" +
    "\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\037\uff96\040\uff96\041\uff96\042\uff96\046" +
    "\uff96\050\uff96\052\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\065\uff96\112\uff96\001\002\000\004\005\u0152\001\002\000" +
    "\004\115\u0153\001\002\000\004\004\u0155\001\002\000\004" +
    "\115\u0160\001\002\000\020\066\207\101\204\102\203\103" +
    "\210\104\206\105\211\117\u0156\001\002\000\004\036\u015c" +
    "\001\002\000\012\004\u015a\005\u0158\007\u0159\010\u015b\001" +
    "\002\000\004\115\uff8e\001\002\000\004\115\uff90\001\002" +
    "\000\004\115\uff8d\001\002\000\004\115\uff8f\001\002\000" +
    "\004\107\u015d\001\002\000\004\006\u015e\001\002\000\004" +
    "\110\u015f\001\002\000\004\115\uff8c\001\002\000\006\004" +
    "\u0162\077\u0163\001\002\000\004\110\uff95\001\002\000\006" +
    "\066\u0166\077\u0165\001\002\000\004\004\u0164\001\002\000" +
    "\006\110\uff91\115\uff91\001\002\000\006\110\uff92\115\uff92" +
    "\001\002\000\004\005\u0167\001\002\000\006\110\uff93\115" +
    "\uff93\001\002\000\004\066\u0169\001\002\000\004\005\u016a" +
    "\001\002\000\004\115\u016b\001\002\000\004\004\u0155\001" +
    "\002\000\004\115\u016d\001\002\000\006\004\u0162\077\u0163" +
    "\001\002\000\004\115\u016f\001\002\000\004\110\uff94\001" +
    "\002\000\004\107\u0171\001\002\000\004\110\u0172\001\002" +
    "\000\004\115\u0173\001\002\000\112\003\uffa1\004\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1" +
    "\035\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\046\uffa1\050" +
    "\uffa1\052\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\065\uffa1" +
    "\112\uffa1\001\002\000\004\110\u0175\001\002\000\004\115" +
    "\u0176\001\002\000\112\003\uffa7\004\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\046\uffa7\050\uffa7\052\uffa7" +
    "\057\uffa7\060\uffa7\061\uffa7\062\uffa7\065\uffa7\112\uffa7\001" +
    "\002\000\004\054\u0178\001\002\000\004\004\u0179\001\002" +
    "\000\004\107\u017a\001\002\000\006\004\u017c\005\u017b\001" +
    "\002\000\006\110\uff97\116\uff97\001\002\000\006\110\uff98" +
    "\116\uff98\001\002\000\004\110\u0181\001\002\000\006\110" +
    "\uff9a\116\u017f\001\002\000\006\004\u017c\005\u017b\001\002" +
    "\000\004\110\uff99\001\002\000\004\115\u0182\001\002\000" +
    "\112\003\uffcf\004\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\046\uffcf\050\uffcf\052\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\065\uffcf\112\uffcf\001\002\000\004\002" +
    "\ufffd\001\002\000\006\066\u0186\115\u0185\001\002\000\112" +
    "\003\uffd8\004\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\046\uffd8\050\uffd8\052\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\065\uffd8\112\uffd8\001\002\000\004\005\u0187" +
    "\001\002\000\004\115\u0188\001\002\000\112\003\uffd5\004" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\046" +
    "\uffd5\050\uffd5\052\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\065\uffd5\112\uffd5\001\002\000\004\107\u018a\001\002\000" +
    "\004\110\u018b\001\002\000\004\051\u018c\001\002\000\110" +
    "\003\062\004\045\011\005\012\011\013\014\014\007\015" +
    "\114\016\105\017\101\020\037\021\110\022\046\023\103" +
    "\024\121\025\106\026\100\027\077\030\072\031\060\032" +
    "\124\033\057\034\047\035\ufffb\037\052\040\117\041\043" +
    "\042\055\046\112\050\075\052\040\057\065\060\071\061" +
    "\061\062\070\065\054\001\002\000\004\035\u018e\001\002" +
    "\000\004\002\uffff\001\002\000\006\066\u0191\115\u0190\001" +
    "\002\000\112\003\uffd6\004\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\046\uffd6\050\uffd6\052\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\065\uffd6\112\uffd6\001\002\000" +
    "\006\007\u0192\010\u0193\001\002\000\004\115\u0195\001\002" +
    "\000\004\115\u0194\001\002\000\112\003\uffd2\004\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\046\uffd2\050" +
    "\uffd2\052\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\065\uffd2" +
    "\112\uffd2\001\002\000\112\003\uffd3\004\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\046\uffd3\050\uffd3\052" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\065\uffd3\112\uffd3" +
    "\001\002\000\004\002\001\001\002\000\004\114\u0198\001" +
    "\002\000\004\004\u0199\001\002\000\004\066\u019a\001\002" +
    "\000\014\011\005\012\u010d\013\u010c\014\u010f\111\u019b\001" +
    "\002\000\002\001\002\000\004\113\u019d\001\002\000\004" +
    "\005\u019e\001\002\000\004\114\u019f\001\002\000\004\115" +
    "\u01a0\001\002\000\112\003\uffd1\004\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\046\uffd1\050\uffd1\052\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\065\uffd1\112\uffd1\001" +
    "\002\000\004\112\u01a2\001\002\000\004\115\u01a3\001\002" +
    "\000\112\003\uffd0\004\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\046\uffd0\050\uffd0\052\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\065\uffd0\112\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\010\002\003\003\005\020\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\002\003\011\110\020\117\021\121\022" +
    "\055\023\112\025\035\027\103\030\063\031\030\042\040" +
    "\043\101\044\050\045\034\046\032\047\031\050\047\051" +
    "\043\052\106\053\073\054\052\055\072\056\062\057\026" +
    "\060\075\061\025\062\041\063\114\064\027\065\066\071" +
    "\033\073\122\074\115\075\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\104\002\003\011\110\020\117\022\173\023\112\025" +
    "\035\027\103\030\063\031\030\042\040\043\101\044\050" +
    "\045\034\046\032\047\031\050\047\051\043\052\106\053" +
    "\073\054\052\055\072\056\062\057\026\060\075\061\025" +
    "\062\041\063\114\064\027\065\066\071\033\073\122\074" +
    "\115\075\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\002\003\011" +
    "\110\020\117\021\135\022\055\023\112\025\035\027\103" +
    "\030\063\031\030\042\040\043\101\044\050\045\034\046" +
    "\032\047\031\050\047\051\043\052\106\053\073\054\052" +
    "\055\072\056\062\057\026\060\075\061\025\062\041\063" +
    "\114\064\027\065\066\071\033\073\122\074\115\075\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\201" +
    "\040\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\212\001\001\000\004\035\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\213\001\001\000\004\024\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\002\003\011\110\020\117\021\224\022\055\023\112\025" +
    "\035\027\103\030\063\031\030\042\040\043\101\044\050" +
    "\045\034\046\032\047\031\050\047\051\043\052\106\053" +
    "\073\054\052\055\072\056\062\057\026\060\075\061\025" +
    "\062\041\063\114\064\027\065\066\071\033\073\122\074" +
    "\115\075\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\002\003\011\110\020" +
    "\117\021\372\022\055\023\112\025\035\027\103\030\063" +
    "\031\030\042\040\043\101\044\050\045\034\046\032\047" +
    "\031\050\047\051\043\052\106\053\073\054\052\055\072" +
    "\056\062\057\026\060\075\061\025\062\041\063\114\064" +
    "\027\065\066\071\033\073\122\074\115\075\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\002\003\011\110\020\117\021\u0102\022" +
    "\055\023\112\025\035\027\103\030\063\031\030\042\040" +
    "\043\101\044\050\045\034\046\032\047\031\050\047\051" +
    "\043\052\106\053\073\054\052\055\072\056\062\057\026" +
    "\060\075\061\025\062\041\063\114\064\027\065\066\071" +
    "\033\073\122\074\115\075\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\u0110\066\u010d\070\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\u0110\066\u0113\070\u010f\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\002\003\011\110\020" +
    "\117\021\u0116\022\055\023\112\025\035\027\103\030\063" +
    "\031\030\042\040\043\101\044\050\045\034\046\032\047" +
    "\031\050\047\051\043\052\106\053\073\054\052\055\072" +
    "\056\062\057\026\060\075\061\025\062\041\063\114\064" +
    "\027\065\066\071\033\073\122\074\115\075\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\201\040\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\002\003" +
    "\011\110\020\117\021\u0122\022\055\023\112\025\035\027" +
    "\103\030\063\031\030\042\040\043\101\044\050\045\034" +
    "\046\032\047\031\050\047\051\043\052\106\053\073\054" +
    "\052\055\072\056\062\057\026\060\075\061\025\062\041" +
    "\063\114\064\027\065\066\071\033\073\122\074\115\075" +
    "\065\001\001\000\002\001\001\000\004\026\u0124\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\002\003\011" +
    "\110\020\117\021\u0127\022\055\023\112\025\035\027\103" +
    "\030\063\031\030\042\040\043\101\044\050\045\034\046" +
    "\032\047\031\050\047\051\043\052\106\053\073\054\052" +
    "\055\072\056\062\057\026\060\075\061\025\062\041\063" +
    "\114\064\027\065\066\071\033\073\122\074\115\075\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\106\002\003\011\110\020\117" +
    "\021\u012c\022\055\023\112\025\035\027\103\030\063\031" +
    "\030\042\040\043\101\044\050\045\034\046\032\047\031" +
    "\050\047\051\043\052\106\053\073\054\052\055\072\056" +
    "\062\057\026\060\075\061\025\062\041\063\114\064\027" +
    "\065\066\071\033\073\122\074\115\075\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\u0146\001\001\000\010\002\u0110\066\u0141\070\u010f\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\002\003\011" +
    "\110\020\117\021\u0144\022\055\023\112\025\035\027\103" +
    "\030\063\031\030\042\040\043\101\044\050\045\034\046" +
    "\032\047\031\050\047\051\043\052\106\053\073\054\052" +
    "\055\072\056\062\057\026\060\075\061\025\062\041\063" +
    "\114\064\027\065\066\071\033\073\122\074\115\075\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u014b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\106\002\003\011\110\020\117\021\u014e\022\055" +
    "\023\112\025\035\027\103\030\063\031\030\042\040\043" +
    "\101\044\050\045\034\046\032\047\031\050\047\051\043" +
    "\052\106\053\073\054\052\055\072\056\062\057\026\060" +
    "\075\061\025\062\041\063\114\064\027\065\066\071\033" +
    "\073\122\074\115\075\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0153\001\001\000\002\001\001\000\004\035\u0156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u0160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u016b" +
    "\001\001\000\002\001\001\000\004\004\u016d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\067\u017c\076" +
    "\u017d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\067\u017f\076\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\002" +
    "\003\011\110\020\117\021\u018c\022\055\023\112\025\035" +
    "\027\103\030\063\031\030\042\040\043\101\044\050\045" +
    "\034\046\032\047\031\050\047\051\043\052\106\053\073" +
    "\054\052\055\072\056\062\057\026\060\075\061\025\062" +
    "\041\063\114\064\027\065\066\071\033\073\122\074\115" +
    "\075\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\u019b\001\001\000\004\014" +
    "\u01a0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static TablaSimbolos tablaSimbolos = new TablaSimbolos();
    static int verificarTipo = 0;
    static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
		new Sintax(new LexerCup(System.in)).parse();
	}
    
    private Symbol s;
    
    //public void syntax_error(Symbol s){
    //    this.s = s;
    //}

    public Symbol getS(){
        return this.s;
    }

    public void syntax_error(Symbol s){
        VentanaPrincipal.notificar_er(">Linea: "+(s.right+1)+" Error de sintaxis, cadena inesperada: "+ s.value );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        VentanaPrincipal.notificar_er(">Linea: "+(s.right+1)+" Error de sintaxis, cadena inesperada: "+ s.value );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


        Hashtable table = new Hashtable();
    
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // give ::= GIVE PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("give",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // get ::= GET PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tryycatch ::= CHECK LLAVE_ABRE bloquesentencias LLAVE_CIERRA TRAP PARENTESIS_ABRE IDENTIFICADOR IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tryycatch",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_booleana ::= IDENTIFICADOR PUNTO SAME PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_booleana ::= IDENTIFICADOR op_rel IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_booleana ::= IDENTIFICADOR op_rel NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia_booleana ::= IDENTIFICADOR op_rel FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia_booleana ::= IDENTIFICADOR op_rel TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaracion_for ::= MAS_MAS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaracion_for ::= IDENTIFICADOR MAS_MAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaracion_for ::= IDENTIFICADOR SIGNO_DE_IGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia_for ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA sentencia_booleana PUNTOYCOMA declaracion_for PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia_for ::= IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA sentencia_booleana PUNTOYCOMA declaracion_for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for ::= FOR PARENTESIS_ABRE sentencia_for PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametroa ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametroa ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametrosa ::= parametroa COMA parametrosa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosa",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametrosa ::= parametroa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosa",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametro ::= t_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametro",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // main ::= MAIN PARENTESIS_ABRE PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // constructor ::= IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constructor",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // metodo ::= MODEL IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // metodo ::= METHOD IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // printerport ::= PRINTERPORT PARENTESIS_ABRE NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("printerport",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // home ::= HOME PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("home",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // fillcircle ::= FILLCIRCLE PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fillcircle",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // drawcircle ::= DRAWCIRCLE PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drawcircle",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sleep ::= SLEEP PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sleep",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // drawrectangle ::= DRAWRECTANGLE PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drawrectangle",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fillrectangle ::= FILLRECTANGLE PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fillrectangle",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // drawtriangle ::= DRAWTRIANGLE PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drawtriangle",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // gettemperature ::= GETTEMPERATURE PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gettemperature",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // getfilament ::= GETFILAMENT PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("getfilament",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // setnewfilament ::= SETNEWFILAMENT PARENTESIS_ABRE NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("setnewfilament",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // getfilamenttype ::= GETFILAMENTTYPE PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("getfilamenttype",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // getextrusorz ::= GETEXTRUSORZ PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("getextrusorz",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // getextrusory ::= GETEXTRUSORY PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("getextrusory",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // getextrusorx ::= GETEXTRUSORX PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("getextrusorx",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stop ::= STOP PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("stop",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // setfilamenttype ::= SETFILAMENTTYPE PARENTESIS_ABRE NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("setfilamenttype",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // filltriangle ::= FILLTRIANGLE PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("filltriangle",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion ::= expresion op_rel expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentcut ::= CUT PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentcut",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentasignacion ::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentasignacion",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentwhile ::= WHILE PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentwhile",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentelse ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentelse",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentelse ::= ELSE LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentelse",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentif ::= IF PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA sentelse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentif",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_log ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_log",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_log ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_log",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_art ::= SIGNO_DE_MULTIPLICACIÓN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_art ::= SIGNO_DE_DIVISIÓN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_art ::= SIGNO_DE_RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op_art ::= SIGNO_DE_SUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // op_rel ::= SIGNO_DE_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // op_rel ::= DIFERENTE_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // op_rel ::= MENOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // op_rel ::= MAYOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // op_rel ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op_rel ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= PARENTESIS_ABRE expresion op_art expresion PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // t_dato ::= FLAG 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // t_dato ::= WORD 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // t_dato ::= JUST 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // t_dato ::= BROKEN 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion ::= IDENTIFICADOR IDENTIFICADOR SIGNO_DE_IGUAL NEW IDENTIFICADOR PARENTESIS_ABRE parametrosa PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL LLAVE_ABRE datos_array LLAVE_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL t_dato CORCHETE_ABRE NUMERO CORCHETE_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL FALSE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable booleana");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL TRUE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable boolena");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= WORD IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable numérica");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= FLAG IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion ::= JUST IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= printerport 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= error LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= give 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= get 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= tryycatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= constructor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= home 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= fillcircle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= drawcircle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= sleep 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= drawrectangle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= fillrectangle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= drawtriangle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= gettemperature 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= getfilament 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= setnewfilament 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= getfilamenttype 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= getextrusorz 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= getextrusory 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= getextrusorx 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= stop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= setfilamenttype 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= filltriangle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= metodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= sentcut 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= sentasignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= sentwhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= sentif 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencias",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencias",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloquesentencias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloquesentencias ::= sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= declaracion IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

