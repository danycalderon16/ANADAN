
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 09 19:14:33 MDT 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 09 19:14:33 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\002\016\000\002\002\004\000\002\023\003" +
    "\000\002\023\002\000\002\024\004\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\004\000\002\025\004\000\002\025\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\022\005\000\002\022\007\000\002\022\007\000" +
    "\002\022\007\000\002\022\007\000\002\022\014\000\002" +
    "\022\013\000\002\022\013\000\002\026\003\000\002\026" +
    "\003\000\002\026\007\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\027\012\000\002\030\006\000\002\030\002" +
    "\000\002\031\011\000\002\032\006\000\002\033\004\000" +
    "\002\042\005\000\002\044\027\000\002\045\007\000\002" +
    "\046\006\000\002\047\006\000\002\050\006\000\002\051" +
    "\006\000\002\052\006\000\002\053\007\000\002\054\006" +
    "\000\002\055\006\000\002\056\027\000\002\057\035\000" +
    "\002\060\035\000\002\061\006\000\002\062\015\000\002" +
    "\063\015\000\002\064\006\000\002\065\007\000\002\067" +
    "\012\000\002\067\007\000\002\066\011\000\002\073\010" +
    "\000\002\070\005\000\002\070\003\000\002\070\002\000" +
    "\002\072\004\000\002\071\003\000\002\071\005\000\002" +
    "\100\003\000\002\100\003\000\002\012\011\000\002\014" +
    "\011\000\002\014\013\000\002\005\005\000\002\005\004" +
    "\000\002\005\004\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\010\000\002" +
    "\075\016\000\002\076\007\000\002\077\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\016\003\012\037\014\041\004\050\010\110" +
    "\011\112\007\001\002\000\006\105\uffd7\110\uffd7\001\002" +
    "\000\004\002\u019a\001\002\000\006\105\u0182\110\u0183\001" +
    "\002\000\006\105\uffd6\110\uffd6\001\002\000\006\105\uffd8" +
    "\110\uffd8\001\002\000\006\101\u0177\110\213\001\002\000" +
    "\004\042\u0176\001\002\000\004\110\015\001\002\000\006" +
    "\105\uffd5\110\uffd5\001\002\000\004\101\016\001\002\000" +
    "\004\102\017\001\002\000\004\042\020\001\002\000\110" +
    "\003\053\004\024\005\032\006\025\007\074\010\042\011" +
    "\116\012\114\013\031\014\034\015\107\016\106\017\105" +
    "\020\072\021\111\022\073\023\036\024\ufffb\026\056\027" +
    "\045\030\050\031\023\035\046\037\014\040\101\041\004" +
    "\043\077\050\010\051\022\052\104\053\044\054\033\057" +
    "\115\110\076\112\007\001\002\000\112\003\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\057\ufff7\104\ufff7\110" +
    "\ufff7\112\ufff7\001\002\000\004\101\u0173\001\002\000\004" +
    "\101\u0168\001\002\000\004\101\u0164\001\002\000\004\101" +
    "\u014a\001\002\000\112\003\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\035\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\043\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\057\uffe5\104\uffe5\110\uffe5\112\uffe5\001" +
    "\002\000\112\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\035\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\043\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\057\ufff3\104\ufff3\110\ufff3\112\ufff3\001\002\000" +
    "\112\003\053\004\024\005\032\006\025\007\074\010\042" +
    "\011\116\012\114\013\031\014\034\015\107\016\106\017" +
    "\105\020\072\021\111\022\073\023\036\024\ufff9\026\056" +
    "\027\045\030\050\031\023\035\046\037\014\040\101\041" +
    "\004\043\077\050\010\051\022\052\104\053\044\054\033" +
    "\057\115\104\ufff9\110\076\112\007\001\002\000\004\101" +
    "\u0135\001\002\000\004\101\u011b\001\002\000\004\103\u0110" +
    "\001\002\000\004\101\u010d\001\002\000\112\003\uffdf\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\057\uffdf\104\uffdf" +
    "\110\uffdf\112\uffdf\001\002\000\004\101\u010a\001\002\000" +
    "\112\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\035\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\043\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\057\uffe4\104\uffe4\110\uffe4\112\uffe4\001\002\000\112\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\035\uffde\037\uffde\040\uffde\041\uffde\043" +
    "\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\057\uffde" +
    "\104\uffde\110\uffde\112\uffde\001\002\000\112\003\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\043\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\057\uffe9\104\uffe9" +
    "\110\uffe9\112\uffe9\001\002\000\004\101\u0100\001\002\000" +
    "\112\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\035\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\043\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\057\uffdd\104\uffdd\110\uffdd\112\uffdd\001\002\000\004\110" +
    "\371\001\002\000\004\101\365\001\002\000\004\101\354" +
    "\001\002\000\112\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\035\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\043\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\057\uffe0\104\uffe0\110\uffe0\112\uffe0\001\002" +
    "\000\004\101\277\001\002\000\112\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\035\uffea\037\uffea\040\uffea\041\uffea\043\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\057\uffea\104\uffea\110\uffea" +
    "\112\uffea\001\002\000\112\003\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec\035\uffec" +
    "\037\uffec\040\uffec\041\uffec\043\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\057\uffec\104\uffec\110\uffec\112\uffec" +
    "\001\002\000\006\104\275\107\276\001\002\000\112\003" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\043" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\057\ufff5" +
    "\104\ufff5\110\ufff5\112\ufff5\001\002\000\112\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\057\uffe2\104\uffe2" +
    "\110\uffe2\112\uffe2\001\002\000\004\101\271\001\002\000" +
    "\112\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\035\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\043\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\057\uffd9\104\uffd9\110\uffd9\112\uffd9\001\002\000\112\003" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\035\uffed\037\uffed\040\uffed\041\uffed\043" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\057\uffed" +
    "\104\uffed\110\uffed\112\uffed\001\002\000\004\024\270\001" +
    "\002\000\112\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\035\uffee\037\uffee\040" +
    "\uffee\041\uffee\043\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\054\uffee\057\uffee\104\uffee\110\uffee\112\uffee\001\002\000" +
    "\112\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\035\uffef\037\uffef\040\uffef\041" +
    "\uffef\043\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\057\uffef\104\uffef\110\uffef\112\uffef\001\002\000\112\003" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\043" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\057\uffe6" +
    "\104\uffe6\110\uffe6\112\uffe6\001\002\000\112\003\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\035\ufff4\037\ufff4\040\ufff4\041\ufff4\043\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\057\ufff4\104\ufff4" +
    "\110\ufff4\112\ufff4\001\002\000\112\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\035\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\057\ufff2\104\ufff2\110\ufff2" +
    "\112\ufff2\001\002\000\112\003\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\035\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\043\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\057\uffe7\104\uffe7\110\uffe7\112\uffe7" +
    "\001\002\000\112\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\035\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\043\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\057\ufff0\104\ufff0\110\ufff0\112\ufff0\001\002" +
    "\000\112\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\035\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\043\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\057\uffe3\104\uffe3\110\uffe3\112\uffe3\001\002\000\004" +
    "\101\265\001\002\000\004\101\262\001\002\000\004\101" +
    "\257\001\002\000\112\003\uffe1\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\035\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\043\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\057\uffe1\104\uffe1\110\uffe1\112\uffe1\001" +
    "\002\000\010\060\211\101\212\110\213\001\002\000\004" +
    "\110\205\001\002\000\006\024\ufffc\104\ufffc\001\002\000" +
    "\004\107\204\001\002\000\112\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\035" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\057\ufff6\104\ufff6\110\ufff6\112" +
    "\ufff6\001\002\000\112\003\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\035\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\043\ufff1\050\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\057\ufff1\104\ufff1\110\ufff1\112\ufff1\001" +
    "\002\000\004\101\200\001\002\000\004\101\175\001\002" +
    "\000\004\101\172\001\002\000\004\101\167\001\002\000" +
    "\112\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\035\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\043\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc" +
    "\057\uffdc\104\uffdc\110\uffdc\112\uffdc\001\002\000\004\101" +
    "\163\001\002\000\112\003\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\035\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\043\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\057\ufff8\104\ufff8\110\ufff8\112\ufff8\001" +
    "\002\000\112\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\035\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\043\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\057\uffe8\104\uffe8\110\uffe8\112\uffe8\001\002\000" +
    "\004\101\137\001\002\000\004\101\132\001\002\000\004" +
    "\101\120\001\002\000\112\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\035\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\043\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\057\uffeb\104\uffeb\110\uffeb\112\uffeb" +
    "\001\002\000\004\111\121\001\002\000\004\115\122\001" +
    "\002\000\004\111\123\001\002\000\004\115\124\001\002" +
    "\000\004\111\125\001\002\000\004\115\126\001\002\000" +
    "\004\111\127\001\002\000\004\102\130\001\002\000\004" +
    "\107\131\001\002\000\112\003\uffa8\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\035\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\043\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\057\uffa8\104\uffa8\110\uffa8\112\uffa8" +
    "\001\002\000\004\102\133\001\002\000\004\103\134\001" +
    "\002\000\110\003\053\004\024\005\032\006\025\007\074" +
    "\010\042\011\116\012\114\013\031\014\034\015\107\016" +
    "\106\017\105\020\072\021\111\022\073\023\036\026\056" +
    "\027\045\030\050\031\023\035\046\037\014\040\101\041" +
    "\004\043\077\050\010\051\022\052\104\053\044\054\033" +
    "\057\115\104\ufffb\110\076\112\007\001\002\000\004\104" +
    "\136\001\002\000\112\003\uffa1\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\035\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\043\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\057\uffa1\104\uffa1\110\uffa1\112\uffa1\001" +
    "\002\000\004\111\140\001\002\000\004\115\141\001\002" +
    "\000\004\111\142\001\002\000\004\115\143\001\002\000" +
    "\004\111\144\001\002\000\004\115\145\001\002\000\004" +
    "\111\146\001\002\000\004\115\147\001\002\000\004\111" +
    "\150\001\002\000\004\115\151\001\002\000\004\111\152" +
    "\001\002\000\004\115\153\001\002\000\004\111\154\001" +
    "\002\000\004\115\155\001\002\000\004\111\156\001\002" +
    "\000\004\115\157\001\002\000\004\111\160\001\002\000" +
    "\004\102\161\001\002\000\004\107\162\001\002\000\112" +
    "\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\043\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\057" +
    "\uffb6\104\uffb6\110\uffb6\112\uffb6\001\002\000\004\111\164" +
    "\001\002\000\004\102\165\001\002\000\004\107\166\001" +
    "\002\000\112\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\035\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\043\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\057\uffaf\104\uffaf\110\uffaf\112\uffaf\001\002\000" +
    "\004\102\170\001\002\000\004\107\171\001\002\000\112" +
    "\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\035\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\043\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\057" +
    "\uffb3\104\uffb3\110\uffb3\112\uffb3\001\002\000\004\102\173" +
    "\001\002\000\004\107\174\001\002\000\112\003\uffb2\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\057\uffb2\104\uffb2" +
    "\110\uffb2\112\uffb2\001\002\000\004\102\176\001\002\000" +
    "\004\107\177\001\002\000\112\003\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\035" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\057\uffb1\104\uffb1\110\uffb1\112" +
    "\uffb1\001\002\000\004\111\201\001\002\000\004\102\202" +
    "\001\002\000\004\107\203\001\002\000\112\003\uffa5\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\035\uffa5\037\uffa5\040\uffa5\041\uffa5\043\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\057\uffa5\104\uffa5" +
    "\110\uffa5\112\uffa5\001\002\000\112\003\uffb8\004\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\035\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\057\uffb8\104\uffb8\110\uffb8" +
    "\112\uffb8\001\002\000\004\101\206\001\002\000\004\102" +
    "\207\001\002\000\004\107\210\001\002\000\112\003\uffa3" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3\043\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\057\uffa3\104" +
    "\uffa3\110\uffa3\112\uffa3\001\002\000\010\101\243\110\244" +
    "\111\242\001\002\000\014\037\014\041\004\050\010\102" +
    "\uff9e\112\007\001\002\000\004\060\214\001\002\000\004" +
    "\045\215\001\002\000\004\110\216\001\002\000\004\101" +
    "\217\001\002\000\006\110\222\111\220\001\002\000\006" +
    "\102\uff99\115\uff99\001\002\000\004\102\226\001\002\000" +
    "\006\102\uff9a\115\uff9a\001\002\000\006\102\uff9c\115\224" +
    "\001\002\000\006\110\222\111\220\001\002\000\004\102" +
    "\uff9b\001\002\000\004\107\227\001\002\000\112\003\uffcd" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\057\uffcd\104" +
    "\uffcd\110\uffcd\112\uffcd\001\002\000\004\102\236\001\002" +
    "\000\006\102\uff9f\115\234\001\002\000\004\110\233\001" +
    "\002\000\006\102\uff9d\115\uff9d\001\002\000\014\037\014" +
    "\041\004\050\010\102\uff9e\112\007\001\002\000\004\102" +
    "\uffa0\001\002\000\004\103\237\001\002\000\110\003\053" +
    "\004\024\005\032\006\025\007\074\010\042\011\116\012" +
    "\114\013\031\014\034\015\107\016\106\017\105\020\072" +
    "\021\111\022\073\023\036\026\056\027\045\030\050\031" +
    "\023\035\046\037\014\040\101\041\004\043\077\050\010" +
    "\051\022\052\104\053\044\054\033\057\115\104\ufffb\110" +
    "\076\112\007\001\002\000\004\104\241\001\002\000\112" +
    "\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\035\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\043\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\057" +
    "\uffa2\104\uffa2\110\uffa2\112\uffa2\001\002\000\032\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\073\uffcc\074\uffcc\075" +
    "\uffcc\076\uffcc\077\uffcc\102\uffcc\107\uffcc\001\002\000\010" +
    "\101\243\110\244\111\242\001\002\000\032\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\064\uffcb\073\uffcb\074\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\102\uffcb\107\uffcb\001\002\000\004\107" +
    "\246\001\002\000\112\003\uffb9\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\035\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\043\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\057\uffb9\104\uffb9\110\uffb9\112\uffb9\001" +
    "\002\000\012\061\252\062\251\063\254\064\253\001\002" +
    "\000\010\101\243\110\244\111\242\001\002\000\010\101" +
    "\uffc2\110\uffc2\111\uffc2\001\002\000\010\101\uffc3\110\uffc3" +
    "\111\uffc3\001\002\000\010\101\uffc1\110\uffc1\111\uffc1\001" +
    "\002\000\010\101\uffc0\110\uffc0\111\uffc0\001\002\000\004" +
    "\102\256\001\002\000\032\060\uffca\061\uffca\062\uffca\063" +
    "\uffca\064\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca" +
    "\102\uffca\107\uffca\001\002\000\004\102\260\001\002\000" +
    "\004\107\261\001\002\000\112\003\uffa9\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\035" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\043\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\057\uffa9\104\uffa9\110\uffa9\112" +
    "\uffa9\001\002\000\004\102\263\001\002\000\004\107\264" +
    "\001\002\000\112\003\uffae\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\035\uffae\037\uffae" +
    "\040\uffae\041\uffae\043\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\057\uffae\104\uffae\110\uffae\112\uffae\001\002" +
    "\000\004\102\266\001\002\000\004\107\267\001\002\000" +
    "\112\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\035\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\043\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\057\uffb0\104\uffb0\110\uffb0\112\uffb0\001\002\000\004\002" +
    "\uffff\001\002\000\004\116\272\001\002\000\004\102\273" +
    "\001\002\000\004\107\274\001\002\000\112\003\uff8c\004" +
    "\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\035\uff8c\037\uff8c\040\uff8c\041\uff8c\043\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\057\uff8c\104\uff8c" +
    "\110\uff8c\112\uff8c\001\002\000\112\003\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\035\uffda\037\uffda\040\uffda\041\uffda\043\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\057\uffda\104\uffda\110\uffda" +
    "\112\uffda\001\002\000\112\003\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\035\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\043\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\057\uffdb\104\uffdb\110\uffdb\112\uffdb" +
    "\001\002\000\006\041\301\110\302\001\002\000\004\102" +
    "\350\001\002\000\004\110\340\001\002\000\004\060\303" +
    "\001\002\000\004\111\304\001\002\000\004\107\305\001" +
    "\002\000\004\110\307\001\002\000\004\107\330\001\002" +
    "\000\020\060\310\073\312\074\311\075\317\076\315\077" +
    "\316\117\314\001\002\000\014\101\uffc4\110\uffc4\111\uffc4" +
    "\113\uffc4\114\uffc4\001\002\000\014\101\uffc9\110\uffc9\111" +
    "\uffc9\113\uffc9\114\uffc9\001\002\000\014\101\uffc8\110\uffc8" +
    "\111\uffc8\113\uffc8\114\uffc8\001\002\000\012\110\327\111" +
    "\324\113\326\114\325\001\002\000\004\025\320\001\002" +
    "\000\014\101\uffc7\110\uffc7\111\uffc7\113\uffc7\114\uffc7\001" +
    "\002\000\014\101\uffc5\110\uffc5\111\uffc5\113\uffc5\114\uffc5" +
    "\001\002\000\014\101\uffc6\110\uffc6\111\uffc6\113\uffc6\114" +
    "\uffc6\001\002\000\004\101\321\001\002\000\004\116\322" +
    "\001\002\000\004\102\323\001\002\000\004\107\uff8e\001" +
    "\002\000\004\107\uff90\001\002\000\004\107\uff91\001\002" +
    "\000\004\107\uff92\001\002\000\004\107\uff8f\001\002\000" +
    "\006\071\331\110\333\001\002\000\004\110\337\001\002" +
    "\000\004\102\uff97\001\002\000\006\060\335\071\334\001" +
    "\002\000\006\102\uff94\107\uff94\001\002\000\004\111\336" +
    "\001\002\000\006\102\uff95\107\uff95\001\002\000\006\102" +
    "\uff93\107\uff93\001\002\000\004\060\341\001\002\000\004" +
    "\111\342\001\002\000\004\107\343\001\002\000\004\110" +
    "\307\001\002\000\004\107\345\001\002\000\006\071\331" +
    "\110\333\001\002\000\004\107\347\001\002\000\004\102" +
    "\uff96\001\002\000\004\103\351\001\002\000\110\003\053" +
    "\004\024\005\032\006\025\007\074\010\042\011\116\012" +
    "\114\013\031\014\034\015\107\016\106\017\105\020\072" +
    "\021\111\022\073\023\036\026\056\027\045\030\050\031" +
    "\023\035\046\037\014\040\101\041\004\043\077\050\010" +
    "\051\022\052\104\053\044\054\033\057\115\104\ufffb\110" +
    "\076\112\007\001\002\000\004\104\353\001\002\000\112" +
    "\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\035\uff98\037\uff98\040\uff98\041\uff98" +
    "\043\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\057" +
    "\uff98\104\uff98\110\uff98\112\uff98\001\002\000\010\101\243" +
    "\110\244\111\242\001\002\000\004\102\361\001\002\000" +
    "\016\060\310\073\312\074\311\075\317\076\315\077\316" +
    "\001\002\000\010\101\243\110\244\111\242\001\002\000" +
    "\004\102\uffb7\001\002\000\004\103\362\001\002\000\110" +
    "\003\053\004\024\005\032\006\025\007\074\010\042\011" +
    "\116\012\114\013\031\014\034\015\107\016\106\017\105" +
    "\020\072\021\111\022\073\023\036\026\056\027\045\030" +
    "\050\031\023\035\046\037\014\040\101\041\004\043\077" +
    "\050\010\051\022\052\104\053\044\054\033\057\115\104" +
    "\ufffb\110\076\112\007\001\002\000\004\104\364\001\002" +
    "\000\112\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\035\uffba\037\uffba\040\uffba" +
    "\041\uffba\043\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\057\uffba\104\uffba\110\uffba\112\uffba\001\002\000\004" +
    "\110\366\001\002\000\004\102\367\001\002\000\004\107" +
    "\370\001\002\000\112\003\uff8b\004\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015" +
    "\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\035\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\043\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\057\uff8b\104\uff8b\110\uff8b\112\uff8b\001" +
    "\002\000\004\101\372\001\002\000\014\037\014\041\004" +
    "\050\010\102\uff9e\112\007\001\002\000\004\102\374\001" +
    "\002\000\004\103\375\001\002\000\110\003\053\004\024" +
    "\005\032\006\025\007\074\010\042\011\116\012\114\013" +
    "\031\014\034\015\107\016\106\017\105\020\072\021\111" +
    "\022\073\023\036\026\056\027\045\030\050\031\023\035" +
    "\046\037\014\040\101\041\004\043\077\050\010\051\022" +
    "\052\104\053\044\054\033\057\115\104\ufffb\110\076\112" +
    "\007\001\002\000\004\104\377\001\002\000\112\003\uffa4" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\035\uffa4\037\uffa4\040\uffa4\041\uffa4\043\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\057\uffa4\104" +
    "\uffa4\110\uffa4\112\uffa4\001\002\000\004\111\u0101\001\002" +
    "\000\004\115\u0102\001\002\000\004\111\u0103\001\002\000" +
    "\004\115\u0104\001\002\000\004\111\u0105\001\002\000\004" +
    "\115\u0106\001\002\000\004\111\u0107\001\002\000\004\102" +
    "\u0108\001\002\000\004\107\u0109\001\002\000\112\003\uffa7" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\035\uffa7\037\uffa7\040\uffa7\041\uffa7\043\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\057\uffa7\104" +
    "\uffa7\110\uffa7\112\uffa7\001\002\000\004\102\u010b\001\002" +
    "\000\004\107\u010c\001\002\000\112\003\uffad\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\024\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\035\uffad\037\uffad\040\uffad\041\uffad\043\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\057\uffad\104\uffad\110\uffad" +
    "\112\uffad\001\002\000\004\102\u010e\001\002\000\004\107" +
    "\u010f\001\002\000\112\003\uffb4\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\035\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\043\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\057\uffb4\104\uffb4\110\uffb4\112\uffb4\001" +
    "\002\000\110\003\053\004\024\005\032\006\025\007\074" +
    "\010\042\011\116\012\114\013\031\014\034\015\107\016" +
    "\106\017\105\020\072\021\111\022\073\023\036\026\056" +
    "\027\045\030\050\031\023\035\046\037\014\040\101\041" +
    "\004\043\077\050\010\051\022\052\104\053\044\054\033" +
    "\057\115\104\ufffb\110\076\112\007\001\002\000\004\104" +
    "\u0112\001\002\000\004\055\u0113\001\002\000\004\101\u0114" +
    "\001\002\000\004\110\u0115\001\002\000\004\110\u0116\001" +
    "\002\000\004\102\u0117\001\002\000\004\103\u0118\001\002" +
    "\000\110\003\053\004\024\005\032\006\025\007\074\010" +
    "\042\011\116\012\114\013\031\014\034\015\107\016\106" +
    "\017\105\020\072\021\111\022\073\023\036\026\056\027" +
    "\045\030\050\031\023\035\046\037\014\040\101\041\004" +
    "\043\077\050\010\051\022\052\104\053\044\054\033\057" +
    "\115\104\ufffb\110\076\112\007\001\002\000\004\104\u011a" +
    "\001\002\000\112\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\035\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\043\uff8d\050\uff8d\051\uff8d\052\uff8d\053" +
    "\uff8d\054\uff8d\057\uff8d\104\uff8d\110\uff8d\112\uff8d\001\002" +
    "\000\004\111\u011c\001\002\000\004\115\u011d\001\002\000" +
    "\004\111\u011e\001\002\000\004\115\u011f\001\002\000\004" +
    "\111\u0120\001\002\000\004\115\u0121\001\002\000\004\111" +
    "\u0122\001\002\000\004\115\u0123\001\002\000\004\111\u0124" +
    "\001\002\000\004\115\u0125\001\002\000\004\111\u0126\001" +
    "\002\000\004\115\u0127\001\002\000\004\111\u0128\001\002" +
    "\000\004\115\u0129\001\002\000\004\111\u012a\001\002\000" +
    "\004\115\u012b\001\002\000\004\111\u012c\001\002\000\004" +
    "\115\u012d\001\002\000\004\111\u012e\001\002\000\004\115" +
    "\u012f\001\002\000\004\111\u0130\001\002\000\004\115\u0131" +
    "\001\002\000\004\111\u0132\001\002\000\004\102\u0133\001" +
    "\002\000\004\107\u0134\001\002\000\112\003\uffab\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\035\uffab\037\uffab\040\uffab\041\uffab\043\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\054\uffab\057\uffab\104\uffab\110" +
    "\uffab\112\uffab\001\002\000\004\111\u0136\001\002\000\004" +
    "\115\u0137\001\002\000\004\111\u0138\001\002\000\004\115" +
    "\u0139\001\002\000\004\111\u013a\001\002\000\004\115\u013b" +
    "\001\002\000\004\111\u013c\001\002\000\004\115\u013d\001" +
    "\002\000\004\111\u013e\001\002\000\004\115\u013f\001\002" +
    "\000\004\111\u0140\001\002\000\004\115\u0141\001\002\000" +
    "\004\111\u0142\001\002\000\004\115\u0143\001\002\000\004" +
    "\111\u0144\001\002\000\004\115\u0145\001\002\000\004\111" +
    "\u0146\001\002\000\004\102\u0147\001\002\000\004\107\u0148" +
    "\001\002\000\112\003\uffac\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\035\uffac\037\uffac" +
    "\040\uffac\041\uffac\043\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\057\uffac\104\uffac\110\uffac\112\uffac\001\002" +
    "\000\006\024\ufffa\104\ufffa\001\002\000\004\111\u014b\001" +
    "\002\000\004\115\u014c\001\002\000\004\111\u014d\001\002" +
    "\000\004\115\u014e\001\002\000\004\111\u014f\001\002\000" +
    "\004\115\u0150\001\002\000\004\111\u0151\001\002\000\004" +
    "\115\u0152\001\002\000\004\111\u0153\001\002\000\004\115" +
    "\u0154\001\002\000\004\111\u0155\001\002\000\004\115\u0156" +
    "\001\002\000\004\111\u0157\001\002\000\004\115\u0158\001" +
    "\002\000\004\111\u0159\001\002\000\004\115\u015a\001\002" +
    "\000\004\111\u015b\001\002\000\004\115\u015c\001\002\000" +
    "\004\111\u015d\001\002\000\004\115\u015e\001\002\000\004" +
    "\111\u015f\001\002\000\004\115\u0160\001\002\000\004\111" +
    "\u0161\001\002\000\004\102\u0162\001\002\000\004\107\u0163" +
    "\001\002\000\112\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\035\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\043\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\057\uffaa\104\uffaa\110\uffaa\112\uffaa\001\002" +
    "\000\004\111\u0165\001\002\000\004\102\u0166\001\002\000" +
    "\004\107\u0167\001\002\000\112\003\uffb5\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\035" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\043\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\057\uffb5\104\uffb5\110\uffb5\112" +
    "\uffb5\001\002\000\010\101\243\110\244\111\242\001\002" +
    "\000\004\102\u016a\001\002\000\004\103\u016b\001\002\000" +
    "\110\003\053\004\024\005\032\006\025\007\074\010\042" +
    "\011\116\012\114\013\031\014\034\015\107\016\106\017" +
    "\105\020\072\021\111\022\073\023\036\026\056\027\045" +
    "\030\050\031\023\035\046\037\014\040\101\041\004\043" +
    "\077\050\010\051\022\052\104\053\044\054\033\057\115" +
    "\104\ufffb\110\076\112\007\001\002\000\004\104\u016d\001" +
    "\002\000\114\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\u016f\035\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\043\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\057\uffbb\104\uffbb\110\uffbb\112\uffbb\001" +
    "\002\000\112\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\035\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\043\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\057\uffbd\104\uffbd\110\uffbd\112\uffbd\001\002\000" +
    "\004\103\u0170\001\002\000\110\003\053\004\024\005\032" +
    "\006\025\007\074\010\042\011\116\012\114\013\031\014" +
    "\034\015\107\016\106\017\105\020\072\021\111\022\073" +
    "\023\036\026\056\027\045\030\050\031\023\035\046\037" +
    "\014\040\101\041\004\043\077\050\010\051\022\052\104" +
    "\053\044\054\033\057\115\104\ufffb\110\076\112\007\001" +
    "\002\000\004\104\u0172\001\002\000\112\003\uffbc\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\043\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\057\uffbc\104\uffbc\110" +
    "\uffbc\112\uffbc\001\002\000\004\102\u0174\001\002\000\004" +
    "\107\u0175\001\002\000\112\003\uffa6\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\035\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\043\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\057\uffa6\104\uffa6\110\uffa6\112\uffa6" +
    "\001\002\000\004\002\ufffd\001\002\000\004\102\u0178\001" +
    "\002\000\004\042\u0179\001\002\000\110\003\053\004\024" +
    "\005\032\006\025\007\074\010\042\011\116\012\114\013" +
    "\031\014\034\015\107\016\106\017\105\020\072\021\111" +
    "\022\073\023\036\024\ufffb\026\056\027\045\030\050\031" +
    "\023\035\046\037\014\040\101\041\004\043\077\050\010" +
    "\051\022\052\104\053\044\054\033\057\115\110\076\112" +
    "\007\001\002\000\004\024\u017b\001\002\000\006\002\000" +
    "\110\u017c\001\002\000\004\101\u017d\001\002\000\004\102" +
    "\u017e\001\002\000\004\042\u017f\001\002\000\110\003\053" +
    "\004\024\005\032\006\025\007\074\010\042\011\116\012" +
    "\114\013\031\014\034\015\107\016\106\017\105\020\072" +
    "\021\111\022\073\023\036\024\ufffb\026\056\027\045\030" +
    "\050\031\023\035\046\037\014\040\101\041\004\043\077" +
    "\050\010\051\022\052\104\053\044\054\033\057\115\110" +
    "\076\112\007\001\002\000\004\024\u0181\001\002\000\004" +
    "\002\ufffe\001\002\000\004\106\u018e\001\002\000\006\060" +
    "\u0184\107\u0185\001\002\000\012\111\u0186\113\u0188\114\u0187" +
    "\116\u0189\001\002\000\112\003\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\035\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\043\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\057\uffd4\104\uffd4\110\uffd4\112\uffd4" +
    "\001\002\000\004\107\u018d\001\002\000\004\107\u018c\001" +
    "\002\000\004\107\u018b\001\002\000\004\107\u018a\001\002" +
    "\000\112\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\035\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\043\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\057\uffd2\104\uffd2\110\uffd2\112\uffd2\001\002\000\112" +
    "\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\043\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\057" +
    "\uffd1\104\uffd1\110\uffd1\112\uffd1\001\002\000\112\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\043\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\057\uffd0\104" +
    "\uffd0\110\uffd0\112\uffd0\001\002\000\112\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\057\uffd3\104\uffd3\110" +
    "\uffd3\112\uffd3\001\002\000\004\110\u018f\001\002\000\004" +
    "\060\u0190\001\002\000\014\037\014\041\004\050\010\103" +
    "\u0192\112\007\001\002\000\004\105\u0196\001\002\000\002" +
    "\001\002\000\004\104\u0194\001\002\000\004\107\u0195\001" +
    "\002\000\112\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\035\uffce\037\uffce\040" +
    "\uffce\041\uffce\043\uffce\050\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\057\uffce\104\uffce\110\uffce\112\uffce\001\002\000" +
    "\004\111\u0197\001\002\000\004\106\u0198\001\002\000\004" +
    "\107\u0199\001\002\000\112\003\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\035\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\043\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\057\uffcf\104\uffcf\110\uffcf\112\uffcf" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\010\002\004\015\005\022\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\012\034\015" +
    "\005\022\111\023\060\024\077\025\027\027\020\031\101" +
    "\032\053\033\064\044\065\045\102\046\067\047\062\050" +
    "\061\051\057\052\051\053\116\054\050\055\040\056\112" +
    "\057\066\060\063\061\025\062\036\063\070\064\054\065" +
    "\056\066\074\067\026\073\046\075\037\076\042\077\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\012\034\015\005\022\111\024" +
    "\u0148\025\027\027\020\031\101\032\053\033\064\044\065" +
    "\045\102\046\067\047\062\050\061\051\057\052\051\053" +
    "\116\054\050\055\040\056\112\057\066\060\063\061\025" +
    "\062\036\063\070\064\054\065\056\066\074\067\026\073" +
    "\046\075\037\076\042\077\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\106\012\034\015\005\022\111\023" +
    "\134\024\077\025\027\027\020\031\101\032\053\033\064" +
    "\044\065\045\102\046\067\047\062\050\061\051\057\052" +
    "\051\053\116\054\050\055\040\056\112\057\066\060\063" +
    "\061\025\062\036\063\070\064\054\065\056\066\074\067" +
    "\026\073\046\075\037\076\042\077\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\244\001\001\000\010" +
    "\015\231\070\227\072\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\071\220\100\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\071\224" +
    "\100\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\231\070\234\072" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\012\034\015\005\022\111\023\237\024\077\025\027\027" +
    "\020\031\101\032\053\033\064\044\065\045\102\046\067" +
    "\047\062\050\061\051\057\052\051\053\116\054\050\055" +
    "\040\056\112\057\066\060\063\061\025\062\036\063\070" +
    "\064\054\065\056\066\074\067\026\073\046\075\037\076" +
    "\042\077\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\247" +
    "\001\001\000\004\026\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\305\001\001\000\002" +
    "\001\001\000\004\037\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\343\001\001\000\002\001\001\000\004" +
    "\005\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\106\012\034\015\005\022\111\023\351" +
    "\024\077\025\027\027\020\031\101\032\053\033\064\044" +
    "\065\045\102\046\067\047\062\050\061\051\057\052\051" +
    "\053\116\054\050\055\040\056\112\057\066\060\063\061" +
    "\025\062\036\063\070\064\054\065\056\066\074\067\026" +
    "\073\046\075\037\076\042\077\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\355\042\354\001\001" +
    "\000\002\001\001\000\004\037\356\001\001\000\004\026" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\012\034\015\005\022\111\023\362\024\077\025\027\027" +
    "\020\031\101\032\053\033\064\044\065\045\102\046\067" +
    "\047\062\050\061\051\057\052\051\053\116\054\050\055" +
    "\040\056\112\057\066\060\063\061\025\062\036\063\070" +
    "\064\054\065\056\066\074\067\026\073\046\075\037\076" +
    "\042\077\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\231\070\372" +
    "\072\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\106\012\034\015\005\022\111\023\375\024\077\025\027" +
    "\027\020\031\101\032\053\033\064\044\065\045\102\046" +
    "\067\047\062\050\061\051\057\052\051\053\116\054\050" +
    "\055\040\056\112\057\066\060\063\061\025\062\036\063" +
    "\070\064\054\065\056\066\074\067\026\073\046\075\037" +
    "\076\042\077\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\106\012\034\015\005\022\111\023\u0110\024\077\025" +
    "\027\027\020\031\101\032\053\033\064\044\065\045\102" +
    "\046\067\047\062\050\061\051\057\052\051\053\116\054" +
    "\050\055\040\056\112\057\066\060\063\061\025\062\036" +
    "\063\070\064\054\065\056\066\074\067\026\073\046\075" +
    "\037\076\042\077\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\012\034" +
    "\015\005\022\111\023\u0118\024\077\025\027\027\020\031" +
    "\101\032\053\033\064\044\065\045\102\046\067\047\062" +
    "\050\061\051\057\052\051\053\116\054\050\055\040\056" +
    "\112\057\066\060\063\061\025\062\036\063\070\064\054" +
    "\065\056\066\074\067\026\073\046\075\037\076\042\077" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\355\042\u0168" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\012" +
    "\034\015\005\022\111\023\u016b\024\077\025\027\027\020" +
    "\031\101\032\053\033\064\044\065\045\102\046\067\047" +
    "\062\050\061\051\057\052\051\053\116\054\050\055\040" +
    "\056\112\057\066\060\063\061\025\062\036\063\070\064" +
    "\054\065\056\066\074\067\026\073\046\075\037\076\042" +
    "\077\107\001\001\000\002\001\001\000\004\030\u016d\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\012\034" +
    "\015\005\022\111\023\u0170\024\077\025\027\027\020\031" +
    "\101\032\053\033\064\044\065\045\102\046\067\047\062" +
    "\050\061\051\057\052\051\053\116\054\050\055\040\056" +
    "\112\057\066\060\063\061\025\062\036\063\070\064\054" +
    "\065\056\066\074\067\026\073\046\075\037\076\042\077" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\012\034" +
    "\015\005\022\111\023\u0179\024\077\025\027\027\020\031" +
    "\101\032\053\033\064\044\065\045\102\046\067\047\062" +
    "\050\061\051\057\052\051\053\116\054\050\055\040\056" +
    "\112\057\066\060\063\061\025\062\036\063\070\064\054" +
    "\065\056\066\074\067\026\073\046\075\037\076\042\077" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\012" +
    "\034\015\005\022\111\023\u017f\024\077\025\027\027\020" +
    "\031\101\032\053\033\064\044\065\045\102\046\067\047" +
    "\062\050\061\051\057\052\051\053\116\054\050\055\040" +
    "\056\112\057\066\060\063\061\025\062\036\063\070\064" +
    "\054\065\056\066\074\067\026\073\046\075\037\076\042" +
    "\077\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0190\001\001\000\002\001\001" +
    "\000\004\016\u0192\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    //public void syntax_error(Symbol s){
    //    this.s = s;
    //}

    public Symbol getS(){
        return this.s;
    }

    public void syntax_error(Symbol s){
        VentanaPrincipal.notificar_er(">Linea: "+(s.right+1)+" Error de sintaxis, cadena inesperada: "+ s.value );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        VentanaPrincipal.notificar_er(">Linea: "+(s.right+1)+" Error de sintaxis, cadena inesperada: "+ s.value );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // GIVE ::= Give Parentesis_Abre Identificador Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GIVE",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // GET ::= Get Parentesis_Abre Cadena Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GET",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TRYYCATCH ::= Check Llave_Abre BloqueSentencias Llave_Cierra Trap Parentesis_Abre Identificador Identificador Parentesis_Cierra Llave_Abre BloqueSentencias Llave_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRYYCATCH",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_BOOLEANA ::= Identificador Punto Same Parentesis_Abre Cadena Parentesis_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_BOOLEANA ::= Identificador OP_REL Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA ::= Identificador OP_REL Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_BOOLEANA ::= Identificador OP_REL False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_BOOLEANA ::= Identificador OP_REL True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION_FOR ::= Mas_Mas Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION_FOR ::= Identificador Mas_Mas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION_FOR ::= Identificador Signo_de_igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_FOR ::= Just Identificador Signo_de_igual Numero PuntoYComa SENTENCIA_BOOLEANA PuntoYComa DECLARACION_FOR PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_FOR ::= Identificador Signo_de_igual Numero PuntoYComa SENTENCIA_BOOLEANA PuntoYComa DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FOR ::= For Parentesis_Abre SENTENCIA_FOR Parentesis_Cierra Llave_Abre BloqueSentencias Llave_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametroa ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametroa ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMETROSA ::= parametroa Coma PARAMETROSA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMETROSA ::= parametroa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Parametro ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametro",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMETROS ::= Parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMETROS ::= Parametro Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MAIN ::= Main Parentesis_Abre Parentesis_Cierra Llave_Abre BloqueSentencias Llave_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONSTRUCTOR ::= Identificador Parentesis_Abre PARAMETROS Parentesis_Cierra Llave_Abre BloqueSentencias Llave_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // METODO ::= Model Identificador Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // METODO ::= Method Identificador Parentesis_Abre PARAMETROS Parentesis_Cierra Llave_Abre BloqueSentencias Llave_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PRINTERPORT ::= Printerport Parentesis_Abre Numero Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTERPORT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // HOME ::= Home Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HOME",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FILLCIRCLE ::= Fillcircle Parentesis_Abre Numero Coma Numero Coma Numero Coma Numero Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILLCIRCLE",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DRAWCIRCLE ::= Drawcircle Parentesis_Abre Numero Coma Numero Coma Numero Coma Numero Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DRAWCIRCLE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SLEEP ::= Sleep Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DRAWRECTANGLE ::= Drawrectangle Parentesis_Abre Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DRAWRECTANGLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FILLRECTANGLE ::= Fillrectangle Parentesis_Abre Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILLRECTANGLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DRAWTRIANGLE ::= Drawtriangle Parentesis_Abre Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DRAWTRIANGLE",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // GETTEMPERATURE ::= Gettemperature Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GETTEMPERATURE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // GETFILAMENT ::= Getfilament Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GETFILAMENT",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SETNEWFILAMENT ::= Setnewfilament Parentesis_Abre Numero Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SETNEWFILAMENT",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // GETFILAMENTTYPE ::= Getfilamenttype Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GETFILAMENTTYPE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // GETEXTRUSORZ ::= Getextrusorz Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GETEXTRUSORZ",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GETEXTRUSORY ::= Getextrusory Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GETEXTRUSORY",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // GETEXTRUSORX ::= Getextrusorx Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GETEXTRUSORX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // STOP ::= Stop Parentesis_Abre Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STOP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SETFILAMENTTYPE ::= Setfilamenttype Parentesis_Abre Numero Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SETFILAMENTTYPE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FILLTRIANGLE ::= Filltriangle Parentesis_Abre Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Coma Numero Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILLTRIANGLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= Expresion OP_REL Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SentCut ::= Cut PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentCut",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SentAsignacion ::= Identificador Signo_de_igual Expresion PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentAsignacion",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SentWhile ::= While Parentesis_Abre Condicion Parentesis_Cierra Llave_Abre BloqueSentencias Llave_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentWhile",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SentElse ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentElse",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SentElse ::= Else Llave_Abre BloqueSentencias Llave_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentElse",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SentIf ::= If Parentesis_Abre Condicion Parentesis_Cierra Llave_Abre BloqueSentencias Llave_Cierra SentElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SentIf",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_LOG ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LOG",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_LOG ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LOG",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_ART ::= Signo_de_Multiplicación 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ART",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_ART ::= Signo_de_División 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ART",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_ART ::= Signo_de_Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ART",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_ART ::= Signo_de_Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ART",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_REL ::= Signo_de_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_REL ::= Diferente_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_REL ::= Menor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_REL ::= Mayor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_REL ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_REL ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= Parentesis_Abre Expresion OP_ART Expresion Parentesis_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Declaracion ::= Identificador Identificador Signo_de_igual New Identificador Parentesis_Abre PARAMETROSA Parentesis_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Declaracion ::= T_dato Corchete_Abre Corchete_Cierra Identificador Signo_de_igual Llave_Abre Datos_Array Llave_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Declaracion ::= T_dato Corchete_Abre Corchete_Cierra Identificador Signo_de_igual T_dato Corchete_Abre Numero Corchete_Cierra PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Declaracion ::= T_dato Identificador Signo_de_igual False PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Declaracion ::= T_dato Identificador Signo_de_igual True PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Declaracion ::= T_dato Identificador Signo_de_igual Cadena PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Declaracion ::= T_dato Identificador Signo_de_igual Numero PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Declaracion ::= T_dato Identificador PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Declaracion",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // T_dato ::= Flag 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_dato",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T_dato ::= Word 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_dato",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T_dato ::= Just 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_dato",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // T_dato ::= Broken 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_dato",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Sentencia ::= PRINTERPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Sentencia ::= error Llave_Cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Sentencia ::= error PuntoYComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sentencia ::= GIVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sentencia ::= GET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Sentencia ::= TRYYCATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Sentencia ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Sentencia ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Sentencia ::= CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Sentencia ::= HOME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Sentencia ::= FILLCIRCLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Sentencia ::= DRAWCIRCLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Sentencia ::= SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Sentencia ::= DRAWRECTANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencia ::= FILLRECTANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencia ::= DRAWTRIANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sentencia ::= GETTEMPERATURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sentencia ::= GETFILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencia ::= SETNEWFILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= GETFILAMENTTYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= GETEXTRUSORZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= GETEXTRUSORY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= GETEXTRUSORX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= STOP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencia ::= SETFILAMENTTYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencia ::= FILLTRIANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= SentCut 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= SentAsignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= SentWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= SentIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= Declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencia",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencias ::= Sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencias",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencias ::= Sentencia Sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sentencias",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BloqueSentencias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueSentencias ::= Sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error Begin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Identificador Parentesis_Abre Parentesis_Cierra Begin BloqueSentencias End Identificador Parentesis_Abre Parentesis_Cierra Begin BloqueSentencias End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Declaracion Identificador Parentesis_Abre Parentesis_Cierra Begin BloqueSentencias End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Identificador Parentesis_Abre Parentesis_Cierra Begin BloqueSentencias End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

