
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 17 18:57:51 MDT 2021
//----------------------------------------------------

package codigo;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;
import java.awt.Font;
import javax.swing.JLabel;
import modelos.LabelError;
import modelos.Gramatica;
import java.awt.Color;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 17 18:57:51 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\003\010\000\002\003" +
    "\011\000\002\003\016\000\002\003\004\000\002\021\003" +
    "\000\002\021\002\000\002\022\004\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\004\000\002\023" +
    "\004\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\007\000\002\020\007\000" +
    "\002\020\007\000\002\020\007\000\002\020\007\000\002" +
    "\020\014\000\002\020\013\000\002\020\013\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\024" +
    "\005\000\002\024\005\000\002\024\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\030\005\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\043\003\000\002\043\003\000\002\031" +
    "\011\000\002\112\002\000\002\031\005\000\002\032\006" +
    "\000\002\032\003\000\002\033\011\000\002\034\006\000" +
    "\002\035\004\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\072\006\000\002\072\007" +
    "\000\002\072\015\000\002\072\027\000\002\072\035\000" +
    "\002\077\003\000\002\077\003\000\002\076\003\000\002" +
    "\076\003\000\002\075\003\000\002\075\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\071\012\000\002\071" +
    "\007\000\002\070\011\000\002\103\010\000\002\100\005" +
    "\000\002\100\003\000\002\100\002\000\002\102\004\000" +
    "\002\101\003\000\002\101\005\000\002\110\003\000\002" +
    "\110\003\000\002\011\011\000\002\013\011\000\002\013" +
    "\012\000\002\004\002\000\002\004\004\000\002\004\004" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\010\000\002\105\016\000\002" +
    "\106\007\000\002\107\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\016\003\012\004\013\012\005\013\011\014" +
    "\014\015\007\001\002\000\004\114\u013d\001\002\000\006" +
    "\004\u0138\114\uffcf\001\002\000\004\002\u0137\001\002\000" +
    "\006\004\u0130\114\uffcc\001\002\000\004\004\u012a\001\002" +
    "\000\006\004\u0125\114\uffce\001\002\000\004\052\u0124\001" +
    "\002\000\006\004\022\110\023\001\002\000\006\004\015" +
    "\114\uffcd\001\002\000\116\003\uffd5\004\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\047\uffd5\051\uffd5\053" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\066\uffd5\067\017" +
    "\113\uffd5\117\016\001\002\000\112\003\uffe2\004\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\047\uffe2\051" +
    "\uffe2\053\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2" +
    "\113\uffe2\001\002\000\004\007\020\001\002\000\114\003" +
    "\uffd0\004\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\047\uffd0\051\uffd0\053\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\066\uffd0\113\uffd0\117\021\001\002\000\112\003" +
    "\uffde\004\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\047\uffde\051\uffde\053\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\066\uffde\113\uffde\001\002\000\004\067\u0118\001" +
    "\002\000\004\111\024\001\002\000\004\052\025\001\002" +
    "\000\110\003\054\004\041\012\005\013\011\014\014\015" +
    "\007\016\100\017\072\020\067\021\031\022\074\023\042" +
    "\024\070\025\104\026\073\027\066\030\064\031\062\032" +
    "\052\033\107\034\051\035\043\036\ufffb\040\044\041\102" +
    "\042\036\043\046\047\075\051\065\053\032\060\057\061" +
    "\063\062\053\063\061\066\045\001\002\000\112\003\ufff4" +
    "\004\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\047\ufff4\051\ufff4\053\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\066\ufff4\113\ufff4\001\002\000\112\003\ufff1\004\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\047\ufff1" +
    "\051\ufff1\053\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\066" +
    "\ufff1\113\ufff1\001\002\000\112\003\ufff7\004\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\047\ufff7\051\ufff7" +
    "\053\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\066\ufff7\113" +
    "\ufff7\001\002\000\114\003\uff90\004\uff90\012\uff90\013\uff90" +
    "\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\047\uff90\051\uff90\053\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\066\uff90\110\uff90\113" +
    "\uff90\001\002\000\004\004\u0114\001\002\000\114\003\uffed" +
    "\004\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\047\uffed\051\uffed\053\uffed\060\uffed\061\uffed\062\uffed\063" +
    "\uffed\066\uffed\110\u010a\113\uffed\001\002\000\114\003\uffeb" +
    "\004\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\047\uffeb\051\uffeb\053\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\066\uffeb\110\360\113\uffeb\001\002\000\112\003\ufff2" +
    "\004\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\047\ufff2\051\ufff2\053\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\066\ufff2\113\ufff2\001\002\000\004\110\327\001\002" +
    "\000\114\003\uffee\004\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\047\uffee\051\uffee\053\uffee\060\uffee\061" +
    "\uffee\062\uffee\063\uffee\066\uffee\110\323\113\uffee\001\002" +
    "\000\112\003\ufff0\004\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\047\ufff0\051\ufff0\053\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\066\ufff0\113\ufff0\001\002\000\006" +
    "\004\022\067\274\001\002\000\114\003\uff99\004\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\040\uff99\041\uff99\042\uff99\043\uff99\047\uff99\051" +
    "\uff99\053\uff99\060\uff99\061\uff99\062\uff99\063\uff99\066\uff99" +
    "\110\uff99\113\uff99\001\002\000\114\003\uff8c\004\uff8c\012" +
    "\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c" +
    "\036\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\047\uff8c\051" +
    "\uff8c\053\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\066\uff8c" +
    "\110\uff8c\113\uff8c\001\002\000\004\110\270\001\002\000" +
    "\004\110\263\001\002\000\004\110\255\001\002\000\006" +
    "\036\ufffc\113\ufffc\001\002\000\114\003\uffef\004\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\040\uffef\041\uffef\042\uffef\043\uffef\047\uffef\051" +
    "\uffef\053\uffef\060\uffef\061\uffef\062\uffef\063\uffef\066\uffef" +
    "\110\252\113\uffef\001\002\000\114\003\uff8f\004\uff8f\012" +
    "\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\047\uff8f\051" +
    "\uff8f\053\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\066\uff8f" +
    "\110\uff8f\113\uff8f\001\002\000\114\003\uff8e\004\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027" +
    "\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\047\uff8e\051" +
    "\uff8e\053\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\066\uff8e" +
    "\110\uff8e\113\uff8e\001\002\000\004\004\232\001\002\000" +
    "\012\003\uffb0\044\uffb0\113\221\117\222\001\002\000\112" +
    "\003\ufff5\004\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\047\ufff5\051\ufff5\053\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\066\ufff5\113\ufff5\001\002\000\112\003\uffe7" +
    "\004\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\047\uffe7\051\uffe7\053\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\066\uffe7\113\uffe7\001\002\000\114\003\uff8d\004\uff8d" +
    "\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d" +
    "\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\047\uff8d" +
    "\051\uff8d\053\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\066" +
    "\uff8d\110\uff8d\113\uff8d\001\002\000\112\003\ufff3\004\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\047\ufff3" +
    "\051\ufff3\053\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\066" +
    "\ufff3\113\ufff3\001\002\000\004\112\206\001\002\000\114" +
    "\003\uff91\004\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\047\uff91\051\uff91\053\uff91\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\066\uff91\110\uff91\113\uff91\001\002\000\114" +
    "\003\uff95\004\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\047\uff95\051\uff95\053\uff95\060\uff95\061\uff95\062" +
    "\uff95\063\uff95\066\uff95\110\uff95\113\uff95\001\002\000\114" +
    "\003\uff92\004\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033" +
    "\uff92\034\uff92\035\uff92\036\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\047\uff92\051\uff92\053\uff92\060\uff92\061\uff92\062" +
    "\uff92\063\uff92\066\uff92\110\uff92\113\uff92\001\002\000\004" +
    "\117\205\001\002\000\114\003\uff93\004\uff93\012\uff93\013" +
    "\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\040\uff93\041\uff93\042\uff93\043\uff93\047\uff93\051\uff93\053" +
    "\uff93\060\uff93\061\uff93\062\uff93\063\uff93\066\uff93\110\uff93" +
    "\113\uff93\001\002\000\114\003\uff9c\004\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\047\uff9c\051\uff9c\053" +
    "\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c\110\uff9c" +
    "\113\uff9c\001\002\000\114\003\uff9b\004\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\043\uff9b\047\uff9b\051\uff9b\053" +
    "\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\066\uff9b\110\uff9b" +
    "\113\uff9b\001\002\000\112\003\ufff6\004\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\047\ufff6\051\ufff6\053" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\066\ufff6\113\ufff6" +
    "\001\002\000\114\003\uff9d\004\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\047\uff9d\051\uff9d\053\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\066\uff9d\110\uff9d\113\uff9d" +
    "\001\002\000\114\003\uff94\004\uff94\012\uff94\013\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\047\uff94\051\uff94\053\uff94\060" +
    "\uff94\061\uff94\062\uff94\063\uff94\066\uff94\110\uff94\113\uff94" +
    "\001\002\000\114\003\uff98\004\uff98\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\047\uff98\051\uff98\053\uff98\060" +
    "\uff98\061\uff98\062\uff98\063\uff98\066\uff98\110\uff98\113\uff98" +
    "\001\002\000\004\110\151\001\002\000\112\003\uffea\004" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\040\uffea\041\uffea\042\uffea\043\uffea\047" +
    "\uffea\051\uffea\053\uffea\060\uffea\061\uffea\062\uffea\063\uffea" +
    "\066\uffea\113\uffea\001\002\000\112\003\054\004\041\012" +
    "\005\013\011\014\014\015\007\016\100\017\072\020\067" +
    "\021\031\022\074\023\042\024\070\025\104\026\073\027" +
    "\066\030\064\031\062\032\052\033\107\034\051\035\043" +
    "\036\ufff9\040\044\041\102\042\036\043\046\047\075\051" +
    "\065\053\032\060\057\061\063\062\053\063\061\066\045" +
    "\113\ufff9\001\002\000\114\003\uff97\004\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\047\uff97\051\uff97\053" +
    "\uff97\060\uff97\061\uff97\062\uff97\063\uff97\066\uff97\110\uff97" +
    "\113\uff97\001\002\000\112\003\uffe8\004\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\047\uffe8\051\uffe8\053" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\066\uffe8\113\uffe8" +
    "\001\002\000\004\110\144\001\002\000\112\003\ufff8\004" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\047" +
    "\ufff8\051\ufff8\053\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\066\ufff8\113\ufff8\001\002\000\114\003\uff9a\004\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\047\uff9a\051" +
    "\uff9a\053\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\066\uff9a" +
    "\110\uff9a\113\uff9a\001\002\000\112\003\uffe9\004\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\047\uffe9\051" +
    "\uffe9\053\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\066\uffe9" +
    "\113\uffe9\001\002\000\004\036\135\001\002\000\114\003" +
    "\uff96\004\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\047\uff96\051\uff96\053\uff96\060\uff96\061\uff96\062\uff96" +
    "\063\uff96\066\uff96\110\uff96\113\uff96\001\002\000\114\003" +
    "\uffec\004\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\047\uffec\051\uffec\053\uffec\060\uffec\061\uffec\062\uffec" +
    "\063\uffec\066\uffec\110\111\113\uffec\001\002\000\004\005" +
    "\112\001\002\000\004\120\113\001\002\000\004\005\114" +
    "\001\002\000\004\120\115\001\002\000\004\005\116\001" +
    "\002\000\004\120\117\001\002\000\004\005\120\001\002" +
    "\000\004\120\121\001\002\000\004\005\122\001\002\000" +
    "\004\120\123\001\002\000\004\005\124\001\002\000\004" +
    "\120\125\001\002\000\004\005\126\001\002\000\004\120" +
    "\127\001\002\000\004\005\130\001\002\000\004\120\131" +
    "\001\002\000\004\005\132\001\002\000\004\111\133\001" +
    "\002\000\004\117\134\001\002\000\112\003\uff9f\004\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\047\uff9f" +
    "\051\uff9f\053\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\066" +
    "\uff9f\113\uff9f\001\002\000\006\002\000\004\136\001\002" +
    "\000\004\110\137\001\002\000\004\111\140\001\002\000" +
    "\004\052\141\001\002\000\110\003\054\004\041\012\005" +
    "\013\011\014\014\015\007\016\100\017\072\020\067\021" +
    "\031\022\074\023\042\024\070\025\104\026\073\027\066" +
    "\030\064\031\062\032\052\033\107\034\051\035\043\036" +
    "\ufffb\040\044\041\102\042\036\043\046\047\075\051\065" +
    "\053\032\060\057\061\063\062\053\063\061\066\045\001" +
    "\002\000\004\036\143\001\002\000\004\002\ufffe\001\002" +
    "\000\004\004\145\001\002\000\004\111\146\001\002\000" +
    "\004\117\147\001\002\000\112\003\uff72\004\uff72\012\uff72" +
    "\013\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021" +
    "\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72" +
    "\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036" +
    "\uff72\040\uff72\041\uff72\042\uff72\043\uff72\047\uff72\051\uff72" +
    "\053\uff72\060\uff72\061\uff72\062\uff72\063\uff72\066\uff72\113" +
    "\uff72\001\002\000\006\036\ufffa\113\ufffa\001\002\000\012" +
    "\004\154\005\152\010\153\011\156\001\002\000\016\102" +
    "\166\103\165\104\173\105\171\106\172\107\202\001\002" +
    "\000\004\107\200\001\002\000\016\102\166\103\165\104" +
    "\173\105\171\106\172\107\167\001\002\000\004\111\161" +
    "\001\002\000\004\107\157\001\002\000\004\004\160\001" +
    "\002\000\006\111\uffa7\117\uffa7\001\002\000\004\112\162" +
    "\001\002\000\110\003\054\004\041\012\005\013\011\014" +
    "\014\015\007\016\100\017\072\020\067\021\031\022\074" +
    "\023\042\024\070\025\104\026\073\027\066\030\064\031" +
    "\062\032\052\033\107\034\051\035\043\040\044\041\102" +
    "\042\036\043\046\047\075\051\065\053\032\060\057\061" +
    "\063\062\053\063\061\066\045\113\ufffb\001\002\000\004" +
    "\113\164\001\002\000\112\003\uffac\004\uffac\012\uffac\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\047\uffac\051\uffac\053" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\066\uffac\113\uffac" +
    "\001\002\000\006\004\uffbd\005\uffbd\001\002\000\006\004" +
    "\uffbc\005\uffbc\001\002\000\012\004\uffb8\005\uffb8\010\176" +
    "\011\177\001\002\000\006\004\175\005\174\001\002\000" +
    "\006\004\uffbb\005\uffbb\001\002\000\006\004\uffb9\005\uffb9" +
    "\001\002\000\006\004\uffba\005\uffba\001\002\000\006\111" +
    "\uffa5\117\uffa5\001\002\000\006\111\uffa3\117\uffa3\001\002" +
    "\000\006\111\uffa8\117\uffa8\001\002\000\006\111\uffa9\117" +
    "\uffa9\001\002\000\004\004\201\001\002\000\006\111\uffa6" +
    "\117\uffa6\001\002\000\004\004\uffb8\001\002\000\004\004" +
    "\204\001\002\000\006\111\uffa4\117\uffa4\001\002\000\112" +
    "\003\uffaa\004\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\047\uffaa\051\uffaa\053\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\063\uffaa\066\uffaa\113\uffaa\001\002\000\110\003\054" +
    "\004\041\012\005\013\011\014\014\015\007\016\100\017" +
    "\072\020\067\021\031\022\074\023\042\024\070\025\104" +
    "\026\073\027\066\030\064\031\062\032\052\033\107\034" +
    "\051\035\043\040\044\041\102\042\036\043\046\047\075" +
    "\051\065\053\032\060\057\061\063\062\053\063\061\066" +
    "\045\113\ufffb\001\002\000\004\113\210\001\002\000\004" +
    "\064\211\001\002\000\004\110\212\001\002\000\004\004" +
    "\213\001\002\000\004\004\214\001\002\000\004\111\215" +
    "\001\002\000\004\112\216\001\002\000\110\003\054\004" +
    "\041\012\005\013\011\014\014\015\007\016\100\017\072" +
    "\020\067\021\031\022\074\023\042\024\070\025\104\026" +
    "\073\027\066\030\064\031\062\032\052\033\107\034\051" +
    "\035\043\040\044\041\102\042\036\043\046\047\075\051" +
    "\065\053\032\060\057\061\063\062\053\063\061\066\045" +
    "\113\ufffb\001\002\000\004\113\220\001\002\000\112\003" +
    "\uff74\004\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74" +
    "\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025" +
    "\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74" +
    "\034\uff74\035\uff74\036\uff74\040\uff74\041\uff74\042\uff74\043" +
    "\uff74\047\uff74\051\uff74\053\uff74\060\uff74\061\uff74\062\uff74" +
    "\063\uff74\066\uff74\113\uff74\001\002\000\112\003\uffe5\004" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\047" +
    "\uffe5\051\uffe5\053\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\066\uffe5\113\uffe5\001\002\000\112\003\uffe6\004\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\047\uffe6\051" +
    "\uffe6\053\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\066\uffe6" +
    "\113\uffe6\001\002\000\006\003\226\044\225\001\002\000" +
    "\112\003\uffaf\004\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\047\uffaf\051\uffaf\053\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\066\uffaf\113\uffaf\001\002\000\004\112" +
    "\227\001\002\000\112\003\uffad\004\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\047\uffad\051\uffad\053\uffad" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\066\uffad\113\uffad\001" +
    "\002\000\110\003\054\004\041\012\005\013\011\014\014" +
    "\015\007\016\100\017\072\020\067\021\031\022\074\023" +
    "\042\024\070\025\104\026\073\027\066\030\064\031\062" +
    "\032\052\033\107\034\051\035\043\040\044\041\102\042" +
    "\036\043\046\047\075\051\065\053\032\060\057\061\063" +
    "\062\053\063\061\066\045\113\ufffb\001\002\000\004\113" +
    "\231\001\002\000\112\003\uffae\004\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\047\uffae\051\uffae\053\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\066\uffae\113\uffae\001" +
    "\002\000\004\110\233\001\002\000\014\012\236\013\237" +
    "\014\234\015\240\111\uff85\001\002\000\006\004\uffcd\114" +
    "\uffcd\001\002\000\004\111\246\001\002\000\006\004\uffcf" +
    "\114\uffcf\001\002\000\006\004\uffce\114\uffce\001\002\000" +
    "\006\004\uffcc\114\uffcc\001\002\000\006\111\uff86\120\244" +
    "\001\002\000\004\004\243\001\002\000\006\111\uff84\120" +
    "\uff84\001\002\000\014\012\236\013\237\014\234\015\240" +
    "\111\uff85\001\002\000\004\111\uff87\001\002\000\004\112" +
    "\247\001\002\000\110\003\054\004\041\012\005\013\011" +
    "\014\014\015\007\016\100\017\072\020\067\021\031\022" +
    "\074\023\042\024\070\025\104\026\073\027\066\030\064" +
    "\031\062\032\052\033\107\034\051\035\043\040\044\041" +
    "\102\042\036\043\046\047\075\051\065\053\032\060\057" +
    "\061\063\062\053\063\061\066\045\113\ufffb\001\002\000" +
    "\004\113\251\001\002\000\112\003\uff8b\004\uff8b\012\uff8b" +
    "\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\047\uff8b\051\uff8b" +
    "\053\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\066\uff8b\113" +
    "\uff8b\001\002\000\004\111\253\001\002\000\004\117\254" +
    "\001\002\000\112\003\uffa2\004\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\047\uffa2\051\uffa2\053\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\066\uffa2\113\uffa2\001\002" +
    "\000\012\004\154\005\152\010\153\011\156\001\002\000" +
    "\004\111\257\001\002\000\004\112\260\001\002\000\110" +
    "\003\054\004\041\012\005\013\011\014\014\015\007\016" +
    "\100\017\072\020\067\021\031\022\074\023\042\024\070" +
    "\025\104\026\073\027\066\030\064\031\062\032\052\033" +
    "\107\034\051\035\043\040\044\041\102\042\036\043\046" +
    "\047\075\051\065\053\032\060\057\061\063\062\053\063" +
    "\061\066\045\113\ufffb\001\002\000\004\113\262\001\002" +
    "\000\112\003\uffb1\004\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\047\uffb1\051\uffb1\053\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\066\uffb1\113\uffb1\001\002\000\004" +
    "\111\264\001\002\000\004\112\265\001\002\000\110\003" +
    "\054\004\041\012\005\013\011\014\014\015\007\016\100" +
    "\017\072\020\067\021\031\022\074\023\042\024\070\025" +
    "\104\026\073\027\066\030\064\031\062\032\052\033\107" +
    "\034\051\035\043\040\044\041\102\042\036\043\046\047" +
    "\075\051\065\053\032\060\057\061\063\062\053\063\061" +
    "\066\045\113\ufffb\001\002\000\004\113\267\001\002\000" +
    "\112\003\uff88\004\uff88\012\uff88\013\uff88\014\uff88\015\uff88" +
    "\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\034\uff88\035\uff88\036\uff88\040\uff88\041\uff88\042" +
    "\uff88\043\uff88\047\uff88\051\uff88\053\uff88\060\uff88\061\uff88" +
    "\062\uff88\063\uff88\066\uff88\113\uff88\001\002\000\004\007" +
    "\271\001\002\000\004\111\272\001\002\000\004\117\273" +
    "\001\002\000\112\003\uff73\004\uff73\012\uff73\013\uff73\014" +
    "\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73\022\uff73" +
    "\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031" +
    "\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\040\uff73" +
    "\041\uff73\042\uff73\043\uff73\047\uff73\051\uff73\053\uff73\060" +
    "\uff73\061\uff73\062\uff73\063\uff73\066\uff73\113\uff73\001\002" +
    "\000\022\003\305\004\307\005\301\006\275\007\302\010" +
    "\277\011\304\110\300\001\002\000\016\070\uffc1\071\uffc1" +
    "\072\uffc1\073\uffc1\111\uffc1\117\uffc1\001\002\000\012\070" +
    "\uffc9\071\uffc9\111\uffc9\117\uffc9\001\002\000\016\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\111\uffbf\117\uffbf\001\002\000" +
    "\022\003\305\004\307\005\301\006\275\007\302\010\277" +
    "\011\304\110\300\001\002\000\016\070\uffc2\071\uffc2\072" +
    "\uffc2\073\uffc2\111\uffc2\117\uffc2\001\002\000\016\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\111\uffc3\117\uffc3\001\002\000" +
    "\010\070\316\071\315\117\314\001\002\000\016\070\uffc0" +
    "\071\uffc0\072\uffc0\073\uffc0\111\uffc0\117\uffc0\001\002\000" +
    "\016\070\uffbe\071\uffbe\072\uffbe\073\uffbe\111\uffbe\117\uffbe" +
    "\001\002\000\016\070\uffc6\071\uffc6\072\310\073\311\111" +
    "\uffc6\117\uffc6\001\002\000\016\070\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\111\uffc4\117\uffc4\001\002\000\022\003\305\004" +
    "\307\005\301\006\275\007\302\010\277\011\304\110\300" +
    "\001\002\000\022\003\305\004\307\005\301\006\275\007" +
    "\302\010\277\011\304\110\300\001\002\000\012\070\uffc7" +
    "\071\uffc7\111\uffc7\117\uffc7\001\002\000\012\070\uffc8\071" +
    "\uffc8\111\uffc8\117\uffc8\001\002\000\112\003\uffab\004\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\040\uffab\041\uffab\042\uffab\043\uffab\047\uffab" +
    "\051\uffab\053\uffab\060\uffab\061\uffab\062\uffab\063\uffab\066" +
    "\uffab\113\uffab\001\002\000\022\003\305\004\307\005\301" +
    "\006\275\007\302\010\277\011\304\110\300\001\002\000" +
    "\022\003\305\004\307\005\301\006\275\007\302\010\277" +
    "\011\304\110\300\001\002\000\012\070\uffcb\071\uffcb\111" +
    "\uffcb\117\uffcb\001\002\000\012\070\uffca\071\uffca\111\uffca" +
    "\117\uffca\001\002\000\010\070\316\071\315\111\322\001" +
    "\002\000\016\070\uffc5\071\uffc5\072\uffc5\073\uffc5\111\uffc5" +
    "\117\uffc5\001\002\000\004\005\324\001\002\000\004\111" +
    "\325\001\002\000\004\117\326\001\002\000\112\003\uffa1" +
    "\004\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\047\uffa1\051\uffa1\053\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\066\uffa1\113\uffa1\001\002\000\006\004\331\013\330" +
    "\001\002\000\004\004\351\001\002\000\004\067\337\001" +
    "\002\000\004\111\333\001\002\000\004\112\334\001\002" +
    "\000\110\003\054\004\041\012\005\013\011\014\014\015" +
    "\007\016\100\017\072\020\067\021\031\022\074\023\042" +
    "\024\070\025\104\026\073\027\066\030\064\031\062\032" +
    "\052\033\107\034\051\035\043\040\044\041\102\042\036" +
    "\043\046\047\075\051\065\053\032\060\057\061\063\062" +
    "\053\063\061\066\045\113\ufffb\001\002\000\004\113\336" +
    "\001\002\000\112\003\uff7f\004\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f" +
    "\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031" +
    "\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\040\uff7f" +
    "\041\uff7f\042\uff7f\043\uff7f\047\uff7f\051\uff7f\053\uff7f\060" +
    "\uff7f\061\uff7f\062\uff7f\063\uff7f\066\uff7f\113\uff7f\001\002" +
    "\000\004\005\340\001\002\000\004\117\341\001\002\000" +
    "\012\004\154\005\152\010\153\011\156\001\002\000\004" +
    "\117\343\001\002\000\010\004\345\100\346\111\uff7c\001" +
    "\002\000\004\111\uff7e\001\002\000\004\100\350\001\002" +
    "\000\004\004\347\001\002\000\004\111\uff7a\001\002\000" +
    "\004\111\uff7b\001\002\000\004\067\352\001\002\000\004" +
    "\005\353\001\002\000\004\117\354\001\002\000\012\004" +
    "\154\005\152\010\153\011\156\001\002\000\004\117\356" +
    "\001\002\000\010\004\345\100\346\111\uff7c\001\002\000" +
    "\004\111\uff7d\001\002\000\004\005\361\001\002\000\004" +
    "\120\362\001\002\000\004\005\363\001\002\000\004\120" +
    "\364\001\002\000\004\005\365\001\002\000\004\120\366" +
    "\001\002\000\004\005\367\001\002\000\004\120\370\001" +
    "\002\000\004\005\371\001\002\000\004\120\372\001\002" +
    "\000\004\005\373\001\002\000\004\120\374\001\002\000" +
    "\004\005\375\001\002\000\004\120\376\001\002\000\004" +
    "\005\377\001\002\000\004\120\u0100\001\002\000\004\005" +
    "\u0101\001\002\000\004\120\u0102\001\002\000\004\005\u0103" +
    "\001\002\000\004\120\u0104\001\002\000\004\005\u0105\001" +
    "\002\000\004\120\u0106\001\002\000\004\005\u0107\001\002" +
    "\000\004\111\u0108\001\002\000\004\117\u0109\001\002\000" +
    "\112\003\uff9e\004\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\047\uff9e\051\uff9e\053\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\066\uff9e\113\uff9e\001\002\000\004\005" +
    "\u010b\001\002\000\004\120\u010c\001\002\000\004\005\u010d" +
    "\001\002\000\004\120\u010e\001\002\000\004\005\u010f\001" +
    "\002\000\004\120\u0110\001\002\000\004\005\u0111\001\002" +
    "\000\004\111\u0112\001\002\000\004\117\u0113\001\002\000" +
    "\112\003\uffa0\004\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\036\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\047\uffa0\051\uffa0\053\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\066\uffa0\113\uffa0\001\002\000\004\110" +
    "\u0115\001\002\000\004\111\u0116\001\002\000\004\117\u0117" +
    "\001\002\000\112\003\uff8a\004\uff8a\012\uff8a\013\uff8a\014" +
    "\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\043\uff8a\047\uff8a\051\uff8a\053\uff8a\060" +
    "\uff8a\061\uff8a\062\uff8a\063\uff8a\066\uff8a\113\uff8a\001\002" +
    "\000\004\055\u0119\001\002\000\004\004\u011a\001\002\000" +
    "\004\110\u011b\001\002\000\006\004\u011d\005\u011c\001\002" +
    "\000\006\111\uff80\120\uff80\001\002\000\006\111\uff81\120" +
    "\uff81\001\002\000\004\111\u0122\001\002\000\006\111\uff83" +
    "\120\u0120\001\002\000\006\004\u011d\005\u011c\001\002\000" +
    "\004\111\uff82\001\002\000\004\117\u0123\001\002\000\112" +
    "\003\uffd9\004\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\047\uffd9\051\uffd9\053\uffd9\060\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\066\uffd9\113\uffd9\001\002\000\004\002\ufffd" +
    "\001\002\000\116\003\uffd8\004\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\047\uffd8\051\uffd8\053\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\066\uffd8\067\u0127\113\uffd8" +
    "\117\u0126\001\002\000\112\003\uffe4\004\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\047\uffe4\051\uffe4\053" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\066\uffe4\113\uffe4" +
    "\001\002\000\004\005\u0128\001\002\000\114\003\uffd4\004" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\047" +
    "\uffd4\051\uffd4\053\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\066\uffd4\113\uffd4\117\u0129\001\002\000\112\003\uffe0\004" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\047" +
    "\uffe0\051\uffe0\053\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\066\uffe0\113\uffe0\001\002\000\004\110\u012b\001\002\000" +
    "\004\111\u012c\001\002\000\004\052\u012d\001\002\000\110" +
    "\003\054\004\041\012\005\013\011\014\014\015\007\016" +
    "\100\017\072\020\067\021\031\022\074\023\042\024\070" +
    "\025\104\026\073\027\066\030\064\031\062\032\052\033" +
    "\107\034\051\035\043\036\ufffb\040\044\041\102\042\036" +
    "\043\046\047\075\051\065\053\032\060\057\061\063\062" +
    "\053\063\061\066\045\001\002\000\004\036\u012f\001\002" +
    "\000\004\002\uffff\001\002\000\116\003\uffd6\004\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\047\uffd6\051" +
    "\uffd6\053\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\066\uffd6" +
    "\067\u0132\113\uffd6\117\u0131\001\002\000\112\003\uffe1\004" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\047" +
    "\uffe1\051\uffe1\053\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\066\uffe1\113\uffe1\001\002\000\006\010\u0133\011\u0134\001" +
    "\002\000\114\003\uffd2\004\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\047\uffd2\051\uffd2\053\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\066\uffd2\113\uffd2\117\u0136\001" +
    "\002\000\114\003\uffd1\004\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\047\uffd1\051\uffd1\053\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\066\uffd1\113\uffd1\117\u0135\001" +
    "\002\000\112\003\uffdc\004\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\047\uffdc\051\uffdc\053\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\066\uffdc\113\uffdc\001\002\000" +
    "\112\003\uffdd\004\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\047\uffdd\051\uffdd\053\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\066\uffdd\113\uffdd\001\002\000\004\002" +
    "\001\001\002\000\116\003\uffd7\004\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\047\uffd7\051\uffd7\053\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\063\uffd7\066\uffd7\067\u013a\113" +
    "\uffd7\117\u0139\001\002\000\112\003\uffe3\004\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\047\uffe3\051\uffe3" +
    "\053\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\066\uffe3\113" +
    "\uffe3\001\002\000\004\006\u013b\001\002\000\114\003\uffd3" +
    "\004\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\047\uffd3\051\uffd3\053\uffd3\060\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\066\uffd3\113\uffd3\117\u013c\001\002\000\112\003\uffdf" +
    "\004\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\047\uffdf\051\uffdf\053\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\066\uffdf\113\uffdf\001\002\000\004\116\u013e\001\002" +
    "\000\004\004\u013f\001\002\000\004\067\u0140\001\002\000" +
    "\014\012\236\013\237\014\234\015\240\112\u0141\001\002" +
    "\000\002\001\002\000\004\114\u0143\001\002\000\004\005" +
    "\u0144\001\002\000\004\116\u0145\001\002\000\004\117\u0146" +
    "\001\002\000\112\003\uffdb\004\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\047\uffdb\051\uffdb\053\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\066\uffdb\113\uffdb\001\002" +
    "\000\004\113\u0148\001\002\000\004\117\u0149\001\002\000" +
    "\112\003\uffda\004\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\047\uffda\051\uffda\053\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\066\uffda\113\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\010\002\003\003\005\020\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\002\003\011\075\020\102\021\105\022" +
    "\046\023\076\031\027\033\070\034\054\035\025\066\034" +
    "\071\057\072\037\073\047\074\036\075\032\076\107\077" +
    "\033\103\026\105\104\106\100\107\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\112\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\002\003\011" +
    "\075\020\102\022\147\023\076\031\027\033\070\034\054" +
    "\035\025\066\034\071\057\072\037\073\047\074\036\075" +
    "\032\076\107\077\033\103\026\105\104\106\100\107\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\003\011\075\020\102\021" +
    "\141\022\046\023\076\031\027\033\070\034\054\035\025" +
    "\066\034\071\057\072\037\073\047\074\036\075\032\076" +
    "\107\077\033\103\026\105\104\106\100\107\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\154\001\001\000\004\041\202\001" +
    "\001\000\002\001\001\000\004\041\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\002\003\011\075\020\102" +
    "\021\162\022\046\023\076\031\027\033\070\034\054\035" +
    "\025\066\034\071\057\072\037\073\047\074\036\075\032" +
    "\076\107\077\033\103\026\105\104\106\100\107\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\002\003\011\075\020\102\021\206\022\046\023\076" +
    "\031\027\033\070\034\054\035\025\066\034\071\057\072" +
    "\037\073\047\074\036\075\032\076\107\077\033\103\026" +
    "\105\104\106\100\107\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\002" +
    "\003\011\075\020\102\021\216\022\046\023\076\031\027" +
    "\033\070\034\054\035\025\066\034\071\057\072\037\073" +
    "\047\074\036\075\032\076\107\077\033\103\026\105\104" +
    "\106\100\107\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\002\003\011\075\020\102\021\227\022\046" +
    "\023\076\031\027\033\070\034\054\035\025\066\034\071" +
    "\057\072\037\073\047\074\036\075\032\076\107\077\033" +
    "\103\026\105\104\106\100\107\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\241" +
    "\100\234\102\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\241\100\244\102\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\003\011\075\020\102\021" +
    "\247\022\046\023\076\031\027\033\070\034\054\035\025" +
    "\066\034\071\057\072\037\073\047\074\036\075\032\076" +
    "\107\077\033\103\026\105\104\106\100\107\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\002\003\011" +
    "\075\020\102\021\260\022\046\023\076\031\027\033\070" +
    "\034\054\035\025\066\034\071\057\072\037\073\047\074" +
    "\036\075\032\076\107\077\033\103\026\105\104\106\100" +
    "\107\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\002\003\011\075" +
    "\020\102\021\265\022\046\023\076\031\027\033\070\034" +
    "\054\035\025\066\034\071\057\072\037\073\047\074\036" +
    "\075\032\076\107\077\033\103\026\105\104\106\100\107" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\302\026\275\030\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\320\026\275\030\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\312" +
    "\001\001\000\004\030\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\317\030\305" +
    "\001\001\000\006\026\316\030\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\002\003\011\075\020\102\021\334\022\046\023\076" +
    "\031\027\033\070\034\054\035\025\066\034\071\057\072" +
    "\037\073\047\074\036\075\032\076\107\077\033\103\026" +
    "\105\104\106\100\107\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\341\001\001\000\002\001\001\000\004\004\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\354\001\001" +
    "\000\002\001\001\000\004\004\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\101\u011d\110\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\101\u0120\110\u011e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\002\003\011\075\020" +
    "\102\021\u012d\022\046\023\076\031\027\033\070\034\054" +
    "\035\025\066\034\071\057\072\037\073\047\074\036\075" +
    "\032\076\107\077\033\103\026\105\104\106\100\107\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\u0141" +
    "\001\001\000\004\014\u0146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static TablaSimbolos tablaSimbolos = new TablaSimbolos();
    static int verificarTipo = 0;
    private final int SINTACTICO = 232;
    
    static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
        System.out.println("EMPEZAMOS");
		new Sintax(new LexerCup(System.in)).parse();
	}
    
    private Symbol s;
    
    public Symbol getS(){
        return this.s;
    }

    public void syntax_error(Symbol s){     
        JLabel lb = new JLabel();                       
        lb.setForeground(new Color(217, 33, 51));
        lb.setFont(new Font("Verdana", Font.PLAIN, 14));
        lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lb.setText("Error en la línea " + (s.right+1) + ". Error sintáctico, cadena inesperada: "+ s.value );                       
        VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico", s.right+1,SINTACTICO));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        JLabel lb = new JLabel();       
        lb.setForeground(new Color(217, 33, 51));
        lb.setFont(new Font("Verdana", Font.PLAIN, 14));
        lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lb.setText("Error en la línea " + (s.right+1) + ". Error sintáctico, cadena inesperada: "+ s.value );                       
        VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico", s.right+1,SINTACTICO));
    }

    public void linea(int right){
        System.out.println("Linea: "+right);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


        Hashtable table = new Hashtable();
        private final int SINTACTICO = 232;
    
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // give ::= GIVE PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("give",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // get ::= GET PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("get",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tryycatch ::= CHECK LLAVE_ABRE bloquesentencias LLAVE_CIERRA TRAP PARENTESIS_ABRE IDENTIFICADOR IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tryycatch",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencia_booleana ::= IDENTIFICADOR PUNTO SAME PARENTESIS_ABRE CADENA_TEXTO PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_booleana ::= IDENTIFICADOR op_rel IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_booleana ::= IDENTIFICADOR op_rel NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_booleana ::= IDENTIFICADOR op_rel FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_booleana ::= IDENTIFICADOR op_rel TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declaracion_for ::= MAS_MAS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declaracion_for ::= IDENTIFICADOR MAS_MAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // declaracion_for ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_for",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_for ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA condicion PUNTOYCOMA declaracion_for 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("IDENTIFICADOR:id SIGNO_DE_IGUAL NUMERO:valor PUNTOYCOMA condicion PUNTOYCOMA declaracion_for", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "just","Variable númerica en ciclo for");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_for ::= IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA condicion PUNTOYCOMA declaracion_for 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim == null) {
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' no existe." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' no existe.", idright+1,SINTACTICO,
                new Gramatica("IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA condicion PUNTOYCOMA declaracion_for", "Variable repetida")));
            }else{
                //TablaSimbolos.crear(id, "just","Variable númerica en ciclo for");
                //TablaSimbolos.insertar(id, String.valueOf(valor));
                sim.setValor(valor);
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia_for",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // for ::= FOR PARENTESIS_ABRE sentencia_for PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametroa ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametroa ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametroa",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametrosa ::= parametroa COMA parametrosa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosa",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametrosa ::= parametroa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametrosa",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametro ::= t_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error semantico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semantico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA ", "semantico repetido")));
            }else{
                if(td.equals("word"))
                    TablaSimbolos.crear(id, "word","Variable tipo cadena en parmetro");
                if(td.equals("just"))
                    TablaSimbolos.crear(id, "just","Variable tipo númerica en parmetro");
                if(td.equals("flag"))
                    TablaSimbolos.crear(id, "word","Variable tipo booleana en parmetro");
                if(td.equals("broken"))
                    TablaSimbolos.crear(id, "word","Variable tipo flotante en parmetro");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);      
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametro",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // main ::= MAIN PARENTESIS_ABRE PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // constructor ::= IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constructor",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // metodo ::= MODEL IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // metodo ::= METHOD IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // metodo_sin_parametros ::= GETTEMPERATURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // metodo_sin_parametros ::= HOME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // metodo_sin_parametros ::= GETFILAMENTTYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // metodo_sin_parametros ::= GETFILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // metodo_sin_parametros ::= SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // metodo_sin_parametros ::= GETEXTRUSORZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // metodo_sin_parametros ::= GETEXTRUSORY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // metodo_sin_parametros ::= GETEXTRUSORX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // metodo_sin_parametros ::= STOP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_sin_parametros",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // metodo_un_parametro ::= PRINTERPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_un_parametro",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // metodo_un_parametro ::= SETNEWFILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_un_parametro",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // metodo_un_parametro ::= SETFILAMENTTYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_un_parametro",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // metodo_cuatro_parametros ::= FILLCIRCLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_cuatro_parametros",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // metodo_cuatro_parametros ::= DRAWCIRCLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_cuatro_parametros",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // metodo_nueve_parametros ::= DRAWTRIANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_nueve_parametros",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // metodo_nueve_parametros ::= FILLTRIANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_nueve_parametros",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // metodo_doce_parametros ::= DRAWRECTANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_doce_parametros",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // metodo_doce_parametros ::= FILLRECTANGLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodo_doce_parametros",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // metodos_parametros ::= metodo_doce_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // metodos_parametros ::= metodo_nueve_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // metodos_parametros ::= metodo_cuatro_parametros PARENTESIS_ABRE NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // metodos_parametros ::= metodo_un_parametro PARENTESIS_ABRE NUMERO PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // metodos_parametros ::= metodo_sin_parametros PARENTESIS_ABRE PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("metodos_parametros",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion ::= IDENTIFICADOR op_rel IDENTIFICADOR 
            {
              Object RESULT =null;
		int id_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id_1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int id_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id_2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim_1 = TablaSimbolos.buscar(id_1);
            Simbolo sim_2 = TablaSimbolos.buscar(id_2);
        
            if (sim_1 == null) {
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (id_1right+1) + ". Error sintáctico. La variable '"+id_1+"' no existe" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id_1+"' no existe", id_1right+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IFENTIFICADOR","Error sintáctico. La variable '"+id_1+"' no existe")));
            }
            else{
                if (sim_2 == null) {
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (id_2right+1) + ". Error sintáctico. La variable '"+id_2+"' no existe" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id_2+"' no existe", id_2right+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IFENTIFICADOR","Error sintáctico. La variable '"+id_2+"' no existe")));
                }else
                    if(sim_1.tipo.equals("just") && !sim_2.tipo.equals("cad")){ 
                        JLabel lb = new JLabel();
                        lb.setForeground(new Color(217, 33, 51));
                        lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                        lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                        lb.setText("Error en la línea " + (id_1right+1) + ". Error semántico. La variable '"+id_1+"' es del tipo "+sim_1.tipo+" y la varibale '"+id_2+"' es del tipo "+sim_2+".");   
                        VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id_1+"' es del tipo "+sim_1.tipo+" y la varibale '"+id_2+"' es del tipo "+sim_2+".", id_1right+1,SINTACTICO,
                        new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id_1+"' es del tipo "+sim_1.tipo+" y la varibale '"+id_2+"' es del tipo "+id_2+".")));           
                    }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion ::= NUMERO op_rel IDENTIFICADOR 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);        
            if (sim == null) {
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error sintáctico. La variable '"+id+"' no existe")));
            }
            else{
                if(!sim.tipo.equals("just")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo just" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo just", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id+"' no es de tipo just")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicion ::= IDENTIFICADOR op_rel NUMERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error sintáctico. La variable '"+id+"' no existe")));
            }
            else{
                if(!sim.tipo.equals("just")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo just" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo just", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id+"' no es de tipo just")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion ::= TRUE IGUAL_QUE IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error sintáctico. La variable '"+id+"' no existe")));
                System.out.println("El identificador '"+id+"' no existe");
            }
            else{
                if(!sim.tipo.equals("flag")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo flag" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo flag", idright+1,SINTACTICO,
                    new Gramatica("condicion::= TRUE IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id+"' no es de tipo flag")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion ::= FALSE IGUAL_QUE IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                new Gramatica("condicion::= FALSE IGUAL_QUE IDENTIFICADOR","Error sintáctico. La variable '"+id+"' no existe")));
                System.out.println("El identificador '"+id+"' no existe");
            }
            else{
                if(!sim.tipo.equals("flag")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo flag" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo flag", idright+1,SINTACTICO,
                    new Gramatica("condicion::= FALSE IGUAL_QUE IDENTIFICADOR","Error semántico. La variable '"+id+"' no es de tipo flag")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion ::= IDENTIFICADOR IGUAL_QUE TRUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE TRUE","Error sintáctico. La variable '"+id+"' no existe")));
                System.out.println("El identificador '"+id+"' no existe");
            }
            else{
                if(!sim.tipo.equals("flag")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo flag" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo flag", idright+1,SINTACTICO,
                    new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE TRUE","Error semántico. La variable '"+id+"' no es de tipo flag")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= IDENTIFICADOR IGUAL_QUE FALSE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
            Simbolo sim = TablaSimbolos.buscar(id);
        
            if (sim == null) {
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable '"+id+"' no existe" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable '"+id+"' no existe", idright+1,SINTACTICO,
                new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE FALSE","Error sintáctico. La variable '"+id+"' no existe")));
                System.out.println("El identificador '"+id+"' no existe");
            }
            else{
                if(!sim.tipo.equals("flag")){ 
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (idright+1) + ". Error semántico. La variable '"+id+"' no es de tipo flag" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+id+"' no es de tipo flag", idright+1,SINTACTICO,
                    new Gramatica("condicion::= IDENTIFICADOR IGUAL_QUE FALSE","Error semántico. La variable '"+id+"' no es de tipo flag")));           
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicion",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentcut ::= CUT PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentcut",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentasignacion ::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        //Buscar variable en la tabla de simbolos
        Simbolo sim = TablaSimbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sim == null) {
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (identificadorright+1) + ". Error semántico. La variable '"+identificador+"' no existe" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+identificador+"' no existe", identificadorright+1,SINTACTICO,
            new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA","Error semántico. La variable '"+identificador+"' no existe")));
            System.out.println("El identificador '"+identificador+"' no existe");
        }
        else{
            if(sim.tipo.equals("just") || sim.tipo.equals("broken"))
                VentanaPrincipal.exp = identificador +"="+ String.valueOf(e);
            else{ 
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (identificadorright+1) + ". Error semántico. La variable '"+identificador+"' no es de algún tipo numérico" );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+identificador+"' no es de algún tipo numérico", identificadorright+1,SINTACTICO,
                new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA","Error semántico. La variable '"+identificador+"' no es de algún tipo numérico")));           
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentasignacion",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentwhile ::= WHILE PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentwhile",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentelse ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (eright+1) + ". Error sintáctico. El bloque 'else' no está bien escrito" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. El bloque 'else' no está bien escrito", eright+1,SINTACTICO,
            new Gramatica("factor::= expresion | NUMERO | DECIMAL | IDENTIFICADOR","Error sintáctico. El bloque 'else' no está bien escrito")));;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentelse",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentelse ::= ELSE LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentelse",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentif ::= error NT$0 sentelse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentif",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (eright+1) + ". Error sintáctico. El bloque 'if' no está bien escrito" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. El bloque 'if' no está bien escrito", eright+1,SINTACTICO,
            new Gramatica("factor::= expresion | NUMERO | DECIMAL | IDENTIFICADOR","Error sintáctico. El bloque 'if' no está bien escrito")));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentif ::= IF PARENTESIS_ABRE condicion PARENTESIS_CIERRA LLAVE_ABRE bloquesentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentif",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op_log ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_log",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op_log ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_log",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op_art ::= SIGNO_DE_MULTIPLICACIÓN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op_art ::= SIGNO_DE_DIVISIÓN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op_art ::= SIGNO_DE_RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op_art ::= SIGNO_DE_SUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_art",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op_rel ::= IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op_rel ::= DIFERENTE_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op_rel ::= MENOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_rel ::= MAYOR_O_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_rel ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_rel ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_rel",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
       JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (eright+1) + ". Error sintáctico. La expresión no esta bien escrita" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La expresión no esta bien escrita", eright+1,SINTACTICO,
            new Gramatica("factor::= expresion | NUMERO | DECIMAL | IDENTIFICADOR","Error sintáctico. La expresión no esta bien escrita")));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= TRUE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= DECIMAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= NUMERO 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= CADENA_TEXTO 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; ;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Simbolo sim = TablaSimbolos.buscar(f);
        //Si es nulo, devuelvo un error
        if (sim == null) {
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (fright+1) + ". Error semántico. La variable '"+f+"' no existe" );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. La variable '"+f+"' no existe", fright+1,SINTACTICO,
            new Gramatica("sentasignacion::= IDENTIFICADOR SIGNO_DE_IGUAL expresion PUNTOYCOMA","Error semántico. La variable '"+f+"' no existe")));
            System.out.println("El identificador '"+f+"' no existe");
                
            RESULT = 0; 
        }
        else{
            System.out.println("*****id: "+sim.valor);  
            RESULT = sim.valor; 
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        //System.out.println("EMPIEZA FACTOR");
        RESULT =  "("+e+")";
        //System.out.println("exp: "+e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = f; 
        //System.out.println("EMPIEZA TERMINO");
        //System.out.println("factor "+f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // termino ::= factor SIGNO_DE_DIVISIÓN factor 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    System.out.println("EMPIEZA TERMINO");
        RESULT = f1+"/"+f2;
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                String str = ((String) f2).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error semántico. No se puede dividir una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede dividir una variable 'just' y una 'word'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede dividir una variable 'just' y una 'word'")));
                }
                else
                    System.out.println("**"+f2+": f2  es varibale");
            }
        }
        if (f1 instanceof String){
            if(f2 instanceof Integer){
                String str = ((String) f1).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error semántico. No se puede dividir una variable 'word' y una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede dividir una variable 'word' y una 'just'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede dividir una variable 'word' y una 'just'")));
                }
            }
        }
        //System.out.println("factor1 "+f1);
        //System.out.println("factor2 "+f2);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // termino ::= factor SIGNO_DE_MULTIPLICACIÓN factor 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = f1+"*"+f2;
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                String str = ((String) f2).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error semántico. No se puede multiplicar una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede multiplicar una variable 'just' y  una 'word'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede multiplicar una variable 'just' y una 'word'")));          
                }
                else
                    System.out.println("**"+f2+": f2  es varibale");                    
            }
        }
        if (f1 instanceof String){
           if(f2 instanceof Integer){
                String str = ((String) f1).substring(0, 1);
                if(str.equals("\"")){
                JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (f2right+1) + ". Error semántico. No se puede multiplicar una variable 'word' una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede multiplicar una variable 'word' una 'just'", f2right+1,SINTACTICO,
                    new Gramatica("termino ::= factor: SIGNO_DE_MULTIPLICACIÓN factor", "No se puede multiplicar una variable 'word' una 'just'")));
                }
            }
        }
        //System.out.println("factor1 "+f1);
        //System.out.println("factor2 "+f2);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = t; 
        //System.out.println("EMPIEZA EXPRESION");        
        //System.out.println("termino: "+t);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion SIGNO_DE_RESTA termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (e instanceof Integer){
            if(t instanceof String){
                String str = ((String) t).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (tright+1) + ". Error semántico. No se puede restar una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede restar una variable 'just' y una 'word'", tright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede restar una variable 'just' y una 'word'")));                          
                }
            }
        }
        if (t instanceof Integer){
            if(e instanceof String){
                String str = ((String) e).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (eright+1) + ". Error semántico. No se puede restar una variable 'word' y una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede restar una variable 'word' y una 'just'", eright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede restar una variable 'word' y una 'just'")));                          
                }
            }
        }
        //System.out.println("EMPIEZA EXPRESION");
        RESULT = e+"-"+t;
        //System.out.println("termino: "+t);
        //System.out.println("exp: "+e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion SIGNO_DE_SUMA termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (e instanceof Integer){
            if(t instanceof String){
                String str = ((String) t).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (tright+1) + ". Error semántico. No se puede sumar una variable 'just' y una 'word'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede sumar una variable 'just' y una 'word'", tright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede sumar una variable 'just' y una 'word'")));                          
                }
            }
        }
        if (t instanceof Integer){
            if(e instanceof String){
                String str = ((String) e).substring(0, 1);
                if(str.equals("\"")){
                    JLabel lb = new JLabel();
                    lb.setForeground(new Color(217, 33, 51));
                    lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                    lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    lb.setText("Error en la línea " + (eright+1) + ". Error semántico. No se puede sumar una variable 'word' y una 'just'" );   
                    VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error semántico. No se puede sumar una variable 'word' y una 'just'", eright+1,SINTACTICO,
                    new Gramatica("expresion ::= expresion SIGNO_DE_SUMA termino", "No se puede sumar una variable 'word' y una 'just'")));                          
                }
            }
        }

        //System.out.println("EMPIEZA EXPRESION");
        RESULT = e+"+"+t;
        //System.out.println("termino: "+t);
        //System.out.println("exp: "+e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // t_dato ::= FLAG 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT =  td;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // t_dato ::= WORD 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT =  td;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // t_dato ::= JUST 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT =  td;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // t_dato ::= BROKEN 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT =  td;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("t_dato",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= WORD IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: WORD "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: WORD "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= WORD IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO PUNTOYCOMA ", "Falta punto y coma en declaración: WORD "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL FALSE 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: FLAG "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: FLAG "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL FALSE PUNTOYCOMA ", "Falta punto y coma en declaración: FLAG "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL TRUE 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: FLAG "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: FLAG "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL TRUE PUNTOYCOMA ", "Falta punto y coma en declaración: FLAG "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: BROKEN "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: BROKEN "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL PUNTOYCOMA ", "Falta punto y coma en declaración: BROKEN "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: JUST "+id+" = "+valor );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: JUST "+id+" = "+valor, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA", "Falta punto y coma en declaración: JUST "+id+" = "+valor)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= WORD IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: WORD "+id );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: WORD "+id, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA ", "Falta punto y coma en declaración: WORD "+id)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= FLAG IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: FLAG "+id );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: FLAG "+id, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= FLAG IDENTIFICADOR PUNTOYCOMA ", "Falta punto y coma en declaración: FLAG "+id)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion ::= BROKEN IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: BROKEN "+id );   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: BROKEN "+id, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= BROKEN IDENTIFICADOR PUNTOYCOMA ", "Falta punto y coma en declaración: BROKEN "+id)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion ::= JUST IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         try{                
            JLabel lb = new JLabel();
            lb.setForeground(new Color(217, 33, 51));
            lb.setFont(new Font("Verdana", Font.PLAIN, 14));
            lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. Falta punto y coma en declaración: declaración: JUST "+id);   
            VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. Falta punto y coma en declaración: JUST "+id, idright+1,SINTACTICO,
            new Gramatica("declaracion ::= JUST IDENTIFICADOR PUNTOYCOMA", "Falta punto y coma en declaración: JUST "+id)));

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion ::= IDENTIFICADOR IDENTIFICADOR SIGNO_DE_IGUAL NEW IDENTIFICADOR PARENTESIS_ABRE parametrosa PARENTESIS_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion ::= t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL LLAVE_ABRE datos_array LLAVE_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion ::= t_dato CORCHETE_ABRE CORCHETE_CIERRA IDENTIFICADOR SIGNO_DE_IGUAL t_dato CORCHETE_ABRE NUMERO CORCHETE_CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL FALSE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");       
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= FLAG IDENTIFICADOR = FALSE PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "flag","Variable tipo booleana");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id); 
            }            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= FLAG IDENTIFICADOR SIGNO_DE_IGUAL TRUE PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");     
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= FLAG IDENTIFICADOR = TRUE PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "flag","Variable tipo booleana");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id); 
            }         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion ::= WORD IDENTIFICADOR SIGNO_DE_IGUAL CADENA_TEXTO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= WORD IDENTIFICADOR = CADENA_TEXTO PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "word","Variable tipo cadena");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);  
            }        
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");     
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO, new Gramatica("declaracion ::= BROKEN IDENTIFICADOR SIGNO_DE_IGUAL DECIMAL PUNTOYCOMA ", "Variable repetido")));
            }else{
                TablaSimbolos.crear(id, "broken","Variable flotante");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion ::= JUST IDENTIFICADOR SIGNO_DE_IGUAL NUMERO PUNTOYCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");   
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= JUST IDENTIFICADOR = NUMERO PUNTOYCOMA ", "Variable repetida")));
            }else{
                TablaSimbolos.crear(id, "just","Variable númerica");
                TablaSimbolos.insertar(id, String.valueOf(valor));
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion ::= FLAG IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");    
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= FLAG IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "flag","Variable booleana");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);     
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
             //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");    
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= WORD IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "word","Variable tipo cadena");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);      
            }   
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= BROKEN IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        System.out.println(id+" en la linea: "+(idright+1));
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
        //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");    
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO,
                new Gramatica("declaracion ::= BROKEN IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "broken","Variable flotante");
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion ::= JUST IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        System.out.println(id+" en la linea: "+(idright+1));
        try{
            Simbolo sim = TablaSimbolos.buscar(id);
            //Si es nulo, devuelvo un error
            if (sim != null) {
                System.out.println("El identificador '"+id+"' ya existe");
                JLabel lb = new JLabel();
                lb.setForeground(new Color(217, 33, 51));
                lb.setFont(new Font("Verdana", Font.PLAIN, 14));
                lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lb.setText("Error en la línea " + (idright+1) + ". Error sintáctico. La variable: '"
                +id+"' ya está declarada." );   
                VentanaPrincipal.labelsErrores.add(new LabelError(lb, "Error sintáctico. La variable: '"
                +id+"' ya está declarada.", idright+1,SINTACTICO, 
                new Gramatica("declaracion ::= JUST IDENTIFICADOR PUNTOYCOMA ", "indetificador repetido")));
            }else{
                TablaSimbolos.crear(id, "just","Variable númerica");
                TablaSimbolos.lista.push(id);          
            }
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= error LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= give 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= get 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= tryycatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= metodo_doce_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= metodo_nueve_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= metodo_cuatro_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= metodo_un_parametro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= metodo_sin_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= metodos_parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= main 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= home 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= metodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= sentcut 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= sentasignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= sentwhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= sentif 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencias",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencias",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloquesentencias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloquesentencias ::= sentencias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloquesentencias",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));
            
            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= declaracion IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        System.out.println("Linea: "+nombreright);
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA BEGIN bloquesentencias END 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

